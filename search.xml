<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>celery异步框架(5.0)</title>
      <link href="/blogs/2021/01/30/6%E3%80%81celery%E5%BC%82%E6%AD%A5%E6%A1%86%E6%9E%B6/"/>
      <url>/blogs/2021/01/30/6%E3%80%81celery%E5%BC%82%E6%AD%A5%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="Celery是什么"><a href="#Celery是什么" class="headerlink" title="Celery是什么"></a>Celery是什么</h2><p>celery是一种功能完备的即插即用的任务对列<br>celery适用异步处理问题，比如上传邮件、上传文件、图像处理等比较耗时的事情<br>异步执行，这样用户不需要等待很长的时间，提高用户的体验<br>celery是由python语言编写的，但是可以使用于许多语言，比如js、PHP等</p><h2 id="Celery特点"><a href="#Celery特点" class="headerlink" title="Celery特点"></a>Celery特点</h2><ul><li>简单：一但熟悉了celery的工作流程后，配置和使用还是比较简单的 </li><li>高可用：当任务执行失败或执行过程中发生连接中断，celery会自动尝试重新执行任务 </li><li>快速：一个单进程的celery每分钟可处理上百万个任务 </li><li>灵活：几乎celery的各个组件都可以被扩展及自定制</li></ul><h2 id="什么情况下会用到celery"><a href="#什么情况下会用到celery" class="headerlink" title="什么情况下会用到celery"></a>什么情况下会用到celery</h2><p>比如你想对100台机器执行一条批量命令，可能会花很长时间，但你不想让你的程序等着结果返回，而是给你返回一个任务ID,你过一段时间只需要拿着这个任务id就可以拿到任务执行结果，在任务执行正在进行时，你可以继续做其它的事情。<br> . . .</p><hr><h2 id="Celery架构"><a href="#Celery架构" class="headerlink" title="Celery架构"></a>Celery架构</h2><h4 id="Celery的架构由三部分组成"><a href="#Celery的架构由三部分组成" class="headerlink" title="Celery的架构由三部分组成 :"></a>Celery的架构由三部分组成 :</h4><pre><code> 1、消息中间件(message broker) 2、任务执行单元(worker) 3、任务执行结果存储(task result store)</code></pre><h4 id="Celery组成部分介绍"><a href="#Celery组成部分介绍" class="headerlink" title="Celery组成部分介绍 :"></a>Celery组成部分介绍 :</h4><p>消息中间件：Celery本身不提供消息服务，但是可以方便的和第三方提供的消息中间件集成。包括，RabbitMQ, Redis等等<br>任务执行单元：Worker是Celery提供的任务执行的单元，worker并发的运行在分布式的系统节点中。<br>任务结果存储：Task result store用来存储Worker执行的任务的结果，Celery支持以不同方式存储任务的结果，包括AMQP, redis等</p><h4 id="Celery架构图"><a href="#Celery架构图" class="headerlink" title="Celery架构图 :"></a>Celery架构图 :</h4><p><img src="https://i.loli.net/2021/01/30/2YKeCXI1LHSOhDb.png" alt="celery架构图.png"></p><hr><h2 id="Django框架中使用Celery异步"><a href="#Django框架中使用Celery异步" class="headerlink" title="Django框架中使用Celery异步"></a>Django框架中使用Celery异步</h2><h4 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h4><blockquote><p>pip install celery<br>pip install redis</p></blockquote><h4 id="2、在settings中配置"><a href="#2、在settings中配置" class="headerlink" title="2、在settings中配置"></a>2、在settings中配置</h4><p><img src="https://i.loli.net/2021/01/30/S9GPhX7Iu1p5fsN.png" alt="settings配置.png"></p><h4 id="3、在应用app下创建tasks-py模块"><a href="#3、在应用app下创建tasks-py模块" class="headerlink" title="3、在应用app下创建tasks.py模块"></a>3、在应用app下创建tasks.py模块</h4><p><img src="https://i.loli.net/2021/01/30/ub9mK7OndIsSYoX.png" alt="异步创建tasks.png"></p><h4 id="4、在该模块下写任务函数"><a href="#4、在该模块下写任务函数" class="headerlink" title="4、在该模块下写任务函数"></a>4、在该模块下写任务函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">app = Celery(<span class="string">&#x27;tasks&#x27;</span>, broker=<span class="string">&#x27;redis://localhost/1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">@app.task()</span><br><span class="line">def celery():</span><br><span class="line">    print(<span class="string">&#x27;===开始===&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">&#x27;===结束===&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="5、在views-py模块中写入以下视图函数"><a href="#5、在views-py模块中写入以下视图函数" class="headerlink" title="5、在views.py模块中写入以下视图函数"></a>5、在views.py模块中写入以下视图函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> .tasks <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def Celery1(request):</span><br><span class="line">    # 如果celery函数有参数，可通过delay()传递</span><br><span class="line">    Celery.delay()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;恭喜您，已成功返回响应&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="6、在主路由中配置视图路由"><a href="#6、在主路由中配置视图路由" class="headerlink" title="6、在主路由中配置视图路由"></a>6、在主路由中配置视图路由</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>,Celery1)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="7、创建worker等待处理celery队列中任务，终端执行"><a href="#7、创建worker等待处理celery队列中任务，终端执行" class="headerlink" title="7、创建worker等待处理celery队列中任务，终端执行"></a>7、创建worker等待处理celery队列中任务，终端执行</h4><blockquote><p>celery -A django_blog worker -l info</p></blockquote><h4 id="最后在django启动即可"><a href="#最后在django启动即可" class="headerlink" title="最后在django启动即可"></a>最后在django启动即可</h4><blockquote><p>py manage.py runserver</p></blockquote><h4 id="得到的效果为："><a href="#得到的效果为：" class="headerlink" title="得到的效果为："></a>得到的效果为：</h4><p><img src="https://i.loli.net/2021/01/30/zvr1MORVN9swDy7.png" alt="最终结果.png"></p><hr><p><code>celery异步就实现啦，想要了解celery异步的更多信息，请点击以下链接进行阅读哦</code></p><blockquote><p>Celery 官网：<a href="http://www.celeryproject.org/">http://www.celeryproject.org/</a> <br>Celery 官方文档英文版：<a href="http://docs.celeryproject.org/en/latest/index.html">http://docs.celeryproject.org/en/latest/index.html</a> <br>Celery 官方文档中文版：<a href="http://docs.jinkan.org/docs/celery/">http://docs.jinkan.org/docs/celery/</a></p></blockquote><h4 id="Django-git地址：https-gitee-com-zhang-sitong-blog-django-demo"><a href="#Django-git地址：https-gitee-com-zhang-sitong-blog-django-demo" class="headerlink" title="Django-git地址：https://gitee.com/zhang-sitong/blog-django-demo"></a>Django-git地址：<a href="https://gitee.com/zhang-sitong/blog-django-demo">https://gitee.com/zhang-sitong/blog-django-demo</a></h4>]]></content>
      
      
      <categories>
          
          <category> day6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三方支付</title>
      <link href="/blogs/2021/01/29/5%E3%80%81%E4%B8%89%E6%96%B9%E6%94%AF%E4%BB%98/"/>
      <url>/blogs/2021/01/29/5%E3%80%81%E4%B8%89%E6%96%B9%E6%94%AF%E4%BB%98/</url>
      
        <content type="html"><![CDATA[<h2 id="三方支付是什么"><a href="#三方支付是什么" class="headerlink" title="三方支付是什么"></a>三方支付是什么</h2><p>所谓第三方支付就是和一些各大银行签约，并具备一定实力和信誉保障的第三方独立机构提供的交易平台<br>目前市面上常见的有支付宝，财付通，网银，易宝支付等，网站需要实现第三方支付首先应向第三方申请一个账号并签署协议，协议生效后第三方支付平台为其开通在线支付功能</p><h2 id="三方支付原理"><a href="#三方支付原理" class="headerlink" title="三方支付原理"></a>三方支付原理</h2><p>1、用户通过浏览器确认订单请求<br>2、在购物App上保存订单的数据<br>3、购物App向浏览器发送订单确认页面<br>4、用户通过浏览器点击确认支付，向支付宝发起支付请求<br>5、支付宝给用户返回一个支付页面<br>6、然后用户填写认证信息给支付宝<br>7、然后支付宝生成一个支付结果页面传给用户，购物App会得到支付宝的支付通知信息</p><h2 id="支付宝三方支付原理"><a href="#支付宝三方支付原理" class="headerlink" title="支付宝三方支付原理"></a>支付宝三方支付原理</h2><h4 id="文字解说："><a href="#文字解说：" class="headerlink" title="文字解说："></a>文字解说：</h4><p>1、vue向django传递订单号和总金额<br>2、django返回给vue一个支付宝的支付地址<br>3、vue点击地址，跳转到支付宝界面<br>4、支付宝回调给vue交易号和订单号<br>5、vue再向django发送支付宝交易号和订单号</p><h4 id="图片解说："><a href="#图片解说：" class="headerlink" title="图片解说："></a>图片解说：</h4><p><img src="https://i.loli.net/2021/01/29/m4NopzTGHkvYZg2.png" alt="三方支付流程图.png"></p><hr><h2 id="支付宝三方支付图文解说（-前后端代码）"><a href="#支付宝三方支付图文解说（-前后端代码）" class="headerlink" title="支付宝三方支付图文解说（+前后端代码）"></a>支付宝三方支付图文解说（+前后端代码）</h2><h4 id="1、首先进入支付宝开放平台-–-gt-https-open-alipay-com-index-htm"><a href="#1、首先进入支付宝开放平台-–-gt-https-open-alipay-com-index-htm" class="headerlink" title="1、首先进入支付宝开放平台 –&gt; https://open.alipay.com/index.htm"></a>1、首先进入支付宝开放平台 –&gt; <a href="https://open.alipay.com/index.htm">https://open.alipay.com/index.htm</a></h4><p><img src="https://i.loli.net/2021/01/29/mQB6jY1No9KIcLM.png" alt="支付宝开放平台.png"></p><h4 id="2、登录后点击研发服务"><a href="#2、登录后点击研发服务" class="headerlink" title="2、登录后点击研发服务"></a>2、登录后点击研发服务</h4><p><img src="https://i.loli.net/2021/01/29/V39bsL4aUHhq6uz.png" alt="研发服务.png"></p><h4 id="3、获得沙盒的APPID以及RSA2（支付宝公钥）"><a href="#3、获得沙盒的APPID以及RSA2（支付宝公钥）" class="headerlink" title="3、获得沙盒的APPID以及RSA2（支付宝公钥）"></a>3、获得沙盒的APPID以及RSA2（支付宝公钥）</h4><p><img src="https://i.loli.net/2021/01/29/BJ1njbp6muVGStl.png" alt="沙箱.png"></p><h4 id="4、然后利用支付宝开放平台开发助手生成密钥"><a href="#4、然后利用支付宝开放平台开发助手生成密钥" class="headerlink" title="4、然后利用支付宝开放平台开发助手生成密钥"></a>4、然后利用支付宝开放平台开发助手生成密钥</h4><p><img src="https://i.loli.net/2021/01/29/Q1efpdSjGx3H2t4.png" alt="生成密钥.png"></p><h4 id="5、把支付宝开放平台开发助手生成的应用公钥复制到RSA2的应用公钥中（自动生成支付宝公钥）"><a href="#5、把支付宝开放平台开发助手生成的应用公钥复制到RSA2的应用公钥中（自动生成支付宝公钥）" class="headerlink" title="5、把支付宝开放平台开发助手生成的应用公钥复制到RSA2的应用公钥中（自动生成支付宝公钥）"></a>5、把支付宝开放平台开发助手生成的应用公钥复制到RSA2的应用公钥中（自动生成支付宝公钥）</h4><p><img src="https://i.loli.net/2021/01/29/gqxbAa9QZolBRKe.png" alt="生成应用公钥.png"><br><img src="https://i.loli.net/2021/01/29/Wn84vAHb3xl59jF.png" alt="开方平台应用公钥.png"></p><h4 id="6、去Django操作"><a href="#6、去Django操作" class="headerlink" title="6、去Django操作"></a>6、去Django操作</h4><ul><li><p>下载模块：pip install python-alipay-sdk -upgrade  # 安装python-alipay-sdk模块</p></li><li><p>在app下创建文件夹保存公钥和私钥（公钥–RSA2中的支付宝公钥，私钥–支付宝开放平台开发助手中的应用私钥）</p><p><img src="https://i.loli.net/2021/01/29/Zzd4kpJnbqra7Xj.png" alt="保存公钥私钥.png"></p></li><li><p>在views中写以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">class PayView(APIView):</span><br><span class="line">    def post(self, request):</span><br><span class="line">        sn = request.data.get(&quot;sn&quot;)  # 订单号</span><br><span class="line">        total = request.data.get(&quot;total&quot;)  # 总金额</span><br><span class="line"></span><br><span class="line">        alipay_public_key = open(&quot;ThreePayment/alipay/alipay_public_key.txt&quot;).read()  # 支付宝公钥</span><br><span class="line">        app_private_key = open(&quot;ThreePayment/alipay/app_private_key.txt&quot;).read()  # 应用私钥</span><br><span class="line"></span><br><span class="line">        alipay = AliPay(</span><br><span class="line">            appid=<span class="string">&quot;2021000116660428&quot;</span>,</span><br><span class="line">            app_notify_url=None,  # 默认回调url</span><br><span class="line">            app_private_key_string=app_private_key,</span><br><span class="line">            # 支付宝的公钥，验证支付宝回传消息使用，不是你自己的公钥,</span><br><span class="line">            alipay_public_key_string=alipay_public_key,</span><br><span class="line">            sign_type=&quot;RSA2&quot;,  # RSA 或者 RSA2</span><br><span class="line">            debug=True,  # 默认False</span><br><span class="line">            config=AliPayConfig(timeout=15)  # 可选, 请求超时时间</span><br><span class="line">        )</span><br><span class="line">        # 如果你是 Python 3的用户，使用默认的字符串即可</span><br><span class="line">        subject = <span class="string">&quot;测试订单支付&quot;</span></span><br><span class="line"></span><br><span class="line">        # 电脑网站支付，需要跳转到https://openapi.alipay.com/gateway.do? + order_string</span><br><span class="line">        order_string = alipay.api_alipay_trade_page_pay(</span><br><span class="line">            out_trade_no=sn,  # 订单号</span><br><span class="line">            total_amount=total,  # 总金额</span><br><span class="line">            subject=subject,  # 标题</span><br><span class="line">            return_url=<span class="string">&#x27;http://localhost:8000/back&#x27;</span>,</span><br><span class="line">            # notify_url=&quot;https://example.com/notify&quot;  # 可选, 不填则使用默认notify url</span><br><span class="line">        )</span><br><span class="line">        print(sn)</span><br><span class="line">        # 生成一个支付超链接，返回给vue端， 点击就激活这个超链接, 就是支付宝网关</span><br><span class="line">        url = <span class="string">&quot;https://openapi.alipaydev.com/gateway.do?&quot;</span> + order_string</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&quot;url&quot;</span>: url&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class AliPayBackView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        #  获取 支付宝交易号</span><br><span class="line">        trade_no = request.GET.get(<span class="string">&quot;trade_no&quot;</span>)</span><br><span class="line">        print(<span class="string">&quot;trade_no:&quot;</span>, trade_no)</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;http://127.0.0.1:8080/#/paysuccess?trade_no=&quot;</span> + trade_no)</span><br></pre></td></tr></table></figure><h4 id="7、vue操作"><a href="#7、vue操作" class="headerlink" title="7、vue操作"></a>7、vue操作</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;button @click=<span class="string">&quot;dj&quot;</span>&gt;点击&lt;/button&gt;</span><br><span class="line">    &lt;a :href=<span class="string">&quot;url&quot;</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;@/assets/支付宝图标.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>  </span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            url:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        <span class="function"><span class="title">dj</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.$axios(&#123;</span><br><span class="line">            <span class="string">&quot;url&quot;</span>:<span class="string">&quot;pay&quot;</span>,</span><br><span class="line">            <span class="string">&quot;method&quot;</span>:<span class="string">&quot;POST&quot;</span>,</span><br><span class="line">            <span class="string">&quot;data&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;sn&quot;</span>:<span class="number">20030528</span>,  <span class="comment">// 订单号</span></span><br><span class="line">                <span class="string">&quot;total&quot;</span>:<span class="number">0.01</span>,   <span class="comment">// 总金额</span></span><br><span class="line">            &#125;</span><br><span class="line">            &#125;).then(<span class="function"><span class="params">resp</span>=&gt;</span>&#123;</span><br><span class="line">                 <span class="built_in">console</span>.log(resp.data)</span><br><span class="line">                 <span class="built_in">this</span>.url=resp.data.url</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>PS：按照步骤下来支付宝三方支付就完成啦</code><br><code>下面附上成功截图：</code><br><img src="https://i.loli.net/2021/01/29/k5eRXSEIPU3DWLC.png" alt="成功1.png"><br><img src="https://i.loli.net/2021/01/29/BPc3AO2gLNEh9kr.png" alt="成功2.png"><br><img src="https://i.loli.net/2021/01/29/He1ouan7PV5xi8s.png" alt="成功3.png"><br><img src="https://i.loli.net/2021/01/29/zCdJ7AqvILXQS1h.png" alt="成功4.png"><br><code>如要查看完整版，请点击下面链接哟</code><br>Django-git地址：<a href="https://gitee.com/zhang-sitong/blog-django-demo">https://gitee.com/zhang-sitong/blog-django-demo</a><br>Vue-git地址：<a href="https://gitee.com/zhang-sitong/blog-vue-demo">https://gitee.com/zhang-sitong/blog-vue-demo</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> day5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 第三方 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微博三方登陆</title>
      <link href="/blogs/2021/01/28/4%E3%80%81%E5%BE%AE%E5%8D%9A%E4%B8%89%E6%96%B9%E7%99%BB%E9%99%86/"/>
      <url>/blogs/2021/01/28/4%E3%80%81%E5%BE%AE%E5%8D%9A%E4%B8%89%E6%96%B9%E7%99%BB%E9%99%86/</url>
      
        <content type="html"><![CDATA[<h2 id="微博登录介绍"><a href="#微博登录介绍" class="headerlink" title="微博登录介绍"></a>微博登录介绍</h2><p>微博登录包括身份认证、用户关系以及内容传播。允许用户使用微博帐号登录访问第三方网站，分享内容，同步信息</p><h2 id="什么是第三方登陆"><a href="#什么是第三方登陆" class="headerlink" title="什么是第三方登陆"></a>什么是第三方登陆</h2><p>可以避免繁琐的注册过程，让用户直接使用已有的账号系统进行登录<br>三方平台：一般是已经拥有大量用户的平台，国外的：Facebook，Twitter  国内：微博，微信，QQ</p><h2 id="三方登陆的优缺点"><a href="#三方登陆的优缺点" class="headerlink" title="三方登陆的优缺点"></a>三方登陆的优缺点</h2><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><p>1）对普通用户</p><blockquote><p>方便，快捷，方便用户实现快捷登录或注册，在第一次绑定成功之后，用户便可以实现一键登录<br>第三方登录可以实现把用户在应用内的活动同步到第三方平台上，省去了用户手动发布动态的麻烦</p></blockquote><p>2）对应用</p><blockquote><p>因为降低了用户的注册或登录成本，从而减少由于本地注册的繁琐性而带来的隐形用户流失，最终提高注册转化率，对某些应用来说，第三方登录可以满足自己的需要，从而增加产品知名度，</p></blockquote><p>3）对第三方</p><blockquote><p>增加用户对平台的依赖，使用越多，对用户的粘性越高，获得更多的影响力，有利于对平台的拉新和促活</p></blockquote><h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><blockquote><p>可能造成个人私密信息泄露</p></blockquote><h2 id="绘制流程图理清三方登录逻辑"><a href="#绘制流程图理清三方登录逻辑" class="headerlink" title="绘制流程图理清三方登录逻辑"></a>绘制流程图理清三方登录逻辑</h2><p>三方登录都遵循oauth2</p><p>OAuth（开放授权）是一个开放标准，允许用户授权第三方移动应用访问他们存储在另外的服务提供者上的信息，而不需要将用户名和密码提供给第三方移动应用或分享他们数据的所有内容<br><img src="https://i.loli.net/2021/01/28/4DmxyNF5K7dGOeo.png"></p><h2 id="微博第三方登陆流程"><a href="#微博第三方登陆流程" class="headerlink" title="微博第三方登陆流程"></a>微博第三方登陆流程</h2><ul><li>前端访问我们自己的定义url，然后在我们自己的后台去调用第三方后台给的url，把后端生成的url返回给前端，也就是登录页面</li><li>前端使用location.href重定向获取code</li><li>拿着获取的code去获取的access_token（微博使用post，qq使用post，get都可以）</li><li>拿着access_token去获取用户openid或uid（唯一id）</li><li>判断用户表是不是有uid或openid，如果没有返回给用户绑定页面</li><li>判断输入的用户名和密码是否存在</li><li>不存在，创建用户，并保存到user表和第三方表</li><li>存在，则直接关联，需要返回令牌</li></ul><hr><h2 id="三方登陆"><a href="#三方登陆" class="headerlink" title="三方登陆"></a>三方登陆</h2><h4 id="1、首先注册新浪微博开放接口：http-open-weibo-com"><a href="#1、首先注册新浪微博开放接口：http-open-weibo-com" class="headerlink" title="1、首先注册新浪微博开放接口：http://open.weibo.com/"></a>1、首先注册新浪微博开放接口：<a href="http://open.weibo.com/">http://open.weibo.com/</a></h4><h4 id="2、填写开发者信息"><a href="#2、填写开发者信息" class="headerlink" title="2、填写开发者信息"></a>2、填写开发者信息</h4><p><img src="https://i.loli.net/2021/01/28/pHrQ92RndiJLtC5.png"></p><h4 id="3、创建应用"><a href="#3、创建应用" class="headerlink" title="3、创建应用"></a>3、创建应用</h4><p><img src="https://i.loli.net/2021/01/28/9VRUbwLlShTiyzD.png"><br><img src="https://i.loli.net/2021/01/28/nHoC5vELxbVjQRZ.png"></p><h4 id="4、拿到应用中的App-Key和App-Secret之后，点击高级信息，填写回调地址"><a href="#4、拿到应用中的App-Key和App-Secret之后，点击高级信息，填写回调地址" class="headerlink" title="4、拿到应用中的App Key和App Secret之后，点击高级信息，填写回调地址"></a>4、拿到应用中的App Key和App Secret之后，点击高级信息，填写回调地址</h4><p><img src="https://i.loli.net/2021/01/28/T1W5HqsdYG2UDr4.png"><br><img src="https://i.loli.net/2021/01/28/vn7q9NFrTyRdhU1.png"></p><h4 id="5、去Django操作"><a href="#5、去Django操作" class="headerlink" title="5、去Django操作"></a>5、去Django操作</h4><ul><li>在settings中配置微博三方登录的应用信息：<br><a href="https://i.loli.net/2021/01/28/oDyQLR23Z6r1aEm.png">https://i.loli.net/2021/01/28/oDyQLR23Z6r1aEm.png</a></li><li>在views写入以下代码：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class WeiboLoginView(APIView):</span><br><span class="line">    # 使用微博开放平台OAuth2/authorize接口 可以使用get和post</span><br><span class="line">    def get(self, request):</span><br><span class="line">        micro_url = <span class="string">&#x27;https://api.weibo.com/oauth2/authorize?client_id=&#123;&#125;&amp;redirect_uri=&#123;&#125;&#x27;</span>.format(WEIBO_App_Key, WEIBO_URL)</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;url&#x27;</span>: micro_url&#125;)</span><br><span class="line"></span><br><span class="line">    # 使用新浪开放平台OAuth2/access_token接口, 只能使用post方法</span><br><span class="line">    def post(self, request):</span><br><span class="line">        # 获取code, 去访问token</span><br><span class="line">        code = request.data.get(<span class="string">&#x27;code&#x27;</span>, None)</span><br><span class="line">        # 使用requests网络请求请求</span><br><span class="line">        r = requests.post(<span class="string">&#x27;https://api.weibo.com/oauth2/access_token&#x27;</span>, &#123;</span><br><span class="line">            <span class="string">&#x27;client_id&#x27;</span>: WEIBO_App_Key,</span><br><span class="line">            <span class="string">&#x27;client_secret&#x27;</span>: WEIBO_App_Secret,</span><br><span class="line">            <span class="string">&#x27;grant_type&#x27;</span>: <span class="string">&#x27;authorization_code&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;code&#x27;</span>: code,</span><br><span class="line">            <span class="string">&#x27;redirect_uri&#x27;</span>: WEIBO_URL</span><br><span class="line">        &#125;)</span><br><span class="line">        # 获取返回的对象</span><br><span class="line">        print(r.json())</span><br><span class="line">        access_token = r.json()[<span class="string">&#x27;access_token&#x27;</span>]</span><br><span class="line">        uid = r.json()[<span class="string">&#x27;uid&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;登录成功&#x27;</span>,<span class="string">&#x27;code&#x27;</span>: <span class="number">200</span>, <span class="string">&#x27;uid&#x27;</span>: uid.uid&#125;)</span><br></pre></td></tr></table></figure><h4 id="6、在前端写一个超链接，可以跳转到微博的回调页"><a href="#6、在前端写一个超链接，可以跳转到微博的回调页" class="headerlink" title="6、在前端写一个超链接，可以跳转到微博的回调页"></a>6、在前端写一个超链接，可以跳转到微博的回调页</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;https://api.weibo.com/oauth2/authorize?client_id=******&amp;redirect_uri=*****&quot;</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;@/assets/微博.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><hr><p><code>PS：按照步骤下来微博三方登录就完成啦</code><br><code>要想看最终效果的话，请点击以下链接哦</code><br>Django-git地址：<a href="https://gitee.com/zhang-sitong/blog-django-demo">https://gitee.com/zhang-sitong/blog-django-demo</a><br>Vue-git地址：<a href="https://gitee.com/zhang-sitong/blog-vue-demo">https://gitee.com/zhang-sitong/blog-vue-demo</a></p>]]></content>
      
      
      <categories>
          
          <category> day4 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 第三方 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue父子组件 子父组件</title>
      <link href="/blogs/2021/01/27/3%E3%80%81vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%20%E5%AD%90%E7%88%B6%E7%BB%84%E4%BB%B6/"/>
      <url>/blogs/2021/01/27/3%E3%80%81vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%20%E5%AD%90%E7%88%B6%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><h2 id="什么是组件？"><a href="#什么是组件？" class="headerlink" title="什么是组件？"></a>什么是组件？</h2><p>组件（Component）是Vue.js最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码，在较高层面上，组件是自定义元素，Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以表现为用 is 特性进行了扩展的原生 HTML 元素。<br>所有的 Vue 组件同时也都是 Vue 的实例，所以可接受相同的选项对象 (除了一些根级特有的选项) 并提供相同的生命周期钩子。</p><h1 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h1><ul><li><h2 id="父组件-Father-vue"><a href="#父组件-Father-vue" class="headerlink" title="父组件 Father.vue"></a>父组件 Father.vue</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;parent&quot;</span>&gt;</span><br><span class="line">    我是父组件</span><br><span class="line">    &lt;son :msg=<span class="string">&quot;msg&quot;</span> @say=<span class="string">&quot;fatherSay&quot;</span>&gt;&lt;/son&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Son <span class="keyword">from</span> <span class="string">&#x27;./Son&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">&#x27;你好啊，儿子&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   methods: &#123;</span><br><span class="line">      <span class="comment">// 参数就是子组件传递出来的数据</span></span><br><span class="line">      <span class="function"><span class="title">fatherSay</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(msg) <span class="comment">// 你好啊，父亲</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components:&#123;</span><br><span class="line">      son:Son</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><h2 id="子组件-Son-vue"><a href="#子组件-Son-vue" class="headerlink" title="子组件 Son.vue"></a>子组件 Son.vue</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;son&quot;</span> @click=<span class="string">&quot;say&quot;</span>&gt;</span><br><span class="line">      我是子组件</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        父组件说：&#123;&#123;msg&#125;&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">//父组件通过props属性传递进来的数据</span></span><br><span class="line">      props: &#123;</span><br><span class="line">          msg: &#123;</span><br><span class="line">              type: <span class="built_in">String</span>,</span><br><span class="line">              <span class="keyword">default</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      data () &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            SonSay: <span class="string">&#x27;你好啊，父亲&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      methods: &#123;</span><br><span class="line">          <span class="comment">// 子组件通过emit方法触发父组件中定义好的函数，从而将子组件中的数据传递给父组件</span></span><br><span class="line">          <span class="function"><span class="title">say</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">              <span class="built_in">this</span>.$emit(<span class="string">&#x27;say&#x27;</span> , <span class="built_in">this</span>.SonSay);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果:"></a>结果:</h2><blockquote><p>我是父组件<br>我是子组件<br>父组件说：你好啊，儿子</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><blockquote><p>父组件通过prop给子组件下发数据，子组件通过$emit触发事件给父组件发送消息，即 prop 向下传递，事件向上传递。</p></blockquote></li></ul><h1 id="子父组件通信"><a href="#子父组件通信" class="headerlink" title="子父组件通信"></a>子父组件通信</h1><ul><li><h3 id="第一种方法：直接在子组件中通过this-parent-event来调用父组件的方法"><a href="#第一种方法：直接在子组件中通过this-parent-event来调用父组件的方法" class="headerlink" title="第一种方法：直接在子组件中通过this.$parent.event来调用父组件的方法"></a>第一种方法：直接在子组件中通过this.$parent.event来调用父组件的方法</h3><ul><li>父组件 Father1.vue<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;Son1&gt;&lt;/Son1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Son1 <span class="keyword">from</span> <span class="string">&#x27;./Son1&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    components:&#123;</span><br><span class="line">        Son1</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        <span class="function"><span class="title">father1_z</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;子组件给父组件传的值：聪明50%&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br></pre></td></tr></table></figure></li><li>子组件 Son1.vue<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;button @click=<span class="string">&quot;son1_z()&quot;</span>&gt;点击传值给父组件&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    methods:&#123;</span><br><span class="line">        <span class="function"><span class="title">son1_z</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.$parent.father1_z()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><ul><li><h3 id="第二种方法：在子组件里用-emit向父组件触发一个事件，父组件监听这个事件就行了"><a href="#第二种方法：在子组件里用-emit向父组件触发一个事件，父组件监听这个事件就行了" class="headerlink" title="第二种方法：在子组件里用$emit向父组件触发一个事件，父组件监听这个事件就行了"></a>第二种方法：在子组件里用$emit向父组件触发一个事件，父组件监听这个事件就行了</h3><ul><li>父组件 Father2.vue<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;father2&quot;</span>&gt;</span><br><span class="line">    &lt;son2 @son2=<span class="string">&#x27;father2_z&#x27;</span>&gt;&lt;/son2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Son2 <span class="keyword">from</span> <span class="string">&#x27;./Son2&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        Son2</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="function"><span class="title">father2_z</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li>子组件 Son2.vue<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;son2&quot;</span>&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;toFather2&quot;</span>&gt;点击传值给父组件&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">      <span class="function"><span class="title">toFather2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="built_in">this</span>.$emit(<span class="string">&#x27;son2&#x27;</span>,<span class="string">&#x27;子组件给父组件传的值：不赖呀，90%&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><ul><li><h3 id="第三种方法：父组件把方法传入子组件中，在子组件里直接调用这个方法"><a href="#第三种方法：父组件把方法传入子组件中，在子组件里直接调用这个方法" class="headerlink" title="第三种方法：父组件把方法传入子组件中，在子组件里直接调用这个方法"></a>第三种方法：父组件把方法传入子组件中，在子组件里直接调用这个方法</h3><ul><li>父组件 Father3.vue<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;son3 :father3_z=<span class="string">&#x27;father3_z&#x27;</span>&gt;&lt;/son3&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Son3 <span class="keyword">from</span> <span class="string">&#x27;./Son3&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        Son3</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="function"><span class="title">father3_z</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;哎妈呀，您已突破聪明的极限&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li>子组件 Son3.vue<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;son3_z()&quot;</span>&gt;点击传值给父组件&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">      father3_z: &#123;</span><br><span class="line">        type: <span class="built_in">Function</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      <span class="function"><span class="title">son3_z</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.father3_z) &#123;</span><br><span class="line">          <span class="built_in">this</span>.father3_z();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> day3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue路由钩子</title>
      <link href="/blogs/2021/01/26/2%E3%80%81vue%E8%B7%AF%E7%94%B1%E9%92%A9%E5%AD%90/"/>
      <url>/blogs/2021/01/26/2%E3%80%81vue%E8%B7%AF%E7%94%B1%E9%92%A9%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h2 id="一、路由钩子函数相关概念"><a href="#一、路由钩子函数相关概念" class="headerlink" title="一、路由钩子函数相关概念"></a>一、路由钩子函数相关概念</h2><ul><li>什么情况下要使用路由的钩子函数？<ul><li>在路由跳转的时候，我们需要一些权限判断或者其他操作，这个时候就需要使用路由的钩子函数</li></ul></li><li>路由钩子函数的定义:<ul><li>路由钩子主要是给使用者在路由发生变化时进行一些特殊的处理而定义的函数</li></ul></li></ul><h2 id="二、路由钩子的分类"><a href="#二、路由钩子的分类" class="headerlink" title="二、路由钩子的分类"></a>二、路由钩子的分类</h2><h4 id="1、全局路由钩子"><a href="#1、全局路由钩子" class="headerlink" title="1、全局路由钩子"></a>1、全局路由钩子</h4><blockquote><p>在初始化VueRouter以后，直接使用router实例进行注册<br>  包括两个钩子：beforeEach、afterEach（每个路由切换前或者切换后调用）</p></blockquote><h4 id="2、单个路由钩子"><a href="#2、单个路由钩子" class="headerlink" title="2、单个路由钩子"></a>2、单个路由钩子</h4><blockquote><p>写在路由配置中，只有访问到这个路径，才能触发钩子函数<br> 包括两个钩子：beforeEnter、beforeLeave</p></blockquote><h4 id="3、组件内路由钩子"><a href="#3、组件内路由钩子" class="headerlink" title="3、组件内路由钩子"></a>3、组件内路由钩子</h4><blockquote><p>这个钩子要在组件内定义<br> 包括三个钩子：beforeRouteEnter、beforeRouteUpdate、beforeRouteLeave</p></blockquote><hr><p>（1） 路由对象是在使用vue-route启动应用时，每个匹配的组件实例都会被注入router的对象，称之为路由对象。<br>在组件内部可以通过this.$route 的方式调用<br>（2）路由对象有： $route.path , $route.params, $route.query, $route.router等属性</p><h2 id="三、代码演示"><a href="#三、代码演示" class="headerlink" title="三、代码演示"></a>三、代码演示</h2><ul><li><h3 id="全局路由钩子"><a href="#全局路由钩子" class="headerlink" title="全局路由钩子"></a>全局路由钩子</h3><ul><li><h4 id="router-beforeEach（（to-from-next）-gt-）：全局前置守卫"><a href="#router-beforeEach（（to-from-next）-gt-）：全局前置守卫" class="headerlink" title="router.beforeEach（（to,from,next）=&gt;{ }）：全局前置守卫"></a>router.beforeEach（（to,from,next）=&gt;{ }）：全局前置守卫</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="function"><span class="keyword">function</span> (<span class="params">to,<span class="keyword">from</span>,next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(to);  <span class="comment">//到达的路由</span></span><br><span class="line">  <span class="built_in">console</span>.log(next);<span class="comment">//跳转到其他路由</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">from</span>);<span class="comment">//离开的路由</span></span><br><span class="line">  next();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><h4 id="router-afterEach（（to-from）-gt-）：全局后置钩子"><a href="#router-afterEach（（to-from）-gt-）：全局后置钩子" class="headerlink" title="router.afterEach（（to,from）=&gt;{ }）：全局后置钩子"></a>router.afterEach（（to,from）=&gt;{ }）：全局后置钩子</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">router.afterEach(<span class="function"><span class="keyword">function</span> (<span class="params">to,<span class="keyword">from</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(to);  <span class="comment">//到达的路由</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">from</span>);<span class="comment">//离开的路由</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><h3 id="单个路由钩子"><a href="#单个路由钩子" class="headerlink" title="单个路由钩子"></a>单个路由钩子</h3><ul><li><h4 id="beforeEnter"><a href="#beforeEnter" class="headerlink" title="beforeEnter"></a>beforeEnter</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router (&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">&#x27;/index&#x27;</span>,</span><br><span class="line">            component: Index,</span><br><span class="line">            beforeEnter: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">            </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><h4 id="beforeLeave"><a href="#beforeLeave" class="headerlink" title="beforeLeave"></a>beforeLeave</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router (&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">&#x27;/index&#x27;</span>,</span><br><span class="line">            component: Index,</span><br><span class="line">            beforeLeave: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">            </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><h3 id="组件内路由钩子"><a href="#组件内路由钩子" class="headerlink" title="组件内路由钩子"></a>组件内路由钩子</h3><ul><li><h4 id="beforeRouteEnter-进入这个组件路由之前"><a href="#beforeRouteEnter-进入这个组件路由之前" class="headerlink" title="beforeRouteEnter: 进入这个组件路由之前"></a>beforeRouteEnter: 进入这个组件路由之前</h4><h4 id="beforeRouteLeave：离开这个组件路由"><a href="#beforeRouteLeave：离开这个组件路由" class="headerlink" title="beforeRouteLeave：离开这个组件路由"></a>beforeRouteLeave：离开这个组件路由</h4><h4 id="beforeRouteUpdate：在本路由的下级路由切换才会触发beforeRouteUpdate"><a href="#beforeRouteUpdate：在本路由的下级路由切换才会触发beforeRouteUpdate" class="headerlink" title="beforeRouteUpdate：在本路由的下级路由切换才会触发beforeRouteUpdate"></a>beforeRouteUpdate：在本路由的下级路由切换才会触发beforeRouteUpdate</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        测验：&#123;&#123;zst&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                zst:<span class="string">&#x27;廾匸改变之前&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span>&#123; <span class="comment">//组件生命周期函数</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;创建之前&#x27;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//进入组件之前，执行 beforRouteEnter </span></span><br><span class="line">        <span class="function"><span class="title">beforeRouteEnter</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">// 结果为undefined，因为在执行beforRouteEnter时候，组件还没有被创建出来，得先执行beforRouteEnter，再执行beforeCreate</span></span><br><span class="line">            next(<span class="function">(<span class="params">gx</span>)=&gt;</span>&#123; <span class="comment">//参数gx就是当前组件的实例</span></span><br><span class="line">                gx.zst = <span class="string">&#x27;被改变了&#x27;</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">beforeRouteUpdate</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line">            next()</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">beforeRouteLeave</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)</span>&#123;<span class="comment">//离开组件的时候触发</span></span><br><span class="line">            <span class="comment">//什么都不写的时候，走下一步</span></span><br><span class="line">            next()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> day2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue拦截器</title>
      <link href="/blogs/2021/01/25/1%E3%80%81vue%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
      <url>/blogs/2021/01/25/1%E3%80%81vue%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、拦截器的基本介绍"><a href="#一、拦截器的基本介绍" class="headerlink" title="一、拦截器的基本介绍"></a>一、拦截器的基本介绍</h2><ul><li>什么是拦截器:<ul><li>想拦截住我们的请求过程<br> 比如你想在请求前做一些事情，拦截请求，等这件事做完之后再去请求<br> 或者是要等请求结束之后做一些事情，再返回数据，可以拦截处理之后再返回</li></ul></li><li>拦截器的作用:<ul><li>一般来说，像数据交互之类的都要用到不同的身份验证，比如登录 token验证，验证用户<br> 是否登录，如果没有登录，该用户就不能操作登录之后的内容，这就是拦截器的作用</li></ul></li></ul><h2 id="二、拦截器的分类"><a href="#二、拦截器的分类" class="headerlink" title="二、拦截器的分类"></a>二、拦截器的分类</h2><p>请求拦截器和响应拦截器/路由拦截器<br><code>PS:一般在请求拦截器中增加标识token或其他请求配置，在响应拦截器中对统一错误或状态码进行处理</code><br>① axios提供了拦截请求的功能，可以在发出请求前进行操作，例如统一为所有的请求添加token头信息。<br>② axios提供了拦截响应的功能，可以在处理响应前进行操作，例如统一处理401身份认证错误。</p><h2 id="三、代码演示"><a href="#三、代码演示" class="headerlink" title="三、代码演示"></a>三、代码演示</h2><h4 id="路由拦截器-通过路由进行判断"><a href="#路由拦截器-通过路由进行判断" class="headerlink" title="路由拦截器 : 通过路由进行判断"></a>路由拦截器 : 通过路由进行判断</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//to表示要去的路由指向，from是指从哪个路由跳转过来的，next是判断操作</span></span><br><span class="line"><span class="comment">// 配置全局的vue路由拦截器  导航守卫(路由守卫)</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(to)</span><br><span class="line">        <span class="comment">// 判断 是否是跳转到 admin页 如果是则必须登录才能跳转</span></span><br><span class="line">    <span class="keyword">if</span> (to.path <span class="keyword">in</span> [<span class="string">&quot;/路由地址&quot;</span>,<span class="string">&quot;/...&quot;</span>,<span class="string">&quot;/...&quot;</span>])&#123;</span><br><span class="line">        <span class="comment">//判断 是否登录</span></span><br><span class="line">        <span class="keyword">const</span> token = sessionStorage.getItem(<span class="string">&quot;token&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> (!token) &#123;</span><br><span class="line">            alert(<span class="string">&quot;没有登录，不能操作&quot;</span>)</span><br><span class="line">                <span class="comment">//跳转到登录页</span></span><br><span class="line">            next(<span class="string">&quot;/login?back=&quot;</span> + to.fullPath)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//放行</span></span><br><span class="line">    next()</span><br><span class="line">&#125;)  </span><br></pre></td></tr></table></figure><h4 id="request请求拦截器-在请求发送前进行一些操作"><a href="#request请求拦截器-在请求发送前进行一些操作" class="headerlink" title="request请求拦截器 : 在请求发送前进行一些操作"></a>request请求拦截器 : 在请求发送前进行一些操作</h4><p>在main.js中<br>import axios from ‘axios’ //引入axios<br>Vue.prototype.$http = axios //配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> token = <span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;token&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (token) &#123;</span><br><span class="line">     config.headers.token = token <span class="comment">//把token放在请求头中（headers是对象类型）</span></span><br><span class="line">     <span class="comment">// 如果后端使用了rest framework jwt，如下：</span></span><br><span class="line">   <span class="comment">//config.headers.common[&#x27;Authorization&#x27;] = &#x27;jwt &#x27; + token // 头部设置</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error) <span class="comment">//打印错误信息</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="response响应拦截器-在接收到响应后进行一些操作"><a href="#response响应拦截器-在接收到响应后进行一些操作" class="headerlink" title="response响应拦截器 : 在接收到响应后进行一些操作"></a>response响应拦截器 : 在接收到响应后进行一些操作</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 响应拦截器（在响应时自动会做的操作）</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">　　<span class="keyword">return</span> response <span class="comment">// 成功直接返回</span></span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error.request) <span class="comment">// 打印错误信息</span></span><br><span class="line"><span class="comment">//处理错误信息</span></span><br><span class="line">  <span class="keyword">if</span> (error.request.status === <span class="number">400</span>)&#123;  <span class="comment">// 400错误的状态码</span></span><br><span class="line">    <span class="built_in">window</span>.location.href = <span class="string">&quot;/&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> error </span><br><span class="line"><span class="comment">//返回错误信息</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> day1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/blogs/2021/01/25/hello-world/"/>
      <url>/blogs/2021/01/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
