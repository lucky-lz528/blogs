<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欢迎来到小张的博客</title>
  
  
  <link href="https://zhang-sitong.gitee.io/blogs/atom.xml" rel="self"/>
  
  <link href="https://zhang-sitong.gitee.io/blogs/"/>
  <updated>2021-04-19T12:46:58.353Z</updated>
  <id>https://zhang-sitong.gitee.io/blogs/</id>
  
  <author>
    <name>Z_SiTong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>多因子登录基础知识点</title>
    <link href="https://zhang-sitong.gitee.io/blogs/lz_28/"/>
    <id>https://zhang-sitong.gitee.io/blogs/lz_28/</id>
    <published>2019-04-19T12:08:59.000Z</published>
    <updated>2021-04-19T12:46:58.353Z</updated>
    
    <content type="html"><![CDATA[<h2 id="多因子登录"><a href="#多因子登录" class="headerlink" title="多因子登录"></a>多因子登录</h2><blockquote><p>多因子身份验证（MFA）是一种安全系统，是为了验证一项交易的合理性而实行多种身份验证。MFA的目的是建立一个多层次的防御，使未经授权的人访问计算机系统或网络更加困难。</p></blockquote><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li><h3 id="金融行业的柜面业务等安全性要求高的地方，第三方支付的系统"><a href="#金融行业的柜面业务等安全性要求高的地方，第三方支付的系统" class="headerlink" title="金融行业的柜面业务等安全性要求高的地方，第三方支付的系统"></a>金融行业的柜面业务等安全性要求高的地方，第三方支付的系统</h3></li><li><h3 id="密码、证书、短信、电子令牌、生物识别，具体的应用有有门禁、系统登入、分级权限管理等，我觉得所有要做身份鉴别的地方都可以用到"><a href="#密码、证书、短信、电子令牌、生物识别，具体的应用有有门禁、系统登入、分级权限管理等，我觉得所有要做身份鉴别的地方都可以用到" class="headerlink" title="密码、证书、短信、电子令牌、生物识别，具体的应用有有门禁、系统登入、分级权限管理等，我觉得所有要做身份鉴别的地方都可以用到"></a>密码、证书、短信、电子令牌、生物识别，具体的应用有有门禁、系统登入、分级权限管理等，我觉得所有要做身份鉴别的地方都可以用到</h3></li><li><h3 id="人脸识别、指纹等，有银行那样的硬件密码机，主要转账时候生成动态数字号码，也有软令牌"><a href="#人脸识别、指纹等，有银行那样的硬件密码机，主要转账时候生成动态数字号码，也有软令牌" class="headerlink" title="人脸识别、指纹等，有银行那样的硬件密码机，主要转账时候生成动态数字号码，也有软令牌"></a>人脸识别、指纹等，有银行那样的硬件密码机，主要转账时候生成动态数字号码，也有软令牌</h3>…等等<br><code>目前多因子认证主要出现在金融行业，比如柜台业务等安全性要求高的地方，或者是金融系统的一些关键环节，往往会加入更多的认证，第三方支付系统也必须要有多因子认证支撑</code></li></ul><hr><h2 id="单因子"><a href="#单因子" class="headerlink" title="单因子"></a>单因子</h2><p><code>用户名和密码 what you know</code></p><blockquote><p>表示你知道什么，这种的一般只需要输入账号密码就可以完成登录</p></blockquote><ul><li>举例子 ant-design-删库被黑客黑掉</li><li>用在内部系统（只给内部用）</li></ul><h2 id="双因子"><a href="#双因子" class="headerlink" title="双因子"></a>双因子</h2><p><code>用户名和密钥(token) what you have</code></p><blockquote><p>表示你有什么，这种登录在单因子基础上可能还需要结合另一种实物：如短信验证，或者令牌之类。<br>可以产生token的硬件设<br>只能手机的app<br>手机短信微信扫码确认都可以成为双因子认证，双因子认证会结合一个你有的硬件设备，只要这个专属的硬件不丢失，就可以大大的提高账号的安全性</p></blockquote><ul><li>gitee通过密钥提交代码</li></ul><h2 id="三因子"><a href="#三因子" class="headerlink" title="三因子"></a>三因子</h2><p><code>用户名和实体 who you are</code></p><blockquote><p>你是谁，进行人脸识别，指纹识别<br>直接对你的指纹，视网膜进行验证，验证是否是本人</p></blockquote><ul><li>人脸识别</li><li>成本最高，安全性最高，【用在银行业务，支付宝】</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;多因子登录&quot;&gt;&lt;a href=&quot;#多因子登录&quot; class=&quot;headerlink&quot; title=&quot;多因子登录&quot;&gt;&lt;/a&gt;多因子登录&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;多因子身份验证（MFA）是一种安全系统，是为了验证一项交易的合理性而实行多种身份验证。MF</summary>
      
    
    
    
    <category term="登录" scheme="https://zhang-sitong.gitee.io/blogs/categories/%E7%99%BB%E5%BD%95/"/>
    
    
    <category term="登录" scheme="https://zhang-sitong.gitee.io/blogs/tags/%E7%99%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>基于Docker安装关系型数据库PostgrelSQL替代Mysql</title>
    <link href="https://zhang-sitong.gitee.io/blogs/lz_27/"/>
    <id>https://zhang-sitong.gitee.io/blogs/lz_27/</id>
    <published>2019-04-14T01:42:58.000Z</published>
    <updated>2021-04-19T13:01:14.862Z</updated>
    
    <content type="html"><![CDATA[<h3 id="PostgreSQL-是一个免费的对象-关系数据库服务器，它最近这几年的技术发展不可谓不猛，覆盖OLTP、OLAP、NoSQL、搜索、图像等应用场景，实实在在的全栈性发展。帮助公司解决了数据孤岛、数据平台多、同步一致性、延迟，软硬件成本增加等业务痛点，在互联网、金融、物联网、传统企业等领域得到了广泛的应用。PostgreSQL的应用场景丰富，不亚于商用数据库Oracle，常被业界称为“开源界的Oracle”"><a href="#PostgreSQL-是一个免费的对象-关系数据库服务器，它最近这几年的技术发展不可谓不猛，覆盖OLTP、OLAP、NoSQL、搜索、图像等应用场景，实实在在的全栈性发展。帮助公司解决了数据孤岛、数据平台多、同步一致性、延迟，软硬件成本增加等业务痛点，在互联网、金融、物联网、传统企业等领域得到了广泛的应用。PostgreSQL的应用场景丰富，不亚于商用数据库Oracle，常被业界称为“开源界的Oracle”" class="headerlink" title="PostgreSQL 是一个免费的对象-关系数据库服务器，它最近这几年的技术发展不可谓不猛，覆盖OLTP、OLAP、NoSQL、搜索、图像等应用场景，实实在在的全栈性发展。帮助公司解决了数据孤岛、数据平台多、同步一致性、延迟，软硬件成本增加等业务痛点，在互联网、金融、物联网、传统企业等领域得到了广泛的应用。PostgreSQL的应用场景丰富，不亚于商用数据库Oracle，常被业界称为“开源界的Oracle”"></a>PostgreSQL 是一个免费的对象-关系数据库服务器，它最近这几年的技术发展不可谓不猛，覆盖OLTP、OLAP、NoSQL、搜索、图像等应用场景，实实在在的全栈性发展。帮助公司解决了数据孤岛、数据平台多、同步一致性、延迟，软硬件成本增加等业务痛点，在互联网、金融、物联网、传统企业等领域得到了广泛的应用。PostgreSQL的应用场景丰富，不亚于商用数据库Oracle，常被业界称为“开源界的Oracle”</h3><h3 id="至于Mysql大家都很熟悉，很多公司因为人才储备和数据量大的原因，一般是Hadoop-Mysql的模式，Hadoop计算大量原始数据，然后按维度汇总后的展示数据存储在Mysql上，但是Mysql也有很多的“坑”：比如著名的Emoji表情坑，由此引申出来的utf8mb4的坑（隐式类型转换陷阱），性能低到发指的悲观锁机制，不支持多表单序列中取-id，不支持over子句，几乎没有性能可言的子查询……-有点罄竹难书的意思，更多的“罪行”详见：见鬼的选择：Mysql。而这些问题，在PostgrelSQL中得到了改善，本次我们在Win10平台利用Docker安装PostgrelSQL，并且初步感受一下它的魅力。"><a href="#至于Mysql大家都很熟悉，很多公司因为人才储备和数据量大的原因，一般是Hadoop-Mysql的模式，Hadoop计算大量原始数据，然后按维度汇总后的展示数据存储在Mysql上，但是Mysql也有很多的“坑”：比如著名的Emoji表情坑，由此引申出来的utf8mb4的坑（隐式类型转换陷阱），性能低到发指的悲观锁机制，不支持多表单序列中取-id，不支持over子句，几乎没有性能可言的子查询……-有点罄竹难书的意思，更多的“罪行”详见：见鬼的选择：Mysql。而这些问题，在PostgrelSQL中得到了改善，本次我们在Win10平台利用Docker安装PostgrelSQL，并且初步感受一下它的魅力。" class="headerlink" title="至于Mysql大家都很熟悉，很多公司因为人才储备和数据量大的原因，一般是Hadoop+Mysql的模式，Hadoop计算大量原始数据，然后按维度汇总后的展示数据存储在Mysql上，但是Mysql也有很多的“坑”：比如著名的Emoji表情坑，由此引申出来的utf8mb4的坑（隐式类型转换陷阱），性能低到发指的悲观锁机制，不支持多表单序列中取 id，不支持over子句，几乎没有性能可言的子查询……..有点罄竹难书的意思，更多的“罪行”详见：见鬼的选择：Mysql。而这些问题，在PostgrelSQL中得到了改善，本次我们在Win10平台利用Docker安装PostgrelSQL，并且初步感受一下它的魅力。"></a>至于Mysql大家都很熟悉，很多公司因为人才储备和数据量大的原因，一般是Hadoop+Mysql的模式，Hadoop计算大量原始数据，然后按维度汇总后的展示数据存储在Mysql上，但是Mysql也有很多的“坑”：比如著名的Emoji表情坑，由此引申出来的utf8mb4的坑（隐式类型转换陷阱），性能低到发指的悲观锁机制，不支持多表单序列中取 id，不支持over子句，几乎没有性能可言的子查询……..有点罄竹难书的意思，更多的“罪行”详见：见鬼的选择：Mysql。而这些问题，在PostgrelSQL中得到了改善，本次我们在Win10平台利用Docker安装PostgrelSQL，并且初步感受一下它的魅力。</h3><hr><h2 id="步骤如下："><a href="#步骤如下：" class="headerlink" title="步骤如下："></a>步骤如下：</h2><ul><li><h3 id="第一步安装Docker"><a href="#第一步安装Docker" class="headerlink" title="第一步安装Docker"></a>第一步安装Docker</h3></li><li><h3 id="拉取镜像，这里我们选择相对稳定的PostgrelSQL11-1"><a href="#拉取镜像，这里我们选择相对稳定的PostgrelSQL11-1" class="headerlink" title="拉取镜像，这里我们选择相对稳定的PostgrelSQL11.1"></a>拉取镜像，这里我们选择相对稳定的PostgrelSQL11.1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull postgres:11.1</span><br></pre></td></tr></table></figure></li><li><h3 id="拉取成功后，输入命令查看镜像"><a href="#拉取成功后，输入命令查看镜像" class="headerlink" title="拉取成功后，输入命令查看镜像"></a>拉取成功后，输入命令查看镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure></li><li><h3 id="随之启动容器"><a href="#随之启动容器" class="headerlink" title="随之启动容器"></a>随之启动容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name dev-postgres -e POSTGRES_PASSWORD&#x3D;root -p 6432:5432 postgres:11.1</span><br></pre></td></tr></table></figure></li><li><h3 id="输入命令查看容器运行状态"><a href="#输入命令查看容器运行状态" class="headerlink" title="输入命令查看容器运行状态"></a>输入命令查看容器运行状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure></li><li><h3 id="运行没问题之后，进入命令行操作"><a href="#运行没问题之后，进入命令行操作" class="headerlink" title="运行没问题之后，进入命令行操作"></a>运行没问题之后，进入命令行操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it dev-postgres bash</span><br><span class="line">psql -h localhost -U postgres</span><br></pre></td></tr></table></figure></li><li><h3 id="这样就可以进入容器内部的命令行，在命令行输入PostgrelSQL的命令-l-就可以查看数据库列表"><a href="#这样就可以进入容器内部的命令行，在命令行输入PostgrelSQL的命令-l-就可以查看数据库列表" class="headerlink" title="这样就可以进入容器内部的命令行，在命令行输入PostgrelSQL的命令\l 就可以查看数据库列表"></a>这样就可以进入容器内部的命令行，在命令行输入PostgrelSQL的命令\l 就可以查看数据库列表</h3><p><img src="https://i.loli.net/2021/04/19/DYkInLcVlmr5ANP.png" alt="111.png"></p></li><li><h3 id="建立数据库"><a href="#建立数据库" class="headerlink" title="建立数据库"></a>建立数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE mytest;</span><br></pre></td></tr></table></figure></li><li><h3 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\c mytest</span><br></pre></td></tr></table></figure></li><li><h3 id="建立一张表"><a href="#建立一张表" class="headerlink" title="建立一张表"></a>建立一张表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &quot;public&quot;.&quot;article&quot; (</span><br><span class="line">&quot;id&quot; int4 NOT NULL,</span><br><span class="line">&quot;content&quot; text,</span><br><span class="line">PRIMARY KEY (&quot;id&quot;)</span><br><span class="line">)</span><br><span class="line">WITH (OIDS&#x3D;FALSE);</span><br></pre></td></tr></table></figure></li><li><h3 id="列出所有表"><a href="#列出所有表" class="headerlink" title="列出所有表"></a>列出所有表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\d</span><br></pre></td></tr></table></figure></li></ul><hr><blockquote><p>结语：如果对Mysql足够熟悉，那么上手PostgrelSQL并不是一件难事，自从MySQL被Oracle收购的那一刻起，它就已经不是开源软件的最佳选择了。所以，不要固执的拒绝时代浪潮，拥抱未来，拥抱PostgrelSQL吧。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;PostgreSQL-是一个免费的对象-关系数据库服务器，它最近这几年的技术发展不可谓不猛，覆盖OLTP、OLAP、NoSQL、搜索、图像等应用场景，实实在在的全栈性发展。帮助公司解决了数据孤岛、数据平台多、同步一致性、延迟，软硬件成本增加等业务痛点，在互联网、金</summary>
      
    
    
    
    <category term="数据库" scheme="https://zhang-sitong.gitee.io/blogs/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="数据库" scheme="https://zhang-sitong.gitee.io/blogs/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>json与pickle</title>
    <link href="https://zhang-sitong.gitee.io/blogs/lz_26/"/>
    <id>https://zhang-sitong.gitee.io/blogs/lz_26/</id>
    <published>2019-04-12T07:48:41.000Z</published>
    <updated>2021-04-13T13:37:11.609Z</updated>
    
    <content type="html"><![CDATA[<h2 id="json与pickle"><a href="#json与pickle" class="headerlink" title="json与pickle"></a>json与pickle</h2><ul><li><h3 id="什么是序列化？"><a href="#什么是序列化？" class="headerlink" title="什么是序列化？"></a>什么是序列化？</h3><blockquote><p>把对象（变量）包括整型字符串列表字典等等都叫对象，从内存中变成可存储或传输的过程称之为序列化</p></blockquote></li><li><h3 id="什么是反序列化？"><a href="#什么是反序列化？" class="headerlink" title="什么是反序列化？"></a>什么是反序列化？</h3><blockquote><p>相反，把变量内容从序列化对象重新读到内存里称之为反序列化</p></blockquote></li></ul><h2 id="json"><a href="#json" class="headerlink" title="json"></a>json</h2><ul><li><h3 id="json-dumps"><a href="#json-dumps" class="headerlink" title="json.dumps()"></a>json.dumps()</h3><code>用于将dict类型的数据转成str，因为如果直接将dict类型的数据写入json文件中会发生报错，因此在将数据写入时需要用到该函数</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zst&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">17</span></span><br><span class="line">&#125;</span><br><span class="line">json_str = json.dumps(data)</span><br><span class="line">print(json_str)</span><br><span class="line">print(<span class="built_in">type</span>(json_str))</span><br></pre></td></tr></table></figure></li><li><h3 id="json-loads"><a href="#json-loads" class="headerlink" title="json.loads()"></a>json.loads()</h3><code>用于将str类型的数据转成dict</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">json.loads()</span><br><span class="line">data = json.loads(json_str)</span><br><span class="line">print(data)</span><br><span class="line">print(<span class="built_in">type</span>(data))</span><br></pre></td></tr></table></figure></li><li><h3 id="json-dump"><a href="#json-dump" class="headerlink" title="json.dump()"></a>json.dump()</h3><code>用于将dict类型的数据转成str，并写入到json文件中</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写入到文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;zst.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(data, f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;zst.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.readline()</span><br><span class="line">    print(data)</span><br><span class="line">    print(<span class="built_in">type</span>(data))</span><br></pre></td></tr></table></figure></li><li><h3 id="json-load"><a href="#json-load" class="headerlink" title="json.load()"></a>json.load()</h3><code>用于从json文件中读取数据</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;zst.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = json.load(f)</span><br><span class="line">    print(data)</span><br><span class="line">    print(<span class="built_in">type</span>(data))</span><br></pre></td></tr></table></figure><blockquote><p>json模块可用于多平台和多语言的字符串与Python数据类型进行互换，但是它只能序列化Python最基本的数据类型（str、tuple、list、dict、set）</p></blockquote></li></ul><hr><h2 id="pickle"><a href="#pickle" class="headerlink" title="pickle"></a>pickle</h2><ul><li><h3 id="pickle-dumps"><a href="#pickle-dumps" class="headerlink" title="pickle.dumps()"></a>pickle.dumps()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pickle_bytes=pickle.dumps(data)</span><br><span class="line">print(pickle_bytes)</span><br><span class="line">print(<span class="built_in">type</span>(pickle_bytes))</span><br></pre></td></tr></table></figure></li><li><h3 id="pickle-loads"><a href="#pickle-loads" class="headerlink" title="pickle.loads()"></a>pickle.loads()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data=pickle.loads(pickle_bytes)</span><br><span class="line">print(data)</span><br><span class="line">print(<span class="built_in">type</span>(data))</span><br></pre></td></tr></table></figure></li><li><h3 id="pickle-dump"><a href="#pickle-dump" class="headerlink" title="pickle.dump()"></a>pickle.dump()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;bytes.json&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pickle.dump(data,f)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;bytes.json&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">     data=f.readline()</span><br><span class="line">     print(data)</span><br><span class="line">     print(<span class="built_in">type</span>(data))</span><br></pre></td></tr></table></figure></li><li><h3 id="pickle-load"><a href="#pickle-load" class="headerlink" title="pickle.load()"></a>pickle.load()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;bytes.json&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data=pickle.load(f)</span><br><span class="line">    print(data)</span><br><span class="line">    print(<span class="built_in">type</span>(data))</span><br></pre></td></tr></table></figure><blockquote><p>pickle是一个强大的序列化模块，貌似所有类型的数据都可以保存。可以保存原生的数据类型，也可以保存列表、字典等，甚至是函数和类。简单装入便能使用</p></blockquote></li><li>python的pickle模块实现了python的所有数据序列和反序列化。</li><li>基本上功能使用和JSON模块没有太大区别，方法也同样是dumps/dump和loads/load</li><li>与JSON不同的是pickle不是用于多种语言间的数据传输，它仅作为python对象的持久化或者python程序间进行互相传输对象的方法，因此它支持了python所有的数据类型</li></ul><hr><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul><li>json只能处理基本数据类型。pickle能处理所有Python的数据类型。</li><li>json用于各种语言之间的字符转换</li><li>pickle用于Python程序对象的持久化或者Python程序间对象网络传输，但不同版本的Python序列化可能还有差异</li></ul><h2 id="通用性"><a href="#通用性" class="headerlink" title="通用性"></a>通用性</h2><blockquote><p>json序列化后的字符串是通用的格式（普通的字符串）在不同的平台和语言都可以识别，而pickle序列化后的字符串只有Python可以识别（Python专用序列化模块）</p></blockquote><h2 id="处理后的数据类型"><a href="#处理后的数据类型" class="headerlink" title="处理后的数据类型"></a>处理后的数据类型</h2><blockquote><p>json序列化后的字符串是文本类型（记事本打开文件后或者print打印后，你也能看懂其中的内容）<br>而pickle序列化后的字符串是二进制流数据（记事本打开后或者print打印后就完全看不懂里面的内容了）<br><code>所以在进行文件操作时注意使用的是哪个模块，是否需要以b的格式打开</code></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;json与pickle&quot;&gt;&lt;a href=&quot;#json与pickle&quot; class=&quot;headerlink&quot; title=&quot;json与pickle&quot;&gt;&lt;/a&gt;json与pickle&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;什么是序列化？&quot;&gt;&lt;a href=&quot;#什</summary>
      
    
    
    
    <category term="Python基础" scheme="https://zhang-sitong.gitee.io/blogs/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Python" scheme="https://zhang-sitong.gitee.io/blogs/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>集合(set)的用法和使用场景，以及底层去重算法</title>
    <link href="https://zhang-sitong.gitee.io/blogs/lz_25/"/>
    <id>https://zhang-sitong.gitee.io/blogs/lz_25/</id>
    <published>2019-04-06T02:48:41.000Z</published>
    <updated>2021-04-08T01:45:38.188Z</updated>
    
    <content type="html"><![CDATA[<h2 id="集合的含义，分类以及创建"><a href="#集合的含义，分类以及创建" class="headerlink" title="集合的含义，分类以及创建"></a>集合的含义，分类以及创建</h2><ul><li><h3 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h3><ul><li>集合(set)是一种无序的并且里面存放不同元素的序列</li></ul></li><li><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li><strong>可变集合(set)</strong>: 可以添加和删除元素，不可哈希，不能用作字典的键也不能作为其他集合中的元素</li><li><strong>不可变集合(frozenset)</strong>: 不可以添加和删除元素，有哈希值，能被用作字典的键或是作为集合中的一个成员</li></ul></li><li><h3 id="创建方法"><a href="#创建方法" class="headerlink" title="创建方法"></a>创建方法</h3><ul><li>集合可以使用大括号 { } 或者 set() 函数创建集合<br><code>注意：创建一个空集合必须用 set() 而不是 &#123; &#125;，因为 &#123; &#125; 是用来创建一个空字典</code></li></ul></li><li><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;&#125;  <span class="comment"># 直接用&#123;&#125;括号创建的是字典</span></span><br><span class="line">print(<span class="built_in">type</span>(s))  <span class="comment"># &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">s1 = <span class="built_in">set</span>()</span><br><span class="line">print(s1)  <span class="comment"># set()</span></span><br><span class="line">print(<span class="built_in">type</span>(s1))  <span class="comment"># &lt;class &#x27;set&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">s2 = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">5</span>])</span><br><span class="line">print(s2)  <span class="comment"># &#123;1, 2, 3, 4, 5, 6&#125;  自动去重</span></span><br><span class="line"></span><br><span class="line">s3 = <span class="built_in">set</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">print(s3)  <span class="comment"># &#123;&#x27;w&#x27;, &#x27;h&#x27;, &#x27;r&#x27;, &#x27;e&#x27;, &#x27;d&#x27;, &#x27;o&#x27;, &#x27;l&#x27;, &#x27; &#x27;&#125; 自动去重，且无序</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="集合的用法"><a href="#集合的用法" class="headerlink" title="集合的用法"></a>集合的用法</h2><ul><li><h3 id="一次增加一个元素"><a href="#一次增加一个元素" class="headerlink" title="一次增加一个元素"></a>一次增加一个元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.add(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure></li><li><h3 id="一次增加多个元素"><a href="#一次增加多个元素" class="headerlink" title="一次增加多个元素"></a>一次增加多个元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a.update((<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><h3 id="删除指定元素"><a href="#删除指定元素" class="headerlink" title="删除指定元素"></a>删除指定元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.remove(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;</span><br></pre></td></tr></table></figure></li><li><h3 id="去除任意一个元素"><a href="#去除任意一个元素" class="headerlink" title="去除任意一个元素"></a>去除任意一个元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.pop()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure></li><li><h3 id="删除指定元素-1"><a href="#删除指定元素-1" class="headerlink" title="删除指定元素"></a>删除指定元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.discard(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure></li><li><h3 id="删除所有元素"><a href="#删除所有元素" class="headerlink" title="删除所有元素"></a>删除所有元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.clear()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="built_in">set</span>()</span><br></pre></td></tr></table></figure></li></ul><h2 id="集合的使用场景"><a href="#集合的使用场景" class="headerlink" title="集合的使用场景"></a>集合的使用场景</h2><h3 id="序列去重复"><a href="#序列去重复" class="headerlink" title="序列去重复"></a>序列去重复</h3><p><code>利用集合的特性，可以实现去重复操作</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">set</span>(a)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><h3 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h3><p><code>进行交集，差集等操作</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">set</span>((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="built_in">set</span>((<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="comment"># 取并集</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a | b</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="comment"># 取交集</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a &amp;  b</span><br><span class="line">&#123;<span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="comment"># 取差集，a中独有</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a -  b</span><br><span class="line">&#123;<span class="number">1</span>&#125;</span><br><span class="line"><span class="comment"># 取差集，b中独有</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b -  a</span><br><span class="line">&#123;<span class="number">4</span>&#125;</span><br><span class="line"><span class="comment"># 取a,b中独有元素的合集</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a ^ b</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="集合的底层去重算法"><a href="#集合的底层去重算法" class="headerlink" title="集合的底层去重算法"></a>集合的底层去重算法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">mylist = []</span><br><span class="line"></span><br><span class="line">[mylist.append(i) <span class="keyword">for</span> i <span class="keyword">in</span> l <span class="keyword">if</span> <span class="keyword">not</span> i <span class="keyword">in</span> mylist]</span><br><span class="line"></span><br><span class="line">print(mylist)</span><br></pre></td></tr></table></figure><p><code>实现方式： append从尾部往里塞 insert从头部往里塞</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;集合的含义，分类以及创建&quot;&gt;&lt;a href=&quot;#集合的含义，分类以及创建&quot; class=&quot;headerlink&quot; title=&quot;集合的含义，分类以及创建&quot;&gt;&lt;/a&gt;集合的含义，分类以及创建&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;含义&quot;&gt;&lt;a href=&quot;#含义</summary>
      
    
    
    
    <category term="Python基础" scheme="https://zhang-sitong.gitee.io/blogs/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Python" scheme="https://zhang-sitong.gitee.io/blogs/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>openLDAP</title>
    <link href="https://zhang-sitong.gitee.io/blogs/lz_24/"/>
    <id>https://zhang-sitong.gitee.io/blogs/lz_24/</id>
    <published>2019-03-31T08:52:13.000Z</published>
    <updated>2021-04-08T00:48:40.804Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是LDAP"><a href="#什么是LDAP" class="headerlink" title="什么是LDAP"></a>什么是LDAP</h2><blockquote><p>LDAP是轻量目录访问协议(Lightweight Directory Access Protocol)的缩写，LDAP是从X.500目录访问协议的基础上发展过来的，目前的版本是v3.0。与LDAP一样提供类似的目录服务软件还有ApacheDS、Active Directory、Red Hat Directory Service</p></blockquote><h2 id="什么是openLDAP"><a href="#什么是openLDAP" class="headerlink" title="什么是openLDAP"></a>什么是openLDAP</h2><blockquote><p>轻型目录访问协议（英文： LightweightDirectoryAccessProtocol，缩写： LDAP）是一个开放的，中立的，工业标准的应用协议，通过IP协议提供访问控制和维护分布式信息的目录信息。OpenLDAP是轻型目录访问协议（ LightweightDirectoryAccessProtocol， LDAP）的自由和开源的实现，在其 OpenLDAP许可证下发行，并已经被包含在众多流行的 Linux发行版中</p></blockquote><h2 id="为什么选择openLDAP"><a href="#为什么选择openLDAP" class="headerlink" title="为什么选择openLDAP"></a>为什么选择openLDAP</h2><blockquote><p>可以这样讲：市面上只要你能够想像得到的所有工具软件，全部都支持 LDAP协议。<br>比如说你公司要安装一个项目管理工具，那么这个工具几乎必然支持 LDAP协议，你公司要安装一个 bug管理工具，这工具必然也支持 LDAP协议，你公司要安装一套软件版本管理工具，这工具也必然支持 LDAP协议。 LDAP协议的好处就是你公司的所有员工在所有这些工具里共享同一套用户名和密码，来人的时候新增一个用户就能自动访问所有系统，走人的时候一键删除就取消了他对所有系统的访问权限，这就是 LDAP</p></blockquote><h2 id="openLDAP功能"><a href="#openLDAP功能" class="headerlink" title="openLDAP功能"></a>openLDAP功能</h2><ul><li>查询操作（ldapsearch）：允许查询目录并取得条目，其查询性能比关系数据库好</li><li>更新操作（ldapupdate）：目录树条目支持条目的添加、删除、修改等操作</li><li>同步操作：OpenLDAP 是一种典型的分布式结构，提供复制同步，可将主服务器上的数据通过推或拉的机制实现在从服务器上更新，完成数据的同步，从而避免OpenLDAP 服务器出现单点故障，影响用户验证</li><li>认证和管理操作：允许客户端在目录中识别自己，并且能够控制一个会话的性质</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是LDAP&quot;&gt;&lt;a href=&quot;#什么是LDAP&quot; class=&quot;headerlink&quot; title=&quot;什么是LDAP&quot;&gt;&lt;/a&gt;什么是LDAP&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;LDAP是轻量目录访问协议(Lightweight Directory A</summary>
      
    
    
    
    <category term="数据库" scheme="https://zhang-sitong.gitee.io/blogs/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="数据库" scheme="https://zhang-sitong.gitee.io/blogs/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>sort和sorted的区别</title>
    <link href="https://zhang-sitong.gitee.io/blogs/lz_23/"/>
    <id>https://zhang-sitong.gitee.io/blogs/lz_23/</id>
    <published>2019-03-30T08:14:42.000Z</published>
    <updated>2021-04-07T08:41:55.203Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>在python中排序有两个方法，一个是list对象的sort方法 一个是Python中的内置函数里的sorted</code></p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li><h4 id="sort仅针对于list对象排序，无返回值-会改变原来队列顺序"><a href="#sort仅针对于list对象排序，无返回值-会改变原来队列顺序" class="headerlink" title="sort仅针对于list对象排序，无返回值, 会改变原来队列顺序"></a>sort仅针对于list对象排序，无返回值, 会改变原来队列顺序</h4></li><li><h4 id="sorted是一个单独函数，可以对可迭代（iteration）对象排序，不局限于list，它不改变原生数据，重新生成一个新的队列"><a href="#sorted是一个单独函数，可以对可迭代（iteration）对象排序，不局限于list，它不改变原生数据，重新生成一个新的队列" class="headerlink" title="sorted是一个单独函数，可以对可迭代（iteration）对象排序，不局限于list，它不改变原生数据，重新生成一个新的队列"></a>sorted是一个单独函数，可以对可迭代（iteration）对象排序，不局限于list，它不改变原生数据，重新生成一个新的队列</h4></li></ul><h2 id="Sort"><a href="#Sort" class="headerlink" title="Sort"></a>Sort</h2><p><code>sort是Python中列表的方法</code></p><p><strong>语法：list.sort(key=None, reverse=False)</strong></p><ul><li>第二个参数当 reverse=True时为降序排列，reverse=False为升序排列，默认reverse=False</li><li>该方法没有返回值</li></ul><p><strong>举例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">L=[(<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;b&#x27;</span>,<span class="number">3</span>), (<span class="string">&#x27;e&#x27;</span>,<span class="number">2</span>),(<span class="string">&#x27;d&#x27;</span>,<span class="number">7</span>),(<span class="string">&#x27;c&#x27;</span>,<span class="number">5</span>)]</span><br><span class="line">L.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">0</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">print(L)</span><br><span class="line"> </span><br><span class="line">输出：[(<span class="string">&#x27;e&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;d&#x27;</span>, <span class="number">7</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="number">5</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">3</span>), (<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>)]</span><br></pre></td></tr></table></figure><hr><h2 id="Sorted"><a href="#Sorted" class="headerlink" title="Sorted"></a>Sorted</h2><p><code>sorted() 函数是Python中的内置函数</code></p><p><strong>语法：sorted(iterable=None, key=None, reverse=False)</strong></p><ul><li>后两个参数和 list.sort() 方法中的参数意思没有差别，第一个参数是一个可迭代对象</li><li>返回的是重新排列的列表</li></ul><blockquote><p>和 list.sort() 方法不一样的是，该函数不该变原来的可迭代对象，如 a 为一个列表，sorted(a) ，并不会改变 a，只会返回一个排序后的新列表</p></blockquote><p><strong>举例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">dic=&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">31</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">21</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>,<span class="string">&#x27;33&#x27;</span>:<span class="number">56</span>,<span class="string">&#x27;d&#x27;</span>:<span class="number">0</span>&#125;</span><br><span class="line">print(<span class="built_in">sorted</span>(dic.items(), key=<span class="keyword">lambda</span> a:a[<span class="number">0</span>]))</span><br><span class="line">print(<span class="built_in">sorted</span>(dic.items(), key=<span class="keyword">lambda</span> a:a[<span class="number">1</span>]))</span><br><span class="line">print(<span class="built_in">sorted</span>(dic.items(), key=<span class="keyword">lambda</span> a:a[<span class="number">0</span>], reverse = <span class="literal">False</span>))</span><br><span class="line"> </span><br><span class="line">输出：</span><br><span class="line">[(<span class="string">&#x27;33&#x27;</span>, <span class="number">56</span>), (<span class="string">&#x27;a&#x27;</span>, <span class="number">31</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">21</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>), (<span class="string">&#x27;d&#x27;</span>, <span class="number">0</span>)]</span><br><span class="line">[(<span class="string">&#x27;d&#x27;</span>, <span class="number">0</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">21</span>), (<span class="string">&#x27;a&#x27;</span>, <span class="number">31</span>), (<span class="string">&#x27;33&#x27;</span>, <span class="number">56</span>)]</span><br><span class="line">[(<span class="string">&#x27;33&#x27;</span>, <span class="number">56</span>), (<span class="string">&#x27;a&#x27;</span>, <span class="number">31</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">21</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>), (<span class="string">&#x27;d&#x27;</span>, <span class="number">0</span>)]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;在python中排序有两个方法，一个是list对象的sort方法 一个是Python中的内置函数里的sorted&lt;/code&gt;&lt;</summary>
      
    
    
    
    <category term="Python基础" scheme="https://zhang-sitong.gitee.io/blogs/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Python" scheme="https://zhang-sitong.gitee.io/blogs/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>二叉树</title>
    <link href="https://zhang-sitong.gitee.io/blogs/lz_22/"/>
    <id>https://zhang-sitong.gitee.io/blogs/lz_22/</id>
    <published>2019-03-29T08:26:55.000Z</published>
    <updated>2021-04-07T08:10:02.035Z</updated>
    
    <content type="html"><![CDATA[<h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h3 id="树的定义"><a href="#树的定义" class="headerlink" title="树的定义"></a>树的定义</h3><blockquote><p>树是一种数据结构，它是由n（n&gt;=1）个有限结点组成一个具有层次关系的集合</p></blockquote><h3 id="树的特点"><a href="#树的特点" class="headerlink" title="树的特点"></a>树的特点</h3><ul><li>每个结点有零个或多个子结点</li><li>没有父节点的结点称为根节点</li><li>每一个非根结点有且只有一个父节点</li><li>除了根结点外，每个子结点可以分为多个不相交的子树</li></ul><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="二叉树的定义"><a href="#二叉树的定义" class="headerlink" title="二叉树的定义"></a>二叉树的定义</h3><blockquote><p>二叉树是每个结点最多有两个子树的树结构。它有五种基本形态：二叉树可以是空集；根可以有空的左子树或右子树；或者左、右子树皆为空</p></blockquote><h3 id="二叉树的特点"><a href="#二叉树的特点" class="headerlink" title="二叉树的特点"></a>二叉树的特点</h3><ul><li>结点的度小于等于2</li><li>有序树(子树有序，不能颠倒)</li></ul><h3 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h3><ul><li>二叉树第i层上的结点数目最多为2i-1(i&gt;=1)</li><li>深度为k的二叉树至多有2k-1个结点（k&gt;=1）</li><li>包含n个结点的二叉树的高度至少为(log2n)+1</li><li>在任意一棵二叉树中，若终端结点的个数为n0，度为2的结点数为n2，则n0=n2+1</li></ul><h3 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h3><ul><li><p><strong>先序遍历</strong></p><ul><li>根–左–右<br><img src="https://i.loli.net/2021/04/07/8g9fVIU1c7B3EFN.png" alt="二叉树-先序遍历.png"></li></ul></li><li><p><strong>中序遍历</strong></p><ul><li>左–根–右<br><img src="https://i.loli.net/2021/04/07/VdXqmN6hU7HFWSR.png" alt="二叉树-中序遍历.png"></li></ul></li><li><p><strong>后序遍历</strong></p><ul><li>左–右–根<br><img src="https://i.loli.net/2021/04/07/LZzGoAnEOjIrM8u.png" alt="二叉树-后序遍历.png"></li></ul></li></ul><h3 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h3><p><code>一棵深度为k且有2k-1个结点的二叉树(也就是树上挂满了结点)</code><br><img src="https://i.loli.net/2021/04/07/J9vFqW4Z8cgPrbX.jpg" alt="满二叉树.png"></p><h3 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h3><p><code>深度为k的，有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点一一对应(意思是只有最后一层叶子不满，且全部集中在左边)</code><br><img src="https://i.loli.net/2021/04/07/JKkGHmp6EyeWsUO.jpg" alt="完全二叉树.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;树&quot;&gt;&lt;a href=&quot;#树&quot; class=&quot;headerlink&quot; title=&quot;树&quot;&gt;&lt;/a&gt;树&lt;/h2&gt;&lt;h3 id=&quot;树的定义&quot;&gt;&lt;a href=&quot;#树的定义&quot; class=&quot;headerlink&quot; title=&quot;树的定义&quot;&gt;&lt;/a&gt;树的定义&lt;/h3&gt;&lt;b</summary>
      
    
    
    
    <category term="数据结构" scheme="https://zhang-sitong.gitee.io/blogs/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://zhang-sitong.gitee.io/blogs/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Git与gitee</title>
    <link href="https://zhang-sitong.gitee.io/blogs/lz_21/"/>
    <id>https://zhang-sitong.gitee.io/blogs/lz_21/</id>
    <published>2019-01-27T01:48:28.000Z</published>
    <updated>2021-04-20T23:51:34.674Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是git、什么是gitee"><a href="#什么是git、什么是gitee" class="headerlink" title="什么是git、什么是gitee"></a>什么是git、什么是gitee</h2><blockquote><p>git: git是一个分布式的开源版本控制系统，或者说一个版本控制与管理的工具。<br>gitee: gitee是基于git的代码托管平台</p></blockquote><h2 id="下载地址及登录地址"><a href="#下载地址及登录地址" class="headerlink" title="下载地址及登录地址"></a>下载地址及登录地址</h2><p>Git下载链接：<a href="https://www.git-scm.com/download/">https://www.git-scm.com/download/</a></p><p><code>git下载完成后，使用命令行输入git --version查看版本，出现版本号表示安装成功</code></p><p>码云官网:  <a href="https://gitee.com/">https://gitee.com/</a></p><p><code>没有账号就注册一个</code></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h4 id="码云使用手册：http-git-mydoc-io"><a href="#码云使用手册：http-git-mydoc-io" class="headerlink" title="码云使用手册：http://git.mydoc.io/"></a>码云使用手册：<a href="http://git.mydoc.io/">http://git.mydoc.io/</a></h4><ul><li><h3 id="重要命令"><a href="#重要命令" class="headerlink" title="重要命令"></a>重要命令</h3><table><thead><tr><th>操作</th><th>命令</th></tr></thead><tbody><tr><td>初始化项目</td><td>git init</td></tr><tr><td>将所有改动存到暂存区</td><td>git add -a</td></tr><tr><td>将暂存区的改动提交给本地的版本库</td><td>git commit -m “备注”</td></tr><tr><td>从远程主机拉取master分支</td><td>git pull origin 分支</td></tr><tr><td>推送本地的master到origin主机</td><td>git push origin 分支</td></tr><tr><td>查看当前分支</td><td>git branch</td></tr><tr><td>查看所有分支</td><td>git branch -a</td></tr><tr><td>查看状态</td><td>git status</td></tr><tr><td>合并分支</td><td>git merge 分支</td></tr><tr><td>强制回退</td><td>git push origin HEAD –force</td></tr></tbody></table></li><li><h3 id="创建代码库"><a href="#创建代码库" class="headerlink" title="创建代码库"></a>创建代码库</h3><ul><li><h4 id="新建gitee仓库"><a href="#新建gitee仓库" class="headerlink" title="新建gitee仓库"></a>新建gitee仓库</h4></li><li><h4 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h4><ul><li><p>git init   [<strong>初始化仓库</strong>] </p></li><li><p>git add .  [<strong>跟踪本地仓库未跟踪的文件</strong>]</p></li><li><p>git commit -m”备注”</p><blockquote><p>本地完成一次提交，之后进行全局设置<br><code>PS：如没有使用过git，需要全局配置，在Git Bash输入</code><br>git cofig –global user.name “xxx”<br>git cofig –global user.email “<a href="mailto:&#120;&#x78;&#x78;&#x78;&#64;&#x71;&#113;&#46;&#x63;&#x6f;&#x6d;">&#120;&#x78;&#x78;&#x78;&#64;&#x71;&#113;&#46;&#x63;&#x6f;&#x6d;</a>“</p></blockquote></li><li><p>git remote add origin git地址  [<strong>本地代码与远程仓库同步</strong>]</p></li><li><p>git push -u origin master     [<strong>拉取远程仓库并合并到本地仓库</strong>]</p></li></ul></li></ul></li></ul><hr><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="开发分支（如dev）合并到master分支上"><a href="#开发分支（如dev）合并到master分支上" class="headerlink" title="开发分支（如dev）合并到master分支上"></a>开发分支（如dev）合并到master分支上</h3><ul><li><h4 id="如dev分支合并到master分支"><a href="#如dev分支合并到master分支" class="headerlink" title="如dev分支合并到master分支"></a><code>如dev分支合并到master分支</code></h4><ul><li>git checkout test 切换到test分支</li><li>git pull  提交本地更改</li><li>git checkout master 切换到master</li><li>git merge test  //把test内容合并到master</li><li>git push 即可推送到master</li></ul></li></ul><h3 id="master有更改"><a href="#master有更改" class="headerlink" title="master有更改"></a>master有更改</h3><ul><li><h4 id="当master有更改"><a href="#当master有更改" class="headerlink" title="当master有更改"></a><code>当master有更改</code></h4><ul><li>git checkout master </li><li>git pull </li><li>git checkout dev</li><li>git merge master </li><li>git push -u origin dev</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是git、什么是gitee&quot;&gt;&lt;a href=&quot;#什么是git、什么是gitee&quot; class=&quot;headerlink&quot; title=&quot;什么是git、什么是gitee&quot;&gt;&lt;/a&gt;什么是git、什么是gitee&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;git: </summary>
      
    
    
    
    <category term="git" scheme="https://zhang-sitong.gitee.io/blogs/categories/git/"/>
    
    
    <category term="git" scheme="https://zhang-sitong.gitee.io/blogs/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>技术点</title>
    <link href="https://zhang-sitong.gitee.io/blogs/lz_20%20(%E6%8A%80%E6%9C%AF%E7%82%B9)/"/>
    <id>https://zhang-sitong.gitee.io/blogs/lz_20%20(%E6%8A%80%E6%9C%AF%E7%82%B9)/</id>
    <published>2019-01-26T06:10:52.000Z</published>
    <updated>2021-04-20T23:51:34.209Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1）ant-design的使用"><a href="#1）ant-design的使用" class="headerlink" title="1）ant-design的使用"></a>1）ant-design的使用</h2><p>看官网 <a href="https://www.antdv.com/components/upload-cn/">https://www.antdv.com/components/upload-cn/</a></p><h2 id="2）IT新闻网站"><a href="#2）IT新闻网站" class="headerlink" title="2）IT新闻网站"></a>2）IT新闻网站</h2><p><a href="https://www.cnbeta.com/">https://www.cnbeta.com/</a></p><h2 id="3）用户校验三种方式"><a href="#3）用户校验三种方式" class="headerlink" title="3）用户校验三种方式"></a>3）用户校验三种方式</h2><ul><li>用户名和密码 [what you know]<ul><li>举例子 ant-design-删库被黑客黑掉</li><li>用在内部系统（只给内部用）</li></ul></li><li>用户名和密钥(token) [what you have]<ul><li>gitee通过密钥提交代码</li></ul></li><li>用户名和实体 [who you are]<ul><li>成本最高，安全性最高，【用在银行业务，支付宝】</li></ul></li></ul><h2 id="4）docker-镜像-容器-仓库"><a href="#4）docker-镜像-容器-仓库" class="headerlink" title="4）docker 镜像 容器 仓库"></a>4）docker 镜像 容器 仓库</h2><p>请点击下面链接地址：<br><a href="https://zhang-sitong.gitee.io/blogs/lz_13/">https://zhang-sitong.gitee.io/blogs/lz_13/</a></p><h2 id="5）redis"><a href="#5）redis" class="headerlink" title="5）redis"></a>5）redis</h2><h3 id="账号锁定问题：五分钟以内输错五次密码，锁定账号30分钟"><a href="#账号锁定问题：五分钟以内输错五次密码，锁定账号30分钟" class="headerlink" title="账号锁定问题：五分钟以内输错五次密码，锁定账号30分钟"></a>账号锁定问题：五分钟以内输错五次密码，锁定账号30分钟</h3><ul><li><h4 id="第一步-先判断-用户名-black-这个key-是否存在"><a href="#第一步-先判断-用户名-black-这个key-是否存在" class="headerlink" title="第一步 先判断 用户名+black 这个key 是否存在"></a>第一步 先判断 用户名+black 这个key 是否存在</h4><ul><li>存在 意味着已经被锁定 所以 立刻return</li><li>不存在 继续执行</li></ul></li><li><h4 id="第二步-向数据库进行请求-登录"><a href="#第二步-向数据库进行请求-登录" class="headerlink" title="第二步 向数据库进行请求 登录"></a>第二步 向数据库进行请求 登录</h4><ul><li>登录成功 直接返回</li><li>登录不成功 进行redis操作</li></ul></li><li><h4 id="第三步-判断是否是第一次输入错误"><a href="#第三步-判断是否是第一次输入错误" class="headerlink" title="第三步 判断是否是第一次输入错误"></a>第三步 判断是否是第一次输入错误</h4><ul><li>是 使用incrby进行redis自动累加存储，并expire设置过期时间5分钟，返回输入错误</li><li>否 使用get取出用户名这个key的值，判断是否等于5 次<ul><li>是 使用set将 用户名+’black’ 这个key存入redis 并expire设置过期时间30分钟，返回账户已锁定</li><li>否 使用set用户名更新这个key，并返回输入错误</li></ul></li></ul></li></ul><h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        username = request.data.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.data.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        r = redis.Redis()</span><br><span class="line">        <span class="keyword">if</span> r.get(username + <span class="string">&quot;black&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;Sorry，您的账户已经被锁定了，30分钟之后重试&#x27;</span>, <span class="string">&#x27;code&#x27;</span>: <span class="number">400</span>&#125;)</span><br><span class="line">        user = UserModel.objects.<span class="built_in">filter</span>(username=username, password=password).first()</span><br><span class="line">        <span class="keyword">if</span> user:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;登录成功&#x27;</span>, <span class="string">&#x27;code&#x27;</span>: <span class="number">200</span>, <span class="string">&#x27;id&#x27;</span>: user.<span class="built_in">id</span>, <span class="string">&#x27;user_level&#x27;</span>: user.user_level&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断是否存在该键值对,如果不存在,则进行创建</span></span><br><span class="line">        <span class="keyword">if</span> r.get(username) == <span class="literal">None</span>:</span><br><span class="line">            r.<span class="built_in">set</span>(username, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#  如果是第一次密码错误,开始计时</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(r.get(username)) == <span class="number">0</span>:</span><br><span class="line">            r.expire(username, <span class="number">200</span>)</span><br><span class="line">            <span class="comment"># 累加</span></span><br><span class="line">            r.incrby(username, <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&quot;msg&quot;</span>: <span class="string">&quot;您输入的用户名或密码错误&quot;</span>, <span class="string">&#x27;code&#x27;</span>: <span class="number">400</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 在五分钟错误五次 进行封禁</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">int</span>(r.get(username)) == <span class="number">5</span>:</span><br><span class="line">                r.<span class="built_in">set</span>(username + <span class="string">&quot;black&quot;</span>, <span class="built_in">str</span>(password))</span><br><span class="line">                <span class="comment"># 封禁时间</span></span><br><span class="line">                r.expire(username + <span class="string">&quot;black&quot;</span>, <span class="number">1800</span>)</span><br><span class="line">                <span class="keyword">return</span> Response(&#123;<span class="string">&quot;msg&quot;</span>: <span class="string">&quot;您的账号被锁定30分钟&quot;</span>, <span class="string">&#x27;code&#x27;</span>: <span class="number">400</span>&#125;)</span><br><span class="line">            <span class="comment"># 进行累加</span></span><br><span class="line">            r.incrby(username, <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&quot;msg&quot;</span>: <span class="string">&quot;用户名或密码错误&quot;</span>, <span class="string">&#x27;code&#x27;</span>: <span class="number">400</span>, &#125;)</span><br></pre></td></tr></table></figure><h2 id="6）异步"><a href="#6）异步" class="headerlink" title="6）异步"></a>6）异步</h2><p><code>异步方法必须用async关键字声明</code><br><code>耗时任务都需要加上await关键字，await必须依靠async</code></p><h3 id="异步的好处：可以同时发多个请求"><a href="#异步的好处：可以同时发多个请求" class="headerlink" title="异步的好处：可以同时发多个请求"></a>异步的好处：可以同时发多个请求</h3><h3 id="异步发送100次请求"><a href="#异步发送100次请求" class="headerlink" title="异步发送100次请求:"></a>异步发送100次请求:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 异步调用</span></span><br><span class="line"><span class="keyword">import</span> httpx</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">url = <span class="string">&#x27;http://127.0.0.1:8000/p8/user&#x27;</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span>(<span class="params">client</span>):</span></span><br><span class="line">    r = <span class="keyword">await</span> client.get(url)</span><br><span class="line">    print(r.json())</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> httpx.AsyncClient() <span class="keyword">as</span> client:</span><br><span class="line">        <span class="comment"># 100 次调用</span></span><br><span class="line">        task_list = []</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">            req = request(client)</span><br><span class="line">            task = asyncio.create_task(req)</span><br><span class="line">            task_list.append(task)</span><br><span class="line">        <span class="keyword">await</span> asyncio.gather(*task_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment">#开始</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    asyncio.run(main())</span><br><span class="line">    <span class="comment"># 结束</span></span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">f&#x27;异步：发送100次请求，耗时：<span class="subst">&#123;end - start&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="异步写文件"><a href="#异步写文件" class="headerlink" title="异步写文件:"></a>异步写文件:</h3><p><code>aiofiles用于处理asyncio应用程序中的本地磁盘文件。爬虫过程中用它来进行文件的异步操作</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="keyword">await</span> f.write(<span class="string">&quot;欢迎来到缅甸北部\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">fun</span>():</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiofiles.<span class="built_in">open</span>(<span class="string">&quot;10000.txt&quot;</span>, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># 列表推导式调用，更快，效率更高 </span></span><br><span class="line">        task = [asyncio.create_task(write(f)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>)]</span><br><span class="line">        <span class="comment"># 普通列表 相对于列表推导式要慢一点</span></span><br><span class="line">        <span class="comment"># test_list = []</span></span><br><span class="line">        <span class="comment"># for i in range(10000):</span></span><br><span class="line">        <span class="comment">#     w = write(f)</span></span><br><span class="line">        <span class="comment">#     task = asyncio.create_task(w)</span></span><br><span class="line">        <span class="comment">#     test_list.append(task)</span></span><br><span class="line">        <span class="keyword">await</span> asyncio.gather(*task)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line">    asyncio.run(fun())</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">&quot;执行了%d秒&quot;</span> % (end - start))</span><br></pre></td></tr></table></figure><h3 id="用队列实现异步修改用户名"><a href="#用队列实现异步修改用户名" class="headerlink" title="用队列实现异步修改用户名"></a>用队列实现异步修改用户名</h3><h4 id="1-封装redis"><a href="#1-封装redis" class="headerlink" title="1. 封装redis"></a>1. 封装redis</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRedisQueue</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, key, **redis_kwargs</span>):</span></span><br><span class="line">        self.__db = redis.Redis(**redis_kwargs)</span><br><span class="line">        self.key = key</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self, key, value</span>):</span></span><br><span class="line">        self.__db.lpush(key, value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lrange</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__db.lrange(key, <span class="number">0</span>, -<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">llen</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__db.llen(key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__db.rpop(self.key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">dojob</span>():</span></span><br><span class="line">    r = MyRedisQueue(<span class="string">&#x27;queue&#x27;</span>)</span><br><span class="line">    ccc = <span class="string">&#x27;jg&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        dea = r.pop()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> dea:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a = <span class="built_in">eval</span>(dea)</span><br><span class="line">            print(a)</span><br><span class="line">            <span class="keyword">if</span> User.objects.<span class="built_in">filter</span>(username=a[<span class="number">1</span>]):</span><br><span class="line">                r.hset(ccc, a[<span class="number">0</span>], <span class="number">400</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                User.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=a[<span class="number">0</span>]).update(username=a[<span class="number">1</span>])</span><br><span class="line">                r.hset(ccc, a[<span class="number">0</span>], <span class="number">200</span>)</span><br></pre></td></tr></table></figure><h4 id="2-实现异步消费"><a href="#2-实现异步消费" class="headerlink" title="2. 实现异步消费"></a>2. 实现异步消费</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">r = MyRedisQueue(<span class="string">&#x27;queue&#x27;</span>, decode_responses=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Update</span>(<span class="params">APIView</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="built_in">id</span> = request.query_params.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">        <span class="comment"># print(r.lrange(key))</span></span><br><span class="line">        <span class="comment"># list = r.lrange()</span></span><br><span class="line">        loop = asyncio.new_event_loop()</span><br><span class="line">        asyncio.set_event_loop(loop)</span><br><span class="line">        res = loop.run_until_complete(dojob())</span><br><span class="line">        loop.close()</span><br><span class="line"></span><br><span class="line">        a = r.hget(<span class="string">&#x27;jg&#x27;</span>, <span class="built_in">id</span>)</span><br><span class="line">        print(a)</span><br><span class="line">        <span class="keyword">if</span> a == <span class="string">&#x27;200&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&quot;msg&quot;</span>: <span class="string">&#x27;修改成功&#x27;</span>&#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;用户名重复&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpdateUser</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="built_in">id</span> = request.query_params.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">        vip = request.data.get(<span class="string">&#x27;vip&#x27;</span>)</span><br><span class="line">        new_username = request.data.get(<span class="string">&#x27;new_username&#x27;</span>)</span><br><span class="line">        r.push(<span class="string">&#x27;queue&#x27;</span>,<span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">id</span>, new_username, vip&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;正在审核&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="7）权限系统"><a href="#7）权限系统" class="headerlink" title="7）权限系统"></a>7）权限系统</h2><p><code>目的是做限制</code></p><h3 id="权限模型三种：ACL-ABAC-RBAC"><a href="#权限模型三种：ACL-ABAC-RBAC" class="headerlink" title="权限模型三种：ACL/ABAC/RBAC"></a>权限模型三种：ACL/ABAC/RBAC</h3><pre><code>ACL：面向用户的权限授权（只要有一个新用户，就得授一次权，比较麻烦）ABAC：基于属性的权限模型RBAC：基于角色的访问控制</code></pre><h3 id="用户权限"><a href="#用户权限" class="headerlink" title="用户权限"></a>用户权限</h3><h4 id="完成ACL权限控制，单数用户访问用户管理，双数用户访问用户详情"><a href="#完成ACL权限控制，单数用户访问用户管理，双数用户访问用户详情" class="headerlink" title="完成ACL权限控制，单数用户访问用户管理，双数用户访问用户详情"></a>完成ACL权限控制，单数用户访问用户管理，双数用户访问用户详情</h4><ul><li><h4 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMiddlewareMixin</span>(<span class="params">MiddlewareMixin</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">id</span>:</span><br><span class="line">            <span class="comment"># user = User_Identity.objects.filter(user_id=uid).first()</span></span><br><span class="line">            request.level = <span class="built_in">int</span>(<span class="built_in">id</span>) &amp; <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><h4 id="settings配置"><a href="#settings配置" class="headerlink" title="settings配置"></a>settings配置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;userapp.views.MyMiddlewareMixin&#x27;</span></span><br></pre></td></tr></table></figure></li><li><h4 id="修改用户权限视图"><a href="#修改用户权限视图" class="headerlink" title="修改用户权限视图"></a>修改用户权限视图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jurisdiction</span>(<span class="params">APIView</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="keyword">return</span> Response(Jurisdic == request.level)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="keyword">global</span> Jurisdic</span><br><span class="line">        Jurisdic = <span class="built_in">int</span>(<span class="keyword">not</span> Jurisdic)</span><br><span class="line">        print(Jurisdic)</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;已修改&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><h4 id="Vue路由守卫"><a href="#Vue路由守卫" class="headerlink" title="Vue路由守卫"></a>Vue路由守卫</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 用户管理</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">        component: user,</span><br><span class="line">        // 路由守卫</span><br><span class="line">        beforeEnter:(to,from,next)=&gt;&#123;</span><br><span class="line">          var uid=localStorage.getItem(<span class="string">&#x27;uid&#x27;</span>)</span><br><span class="line">            axios.get(<span class="string">&#x27;http://127.0.0.1:8000/z/middle/?uid=&#x27;</span>+uid)</span><br><span class="line">              .then(res=&gt;&#123;</span><br><span class="line">                var level=res.data.middle</span><br><span class="line">                <span class="keyword">if</span>(level)&#123;</span><br><span class="line">                  <span class="built_in">next</span>()</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                  message.info(<span class="string">&#x27;您无权限访问！&#x27;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;)</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure></li></ul><h2 id="8）三方登录"><a href="#8）三方登录" class="headerlink" title="8）三方登录"></a>8）三方登录</h2><ul><li><h3 id="微博三方登录"><a href="#微博三方登录" class="headerlink" title="微博三方登录"></a>微博三方登录</h3><p>  请点击以下链接：<br>  <a href="https://zhang-sitong.gitee.io/blogs/lz_4/">https://zhang-sitong.gitee.io/blogs/lz_4/</a></p></li><li><h3 id="钉钉三方登录"><a href="#钉钉三方登录" class="headerlink" title="钉钉三方登录"></a>钉钉三方登录</h3><ul><li><h4 id="获取钉钉二维码"><a href="#获取钉钉二维码" class="headerlink" title="获取钉钉二维码"></a>获取钉钉二维码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DingDing</span>(<span class="params">APIView</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        app_id = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        redice_url = <span class="string">&#x27;&#x27;</span>  <span class="comment"># 回调地址 </span></span><br><span class="line">        app_secret = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&quot;url&quot;</span>: <span class="string">&#x27;https://oapi.dingtalk.com/connect/qrconnect?appid=&#x27;</span> + app_id +</span><br><span class="line">                                <span class="string">&#x27;&amp;response_type=code&amp;scope=snsapi_login&amp;state=STATE&amp;redirect_uri=&#x27;</span> + redice_url,</span><br><span class="line">                         <span class="string">&#x27;code&#x27;</span>: <span class="number">200</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><h4 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DingBind</span>(<span class="params">APIView</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        code = request.query_params.get(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">        print(code)</span><br><span class="line">        t = time.time()</span><br><span class="line">        <span class="comment"># 时间戳</span></span><br><span class="line">        timestamp = <span class="built_in">str</span>((<span class="built_in">int</span>(<span class="built_in">round</span>(t * <span class="number">1000</span>))))</span><br><span class="line">        <span class="comment"># 替换成自己的appSecret</span></span><br><span class="line">        appSecret = <span class="string">&#x27;Wrp4YkJ_Aay1lEclT4YUGqvMDHqf4gZJL-TzjOQOEZYpYXz3Ztw07Rq5Igr6KYyU&#x27;</span></span><br><span class="line">        <span class="comment"># 构造签名</span></span><br><span class="line">        signature = base64.b64encode(</span><br><span class="line">            hmac.new(appSecret.encode(<span class="string">&#x27;utf-8&#x27;</span>), timestamp.encode(<span class="string">&#x27;utf-8&#x27;</span>), digestmod=sha256).digest())</span><br><span class="line">        <span class="comment"># 请求接口，换取钉钉用户名</span></span><br><span class="line">        payload = &#123;<span class="string">&#x27;tmp_auth_code&#x27;</span>: code&#125;</span><br><span class="line">        headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;</span><br><span class="line">        res = requests.post(<span class="string">&#x27;https://oapi.dingtalk.com/sns/getuserinfo_bycode?signature=&#x27;</span> + parse.quote(</span><br><span class="line">            signature.decode(<span class="string">&quot;utf-8&quot;</span>)) + <span class="string">&quot;&amp;timestamp=&quot;</span> + timestamp + <span class="string">&quot;&amp;accessKey=dingoalxhmajgqbhn4ennn&quot;</span>,</span><br><span class="line">                            data=json.dumps(payload), headers=headers)  <span class="comment"># accessKey替换成自己的appid</span></span><br><span class="line">        <span class="comment">#  获取到一个随便的唯一id</span></span><br><span class="line">        res_dict = json.loads(res.text)</span><br><span class="line">        print(res_dict)</span><br><span class="line">        unionid = res_dict[<span class="string">&#x27;user_info&#x27;</span>][<span class="string">&#x27;unionid&#x27;</span>]</span><br><span class="line">        user = User.objects.<span class="built_in">filter</span>(ding=unionid).first()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">404</span>, <span class="string">&#x27;unioid&#x27;</span>: unionid&#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">200</span>, <span class="string">&#x27;id&#x27;</span>: user.<span class="built_in">id</span>, <span class="string">&#x27;vip&#x27;</span>: user.<span class="built_in">id</span>&#125;)</span><br><span class="line">    <span class="comment"># 绑定已有用户</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        unionid = request.data.get(<span class="string">&#x27;unionid&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        created_at = request.data.get(<span class="string">&#x27;created_at&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="built_in">id</span> = request.data.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">        wyx = request.data.get(<span class="string">&#x27;wyx&#x27;</span>)</span><br><span class="line">        user = User.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="built_in">id</span>).first()</span><br><span class="line">        <span class="keyword">if</span> wyx &amp; <span class="number">1</span> == <span class="number">1</span>:</span><br><span class="line">            User.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="built_in">id</span>).update(ding=unionid)</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&quot;绑定成功&quot;</span>, <span class="string">&#x27;code&#x27;</span>: <span class="number">200</span>, <span class="string">&#x27;id&#x27;</span>: user.<span class="built_in">id</span>, <span class="string">&#x27;vip&#x27;</span>: user.<span class="built_in">id</span>&#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            User.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="built_in">id</span>).update(git=created_at)</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&quot;绑定成功&quot;</span>, <span class="string">&#x27;code&#x27;</span>: <span class="number">200</span>, <span class="string">&#x27;id&#x27;</span>: user.<span class="built_in">id</span>, <span class="string">&#x27;vip&#x27;</span>: user.<span class="built_in">id</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><h4 id="vue回调地址"><a href="#vue回调地址" class="headerlink" title="vue回调地址"></a>vue回调地址</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;回调&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line">export default &#123;</span><br><span class="line">name: <span class="string">&quot;ding_url&quot;</span>,</span><br><span class="line">  data()&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">      code : this.$route.query.code,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="keyword">if</span>(this.code)&#123;</span><br><span class="line">      axios(&#123;</span><br><span class="line">        url:<span class="string">&#x27;http://127.0.0.1:8000/app2/ding_bind/?code=&#x27;</span>+this.code,</span><br><span class="line">      &#125;).then(res =&gt;&#123;</span><br><span class="line">        <span class="keyword">if</span>(res.data.code==<span class="number">404</span>)&#123;</span><br><span class="line">          this.$router.push(<span class="string">&#x27;/bind/?unionid=&#x27;</span>+res.data.unioid)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          localStorage.setItem(<span class="string">&#x27;vip&#x27;</span>,res.data.vip)</span><br><span class="line">          localStorage.setItem(<span class="string">&#x27;id&#x27;</span>,res.data.<span class="built_in">id</span>)</span><br><span class="line">          this.$router.push(<span class="string">&#x27;/myback&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><h4 id="vue绑定用户"><a href="#vue绑定用户" class="headerlink" title="vue绑定用户"></a>vue绑定用户</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;p v-<span class="keyword">for</span>=<span class="string">&quot;i in nr&quot;</span>&gt;</span><br><span class="line">        &#123;&#123;i.username&#125;&#125;---</span><br><span class="line">        &lt;a-button @click=&quot;bind(i.id)&quot;&gt;绑定&lt;/a-button&gt;</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line">export default &#123;</span><br><span class="line">  name: <span class="string">&quot;bind&quot;</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      unionid:this.$route.query.unionid,</span><br><span class="line">      created_at:this.$route.query.created_at,</span><br><span class="line">      nr:[],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    bind(<span class="built_in">id</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span> (this.unionid)&#123;</span><br><span class="line">        axios(&#123;</span><br><span class="line">          url:<span class="string">&#x27;http://127.0.0.1:8000/app2/ding_bind/&#x27;</span>,</span><br><span class="line">          method:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">          data:&#123;<span class="string">&#x27;unionid&#x27;</span>:this.unionid,<span class="string">&#x27;id&#x27;</span>:<span class="built_in">id</span>,<span class="string">&#x27;wyx&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">        &#125;).then(res =&gt;&#123;</span><br><span class="line">          <span class="keyword">if</span>(res.data.code == <span class="number">200</span>)&#123;</span><br><span class="line">            localStorage.setItem(<span class="string">&#x27;vip&#x27;</span>,res.data.vip)</span><br><span class="line">            localStorage.setItem(<span class="string">&#x27;id&#x27;</span>,res.data.<span class="built_in">id</span>)</span><br><span class="line">            this.$router.push(<span class="string">&#x27;/myback&#x27;</span>)</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            alert(res.data.msg)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        axios(&#123;</span><br><span class="line">          url:<span class="string">&#x27;http://127.0.0.1:8000/app2/ding_bind/&#x27;</span>,</span><br><span class="line">          method:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">          data:&#123;<span class="string">&#x27;created_at&#x27;</span>:this.created_at,<span class="string">&#x27;id&#x27;</span>:<span class="built_in">id</span>,<span class="string">&#x27;wyx&#x27;</span>:<span class="number">10</span>&#125;</span><br><span class="line">        &#125;).then(res =&gt;&#123;</span><br><span class="line">          <span class="keyword">if</span>(res.data.code == <span class="number">200</span>)&#123;</span><br><span class="line">            localStorage.setItem(<span class="string">&#x27;vip&#x27;</span>,res.data.vip)</span><br><span class="line">            localStorage.setItem(<span class="string">&#x27;id&#x27;</span>,res.data.<span class="built_in">id</span>)</span><br><span class="line">            this.$router.push(<span class="string">&#x27;/myback&#x27;</span>)</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            alert(res.data.msg)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    axios(&#123;</span><br><span class="line">      url:<span class="string">&#x27;http://127.0.0.1:8000/app2/user/&#x27;</span></span><br><span class="line">    &#125;).then(res =&gt;&#123;</span><br><span class="line">      this.nr = res.data</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="9）无限极分类"><a href="#9）无限极分类" class="headerlink" title="9）无限极分类"></a>9）无限极分类</h2><p><code>请点击以下链接，进行查看</code><br><a href="https://zhang-sitong.gitee.io/blogs/lz_11/">https://zhang-sitong.gitee.io/blogs/lz_11/</a></p><h2 id="10）MongoDB"><a href="#10）MongoDB" class="headerlink" title="10）MongoDB"></a>10）MongoDB</h2><p><code>请点击以下链接，进行查看</code><br><a href="https://zhang-sitong.gitee.io/blogs/lz_17/">https://zhang-sitong.gitee.io/blogs/lz_17/</a></p><h2 id="11）栈"><a href="#11）栈" class="headerlink" title="11）栈"></a>11）栈</h2><ul><li><h3 id="栈：先进后出"><a href="#栈：先进后出" class="headerlink" title="栈：先进后出"></a>栈：先进后出</h3></li><li><h3 id="写一套方法，基于栈类，实现bin方法（十进制和二进制转换）"><a href="#写一套方法，基于栈类，实现bin方法（十进制和二进制转换）" class="headerlink" title="写一套方法，基于栈类，实现bin方法（十进制和二进制转换）"></a>写一套方法，基于栈类，实现bin方法（十进制和二进制转换）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  栈：先进后出</span></span><br><span class="line"><span class="comment"># 类似于：箱子（拿东西和放东西）</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.items = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span>(<span class="params">self</span>):</span>  <span class="comment"># 判栈空</span></span><br><span class="line">        <span class="keyword">return</span> self.items == []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self, item</span>):</span>  <span class="comment"># 进栈</span></span><br><span class="line">        self.items.append(item)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>):</span>  <span class="comment"># 出栈</span></span><br><span class="line">        <span class="keyword">return</span> self.items.pop()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">peek</span>(<span class="params">self</span>):</span>  <span class="comment"># 获取栈顶元素</span></span><br><span class="line">        <span class="keyword">return</span> self.items[<span class="built_in">len</span>(self.items) - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span>(<span class="params">self</span>):</span>  <span class="comment"># 获取栈的大小</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.items)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 十进制转二进制</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Switch</span>(<span class="params">Number</span>):</span></span><br><span class="line">    switch = Stack()</span><br><span class="line">    <span class="keyword">while</span> Number &gt; <span class="number">0</span>:</span><br><span class="line">        num = Number % <span class="number">2</span></span><br><span class="line">        switch.push(num)</span><br><span class="line">        Number = Number // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构建二进制字符串</span></span><br><span class="line">    binStr = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> switch.isEmpty():</span><br><span class="line">        binStr = binStr + <span class="built_in">str</span>(switch.pop())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;0b&quot;</span> + binStr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(Switch(<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入要转换成二进制的数字： &quot;</span>))))</span><br></pre></td></tr></table></figure></li></ul><h2 id="12）消息盒子"><a href="#12）消息盒子" class="headerlink" title="12）消息盒子"></a>12）消息盒子</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 消息盒子</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        user_id = request.query_params.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">        c = r.hgetall(<span class="string">&#x27;user%s&#x27;</span> % user_id)</span><br><span class="line">        list1 = []</span><br><span class="line">        length = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> key, values <span class="keyword">in</span> c.items():</span><br><span class="line">            print(key)</span><br><span class="line">            i = <span class="built_in">eval</span>(values)</span><br><span class="line">            list1.append(i)</span><br><span class="line">            <span class="keyword">if</span> i[<span class="string">&#x27;is_read&#x27;</span>] == <span class="number">0</span>:</span><br><span class="line">                length += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;message&#x27;</span>: list1, <span class="string">&#x27;count&#x27;</span>: length&#125;)</span><br><span class="line">        <span class="comment"># uid = request.query_params.get(&#x27;id&#x27;)</span></span><br><span class="line">        <span class="comment"># count = Message.objects.filter(uid_id=uid, is_read=0).count()</span></span><br><span class="line">        <span class="comment"># message = Message.objects.filter(uid_id=uid).order_by(&#x27;is_read&#x27;, &#x27;-id&#x27;)</span></span><br><span class="line">        <span class="comment"># return Response(&#123;&#x27;message&#x27;: MessageSerializer(message, many=True).data, &#x27;count&#x27;: count&#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        wid = request.query_params.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">        uid = request.data.get(<span class="string">&#x27;uid&#x27;</span>)</span><br><span class="line">        c = r.hgetall(<span class="string">&#x27;user%s&#x27;</span> % uid)</span><br><span class="line">        print(c)</span><br><span class="line">        <span class="keyword">for</span> key, values <span class="keyword">in</span> c.items():</span><br><span class="line">            print(key)</span><br><span class="line">            i = <span class="built_in">eval</span>(values)</span><br><span class="line">            print(i)</span><br><span class="line">            <span class="keyword">if</span> wid == i[<span class="string">&#x27;wid&#x27;</span>]:</span><br><span class="line">                r.hset(<span class="string">&#x27;user%s&#x27;</span> % uid, key, <span class="built_in">str</span>(&#123;<span class="string">&quot;name&quot;</span>: i[<span class="string">&#x27;name&#x27;</span>], <span class="string">&quot;wid&quot;</span>: wid, <span class="string">&quot;uid&quot;</span>: uid, <span class="string">&quot;is_read&quot;</span>: <span class="number">1</span>, <span class="string">&quot;is_ch&quot;</span>: <span class="number">0</span>&#125;))</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;&#125;)</span><br></pre></td></tr></table></figure><h2 id="13）聊天系统"><a href="#13）聊天系统" class="headerlink" title="13）聊天系统"></a>13）聊天系统</h2><ul><li><strong>存储一份聊天记录，用websocket实现长连接进行聊天，将发送人id和接收人id进行拼接当key存入redis,存入类型 -&gt; list,将聊天记录按照字典的方式存入list</strong><ul><li><h3 id="websocket代码"><a href="#websocket代码" class="headerlink" title="websocket代码"></a>websocket代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@accept_websocket</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">service</span>(<span class="params">request,user_id,uid</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.is_websocket():</span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            list1 = []</span><br><span class="line">            list2 = []</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            list1.append(uid)</span><br><span class="line">            list1.append(user_id)</span><br><span class="line">            list1.sort()</span><br><span class="line">            key = <span class="built_in">str</span>(list1)</span><br><span class="line">            data = r.lrange(key)</span><br><span class="line">            user = User.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=user_id).first()</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> data:</span><br><span class="line">                _ = &#123;&#125;</span><br><span class="line">                j = <span class="built_in">eval</span>(j)</span><br><span class="line">                _[<span class="string">&#x27;uid&#x27;</span>] = j[<span class="string">&#x27;uid&#x27;</span>]</span><br><span class="line">                _[<span class="string">&#x27;uname&#x27;</span>] = user.username</span><br><span class="line">                _[<span class="string">&#x27;name&#x27;</span>] = j[<span class="string">&quot;name&quot;</span>]</span><br><span class="line">                _[<span class="string">&#x27;jid&#x27;</span>] = j[<span class="string">&quot;jid&quot;</span>]</span><br><span class="line">                _[<span class="string">&#x27;ch&#x27;</span>] = j[<span class="string">&quot;ch&quot;</span>]</span><br><span class="line">                _[<span class="string">&#x27;read&#x27;</span>] = j[<span class="string">&quot;read&quot;</span>]</span><br><span class="line">                _[<span class="string">&#x27;date&#x27;</span>] = j[<span class="string">&#x27;date&#x27;</span>]</span><br><span class="line">                list2.append(_)</span><br><span class="line">            list2 = <span class="built_in">sorted</span>(list2, key=<span class="keyword">lambda</span> x: x[<span class="string">&#x27;date&#x27;</span>])</span><br><span class="line">            request.websocket.send(json.dumps(list2))</span><br></pre></td></tr></table></figure></li><li><h3 id="添加一个视图"><a href="#添加一个视图" class="headerlink" title="添加一个视图"></a>添加一个视图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessAdd</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        uid = request.data.get(<span class="string">&#x27;uid&#x27;</span>)</span><br><span class="line">        user_id = request.data.get(<span class="string">&#x27;user_id&#x27;</span>)</span><br><span class="line">        name = request.data.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">        list1 = []</span><br><span class="line">        list1.append(<span class="built_in">str</span>(uid))</span><br><span class="line">        list1.append(<span class="built_in">str</span>(user_id))</span><br><span class="line">        list1.sort()</span><br><span class="line">        key = <span class="built_in">str</span>(list1)</span><br><span class="line">        date = time.time()</span><br><span class="line">        info = <span class="built_in">str</span>(&#123;<span class="string">&#x27;uid&#x27;</span>: uid, <span class="string">&#x27;name&#x27;</span>: name, <span class="string">&#x27;jid&#x27;</span>: user_id, <span class="string">&#x27;ch&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;read&#x27;</span>: <span class="number">0</span>,<span class="string">&#x27;date&#x27;</span>:date&#125;)</span><br><span class="line">        r.push(key, info)</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;发送成功&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><h3 id="vue端代码"><a href="#vue端代码" class="headerlink" title="vue端代码"></a>vue端代码</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;a-button <span class="built_in">type</span>=<span class="string">&quot;primary&quot;</span> @click=<span class="string">&quot;showModal&quot;</span>&gt;</span><br><span class="line">        创建聊天</span><br><span class="line">      &lt;/a-button&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;a-modal v-model=<span class="string">&quot;visible&quot;</span> title=<span class="string">&quot;选择聊天人&quot;</span> @ok=<span class="string">&quot;handleOk&quot;</span>&gt;</span><br><span class="line">          &lt;p v-<span class="keyword">for</span>=<span class="string">&quot;i in userlist&quot;</span> @click=<span class="string">&quot;showModal1(i.id)&quot;</span> v-<span class="keyword">if</span>=<span class="string">&quot;uid!=i.id&quot;</span>&gt;</span><br><span class="line">            &#123;&#123; i.username &#125;&#125;</span><br><span class="line">          &lt;/p&gt;</span><br><span class="line">        &lt;/a-modal&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;a-modal v-model=<span class="string">&quot;visible1&quot;</span> title=<span class="string">&quot;聊天&quot;</span> @ok=<span class="string">&quot;handleOk1&quot;</span> width=<span class="string">&quot;40%&quot;</span>&gt;</span><br><span class="line">        &lt;a v-<span class="keyword">for</span>=<span class="string">&quot;j in listz&quot;</span>&gt;</span><br><span class="line">          &lt;p v-if=&quot;j.uid == uid&quot; style=&quot;text-align: right&quot;&gt;&#123;&#123; j.name &#125;&#125;&lt;/p&gt;</span><br><span class="line">          &lt;p v-else&gt;&#123;&#123; j.uname &#125;&#125;发送了: &#123;&#123; j.name &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">        &lt;a-input id=&quot;chat-message-input&quot; v-model=&quot;info&quot; type=&quot;text&quot;&gt;&lt;/a-input&gt;</span><br><span class="line">        &lt;a-button <span class="built_in">type</span>=<span class="string">&quot;primary&quot;</span> @click=<span class="string">&quot;sendmessage&quot;</span>&gt;</span><br><span class="line">          发送</span><br><span class="line">        &lt;/a-button&gt;</span><br><span class="line">      &lt;/a-modal&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: <span class="string">&quot;socket&quot;</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      info: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      listz: [],</span><br><span class="line">      visible: false,</span><br><span class="line">      userlist: [],</span><br><span class="line">      visible1: false,</span><br><span class="line">      user_id: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      uid: localStorage.getItem(<span class="string">&#x27;id&#x27;</span>),</span><br><span class="line">      socket:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    showModal() &#123;</span><br><span class="line">      this.visible = true;</span><br><span class="line">    &#125;,</span><br><span class="line">    handleOk(e) &#123;</span><br><span class="line">      console.log(e);</span><br><span class="line">      this.visible = false;</span><br><span class="line">    &#125;,</span><br><span class="line">    showModal1(<span class="built_in">id</span>) &#123;</span><br><span class="line">      this.visible1 = true;</span><br><span class="line">      this.user_id = <span class="built_in">id</span></span><br><span class="line">      var _this = this</span><br><span class="line">      this.socket = new WebSocket(`ws:<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/app2/service/$&#123;<span class="built_in">id</span>&#125;/$&#123;this.uid&#125;/`)</span><br><span class="line">      this.socket.onmessage = function (e) &#123;</span><br><span class="line">        _this.listz = JSON.parse(e.data)</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    handleOk1(e) &#123;</span><br><span class="line">      // console.log(e);</span><br><span class="line">      this.socket.close()</span><br><span class="line">      this.visible1 = false</span><br><span class="line">      this.user_id = <span class="string">&quot;&quot;</span></span><br><span class="line">      this.listz = []</span><br><span class="line">    &#125;,</span><br><span class="line">    sendmessage() &#123;</span><br><span class="line">      this.axios(&#123;</span><br><span class="line">        url: <span class="string">&#x27;http://127.0.0.1:8000/app2/mesadd/&#x27;</span>,</span><br><span class="line">        method: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        data: &#123;<span class="string">&#x27;uid&#x27;</span>: this.uid, <span class="string">&#x27;user_id&#x27;</span>: this.user_id, <span class="string">&#x27;name&#x27;</span>: this.info&#125;</span><br><span class="line">      &#125;).then(res =&gt; &#123;</span><br><span class="line">        console.log(res.data)</span><br><span class="line">        <span class="keyword">if</span>(res.data.msg==<span class="string">&#x27;发送成功&#x27;</span>)&#123;</span><br><span class="line">          this.info = <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.axios(&#123;</span><br><span class="line">      url: <span class="string">&#x27;http://127.0.0.1:8000/app2/user/&#x27;</span></span><br><span class="line">    &#125;).then(res =&gt; &#123;</span><br><span class="line">      console.log(res.data)</span><br><span class="line">      this.userlist = res.data</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1）ant-design的使用&quot;&gt;&lt;a href=&quot;#1）ant-design的使用&quot; class=&quot;headerlink&quot; title=&quot;1）ant-design的使用&quot;&gt;&lt;/a&gt;1）ant-design的使用&lt;/h2&gt;&lt;p&gt;看官网 &lt;a href=&quot;https</summary>
      
    
    
    
    <category term="技术点" scheme="https://zhang-sitong.gitee.io/blogs/categories/%E6%8A%80%E6%9C%AF%E7%82%B9/"/>
    
    
    <category term="技术点" scheme="https://zhang-sitong.gitee.io/blogs/tags/%E6%8A%80%E6%9C%AF%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>WebSocket与Http</title>
    <link href="https://zhang-sitong.gitee.io/blogs/lz_19/"/>
    <id>https://zhang-sitong.gitee.io/blogs/lz_19/</id>
    <published>2019-01-24T06:10:52.000Z</published>
    <updated>2021-04-20T23:51:34.818Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Websocket"><a href="#什么是Websocket" class="headerlink" title="什么是Websocket"></a>什么是Websocket</h2><ul><li>Websocket 是一种网络通信协议，是HTML5开始提供的一种在单个 TCP 连接上进行全双工通讯的协议</li></ul><h2 id="Websocket有什么特点"><a href="#Websocket有什么特点" class="headerlink" title="Websocket有什么特点"></a>Websocket有什么特点</h2><ul><li>建立在TCP协议之上</li><li>性能开销小通信高效</li><li>协议标识符 ws wss（加密之后）</li><li>持久化网络通信协议</li><li>客户端可以与任意服务器通信</li></ul><h2 id="Websocket是什么样的协议，具体有什么优点"><a href="#Websocket是什么样的协议，具体有什么优点" class="headerlink" title="Websocket是什么样的协议，具体有什么优点"></a>Websocket是什么样的协议，具体有什么优点</h2><blockquote><p>首先，Websocket是一个持久化的协议，相对于HTTP这种非持久的协议来说<br>HTTP的生命周期通过 Request 来界定，也就是一个 Request 一个 Response ，那么在 HTTP1.0 中，这次HTTP请求就结束了。<br>在HTTP1.1中进行了改进，使得有一个keep-alive，也就是说，在一个HTTP连接中，可以发送多个Request，接收多个Response。但是请记住 Request = Response ， 在HTTP中永远是这样，也就是说一个request只能有一个response。而且这个response也是被动的，不能主动发起。</p></blockquote><h2 id="Websocket的作用"><a href="#Websocket的作用" class="headerlink" title="Websocket的作用"></a>Websocket的作用</h2><h3 id="1）ajax轮询"><a href="#1）ajax轮询" class="headerlink" title="1）ajax轮询"></a>1）ajax轮询</h3><pre><code>ajax轮询的原理非常简单，让浏览器隔个几秒就发送一次请求，询问服务器是否有新信息</code></pre><h3 id="2）long-poll长轮询"><a href="#2）long-poll长轮询" class="headerlink" title="2）long poll长轮询"></a>2）long poll长轮询</h3><pre><code>long poll 其实原理跟 ajax轮询 差不多，都是采用轮询的方式，不过采取的是阻塞模型（一直打电话，没收到就不挂电话），也就是说，客户端发起连接后，如果没消息，就一直不返回Response给客户端（对于PHP有最大执行时间，建议没消息，执行到一定时间也返回）。直到有消息才返回，返回完之后，客户端再次建立连接，周而复始。从上面可以看出其实这两种方式，都是在不断地建立HTTP连接，关闭HTTP协议，由于HTTP是非状态性的，每次都要重新传输 identity info （鉴别信息），来告诉服务端你是谁。然后等待服务端处理，可以体现HTTP协议的另外一个特点，被动性。何为被动性呢，其实就是，服务端不能主动联系客户端，只能有客户端发起。从上面很容易看出来，不管怎么样，上面这两种都是非常消耗资源的。ajax轮询 需要服务器有很快的处理速度和资源。（速度）long poll 需要有很高的并发，也就是说同时接待客户的能力。（场地大小）</code></pre><h3 id="3）WebSocket"><a href="#3）WebSocket" class="headerlink" title="3）WebSocket"></a>3）WebSocket</h3><pre><code>Websocket解决了HTTP的这几个难题。首先，被动性，当服务器完成协议升级后（HTTP-&gt;Websocket），服务端就可以主动推送信息给客户端啦。解决了上面同步有延迟的问题。解决服务器上消耗资源的问题：其实我们所用的程序是要经过两层代理的，即HTTP协议在Nginx等服务器的解析下，然后再传送给相应的Handler（php等）来处理。简单地说，我们有一个非常快速的 接线员（Nginx） ，他负责把问题转交给相应的 客服（Handler） 。Websocket就解决了这样一个难题，建立后，可以直接跟接线员建立持久连接，有信息的时候客服想办法通知接线员，然后接线员在统一转交给客户。由于Websocket只需要一次HTTP握手，所以说整个通讯过程是建立在一次连接/状态中，也就避免了HTTP的非状态性，服务端会一直知道你的信息，直到你关闭请求，这样就解决了接线员要反复解析HTTP协议，还要查看identity info的信息。目前唯一的问题是：不兼容低版本的IE</code></pre><h2 id="Websocket使用场景"><a href="#Websocket使用场景" class="headerlink" title="Websocket使用场景"></a>Websocket使用场景</h2><blockquote><p>社交聊天、弹幕、多玩家游戏、视频会议/聊天、在线教育、智能家居等需要高实时的场景</p></blockquote><h2 id="Websocket-四个事件，两个方法"><a href="#Websocket-四个事件，两个方法" class="headerlink" title="Websocket 四个事件，两个方法"></a>Websocket 四个事件，两个方法</h2><ul><li><h3 id="4个事件"><a href="#4个事件" class="headerlink" title="4个事件"></a>4个事件</h3><ul><li>open Socket.onopen 连接建立时触发</li><li>message Socket.onmessage 客户端接收服务端数据时触发</li><li>error Socket.onerror 通信发生错误时触发</li><li>close Socket.onclose 连接关闭时触发</li></ul></li><li><h3 id="2个方法"><a href="#2个方法" class="headerlink" title="2个方法"></a>2个方法</h3><ul><li>Socket.send() 使用连接发送数据</li><li>Socket.close() 关闭连接</li></ul></li></ul><hr><h2 id="什么是HTTP协议"><a href="#什么是HTTP协议" class="headerlink" title="什么是HTTP协议"></a>什么是HTTP协议</h2><ul><li>超文本传输协议，本质上是一种通信协议。用来将html从服务端传送到客户端</li></ul><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>简单快速<blockquote><p>客户向服务器请求服务时，只需传送请求方法和路径</p></blockquote></li><li>无连接<blockquote><p>限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间</p></blockquote></li><li>无状态<blockquote><p>协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快</p></blockquote></li></ul><hr><h2 id="Websocket与http的关系"><a href="#Websocket与http的关系" class="headerlink" title="Websocket与http的关系"></a>Websocket与http的关系</h2><ul><li><h3 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h3><ol><li>都是一样基于TCP的，都是可靠性传输协议。</li><li>都是应用层协议。</li></ol></li><li><h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><ol><li>WebSocket是双向通信协议，模拟Socket协议，可以双向发送或接受信息。HTTP是单向的。</li><li>WebSocket是需要浏览器和服务器握手进行建立连接的。而http是浏览器发起向服务器的连接，服务器预先并不知道这个连接。</li></ol></li></ul><hr><h2 id="Websocket实例"><a href="#Websocket实例" class="headerlink" title="Websocket实例"></a>Websocket实例</h2><ul><li><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>pip install -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a> dwebsocket</li></ul></li><li><h3 id="定义视图文件的逻辑views-py"><a href="#定义视图文件的逻辑views-py" class="headerlink" title="定义视图文件的逻辑views.py"></a>定义视图文件的逻辑views.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入websocket装饰器</span></span><br><span class="line"><span class="keyword">from</span> dwebsocket.decorators <span class="keyword">import</span> accept_websocket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#接收前端信息</span></span><br><span class="line"><span class="meta">@accept_websocket</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_socket</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.is_websocket():</span><br><span class="line">        <span class="keyword">for</span> message <span class="keyword">in</span> request.websocket:</span><br><span class="line">            c=<span class="built_in">str</span>(message,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">            print(c)</span><br><span class="line">            request.websocket.send(message)</span><br><span class="line"></span><br><span class="line"><span class="comment">#主动推送消息</span></span><br><span class="line"><span class="meta">@accept_websocket</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_websocket</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.is_websocket():</span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            time.sleep(<span class="number">1</span>) <span class="comment">## 向前端发送时间</span></span><br><span class="line">            dit = &#123;</span><br><span class="line">                <span class="string">&#x27;time&#x27;</span>:time.strftime(<span class="string">&#x27;%Y.%m.%d %H:%M:%S&#x27;</span>,time.localtime(time.time()))</span><br><span class="line">            &#125;</span><br><span class="line">            request.websocket.send(json.dumps(dit))</span><br></pre></td></tr></table></figure></li><li><h3 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#websocket</span></span><br><span class="line">path(<span class="string">&#x27;test_socket&#x27;</span>,test_socket),</span><br><span class="line">path(<span class="string">&#x27;test_websocket&#x27;</span>,test_websocket),</span><br></pre></td></tr></table></figure></li><li><h3 id="定义前端发送消息的页面-–-socket-vue"><a href="#定义前端发送消息的页面-–-socket-vue" class="headerlink" title="定义前端发送消息的页面 – socket.vue"></a>定义前端发送消息的页面 – socket.vue</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;<span class="built_in">input</span> <span class="built_in">id</span>=<span class="string">&quot;chat-message-input&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> size=<span class="string">&quot;100&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;<span class="built_in">input</span> <span class="built_in">id</span>=<span class="string">&quot;chat-message-submit&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;Send&quot;</span> @click=<span class="string">&#x27;sendmessage()&#x27;</span>/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: <span class="string">&quot;socket&quot;</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    sendmessage() &#123;</span><br><span class="line"></span><br><span class="line">      window.s.send(document.getElementById(<span class="string">&quot;chat-message-input&quot;</span>).value);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    //生成socket对象</span><br><span class="line">    var socket = new WebSocket(<span class="string">&quot;ws://127.0.0.1:8000/z/test_socket/&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    socket.onopen = function () &#123;</span><br><span class="line">      console.log(<span class="string">&#x27;WebSocket open&#x27;</span>);//成功连接上Websocket</span><br><span class="line">    &#125;;</span><br><span class="line">    socket.onmessage = function (e) &#123;</span><br><span class="line">      console.log(<span class="string">&#x27;message: &#x27;</span> + e.data);//打印服务端返回的数据</span><br><span class="line">    &#125;;</span><br><span class="line">    socket.onclose = function (e) &#123;</span><br><span class="line">      console.log(e);</span><br><span class="line">      socket.close(); //关闭TCP连接</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (socket.readyState == WebSocket.OPEN) &#123;</span><br><span class="line">      socket.onopen();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    window.s = socket;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><h3 id="然后再定义一个页面，测试后台的主动推送-–-socket-push-vue"><a href="#然后再定义一个页面，测试后台的主动推送-–-socket-push-vue" class="headerlink" title="然后再定义一个页面，测试后台的主动推送 – socket_push.vue"></a>然后再定义一个页面，测试后台的主动推送 – socket_push.vue</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: <span class="string">&quot;socket_push&quot;</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    //生成socket对象</span><br><span class="line">    var socket = new WebSocket(<span class="string">&quot;ws://127.0.0.1:8000/z/test_websocket/&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    socket.onopen = function () &#123;</span><br><span class="line">      console.log(<span class="string">&#x27;WebSocket open&#x27;</span>);//成功连接上Websocket</span><br><span class="line">    &#125;;</span><br><span class="line">    socket.onmessage = function (e) &#123;</span><br><span class="line">      console.log(<span class="string">&#x27;message: &#x27;</span> + e.data);//打印服务端返回的数据</span><br><span class="line">    &#125;;</span><br><span class="line">    socket.onclose = function (e) &#123;</span><br><span class="line">      console.log(e);</span><br><span class="line">      socket.close(); //关闭TCP连接</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (socket.readyState == WebSocket.OPEN) &#123;</span><br><span class="line">      socket.onopen();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是Websocket&quot;&gt;&lt;a href=&quot;#什么是Websocket&quot; class=&quot;headerlink&quot; title=&quot;什么是Websocket&quot;&gt;&lt;/a&gt;什么是Websocket&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Websocket 是一种网络通信协议，是HTM</summary>
      
    
    
    
    <category term="通信协议" scheme="https://zhang-sitong.gitee.io/blogs/categories/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/"/>
    
    
    <category term="通信协议" scheme="https://zhang-sitong.gitee.io/blogs/tags/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>MySQL和NoSQL</title>
    <link href="https://zhang-sitong.gitee.io/blogs/lz_18/"/>
    <id>https://zhang-sitong.gitee.io/blogs/lz_18/</id>
    <published>2019-01-21T13:18:44.000Z</published>
    <updated>2021-04-20T23:51:34.596Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h4 id="什么是MySQL数据库"><a href="#什么是MySQL数据库" class="headerlink" title="什么是MySQL数据库"></a>什么是MySQL数据库</h4><blockquote><p>MySQL是一种开放源代码的关系型数据库管理系统，常用的数据库管理语言就是结构化查询语言–SQL了。<br>据了解，它是由瑞典MySQL AB公司开发，目前属于Oracle旗下产品，是最流行的关系型数据库管理系统之一。</p></blockquote><h4 id="使用MySQL数据库的优点"><a href="#使用MySQL数据库的优点" class="headerlink" title="使用MySQL数据库的优点"></a>使用MySQL数据库的优点</h4><blockquote><p>开源免费，使用简单方便，性能不比其他大型数据库差，占用空间小</p></blockquote><h4 id="使用MySQL数据库的缺点"><a href="#使用MySQL数据库的缺点" class="headerlink" title="使用MySQL数据库的缺点"></a>使用MySQL数据库的缺点</h4><blockquote><p>不易于维护，不能调试存储过程，不支持热备份</p></blockquote><h2 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h2><h4 id="什么是NoSQL数据库"><a href="#什么是NoSQL数据库" class="headerlink" title="什么是NoSQL数据库"></a>什么是NoSQL数据库</h4><blockquote><p>NoSQL是一种非关系型数据库，是对不同于传统的关系型数据库的数据库管理系统的统称，用于超大规模数据的存储（比如谷歌或Facebook）</p></blockquote><h4 id="使用NoSQL的优点"><a href="#使用NoSQL的优点" class="headerlink" title="使用NoSQL的优点"></a>使用NoSQL的优点</h4><blockquote><p>在多的数据下，读写性能优异<br>数据模型灵活<br>简单的扩展</p></blockquote><h4 id="使用NoSQL的缺点"><a href="#使用NoSQL的缺点" class="headerlink" title="使用NoSQL的缺点"></a>使用NoSQL的缺点</h4><blockquote><p>不提供对SQL的支持<br>支持的特性不够丰富<br>现有的产品不够成熟</p></blockquote><h4 id="为什么要使用NoSQL"><a href="#为什么要使用NoSQL" class="headerlink" title="为什么要使用NoSQL"></a>为什么要使用NoSQL</h4><blockquote><p>NoSQL数据库非常适合许多大数据，移动和web应用程序，传统关系数据库的可扩展性和响应能力无法满足其需求，所以NoSQL数据库通常比关系数据库响应速度更快且更易扩展</p></blockquote><h2 id="MySQL和NoSQL之间的区别"><a href="#MySQL和NoSQL之间的区别" class="headerlink" title="MySQL和NoSQL之间的区别"></a>MySQL和NoSQL之间的区别</h2><ul><li>MySQL中使用的标准语言是SQL；而NoSQL中缺乏标准的查询语言</li><li>MySQL的严格模式限制并不容易扩展，而NoSQL可以通过动态模式特性轻松扩展</li><li>MySQL中创建数据库之前需要详细的数据库模型，而在NoSQL数据库类型的情况下不需要详细的建模</li><li>MySQL是一个关系数据库，其设计约束灵活性较低；而NoSQL本质上是非关系型的，与MySQL相比，它提供了更灵活的设计</li></ul><p><code>MySQL体积小、速度快、成本低、结构稳定、便于查询，可以保证数据的一致性，但缺乏灵活性</code><br><code>NoSQL高性能、高扩展、高可用，不用局限于固定的结构，减少了时间和空间上的开销，却又很难保证数据一致</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;MySQL&quot;&gt;&lt;a href=&quot;#MySQL&quot; class=&quot;headerlink&quot; title=&quot;MySQL&quot;&gt;&lt;/a&gt;MySQL&lt;/h2&gt;&lt;h4 id=&quot;什么是MySQL数据库&quot;&gt;&lt;a href=&quot;#什么是MySQL数据库&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="数据库" scheme="https://zhang-sitong.gitee.io/blogs/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="数据库" scheme="https://zhang-sitong.gitee.io/blogs/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB安装及使用</title>
    <link href="https://zhang-sitong.gitee.io/blogs/lz_17/"/>
    <id>https://zhang-sitong.gitee.io/blogs/lz_17/</id>
    <published>2019-01-18T11:16:58.000Z</published>
    <updated>2021-04-20T23:51:34.069Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MongoDB安装"><a href="#MongoDB安装" class="headerlink" title="MongoDB安装"></a>MongoDB安装</h2><h3 id="MongoDB安装-1"><a href="#MongoDB安装-1" class="headerlink" title="MongoDB安装"></a>MongoDB安装</h3><pre><code>将MongoDB服务下载下来 安装到自己的电脑</code></pre><h3 id="MongoDB服务下载并安装"><a href="#MongoDB服务下载并安装" class="headerlink" title="MongoDB服务下载并安装"></a>MongoDB服务下载并安装</h3><ul><li>进入<a href="https://www.mongodb.com/try/download/community">https://www.mongodb.com/try/download/community</a>  这个链接之下，会看到如下界面（一定要选择windows）</li></ul><p><img src="https://i.loli.net/2021/03/17/VqUOvjn3hWi8dxM.png" alt="MongoDB安装1.png"></p><ul><li><p>下载完成后，会得到一个后缀为.msi的文件，双击进行安装即可<br><img src="https://i.loli.net/2021/03/17/7YIFDH4BtgESPh8.png" alt="MongoDB安装2.png"></p><ul><li><h4 id="以下是安装图解（要注意，除以下安装图解之外，全是next）："><a href="#以下是安装图解（要注意，除以下安装图解之外，全是next）：" class="headerlink" title="以下是安装图解（要注意，除以下安装图解之外，全是next）："></a>以下是安装图解（要注意，除以下安装图解之外，全是next）：</h4><p><img src="https://i.loli.net/2021/03/17/hsjJp2PZa9B783l.png" alt="MongoDB安装3.png"></p></li><li><h4 id="此时我安装的位置是默认磁盘C盘，你也可以选择你要安装的盘符路径"><a href="#此时我安装的位置是默认磁盘C盘，你也可以选择你要安装的盘符路径" class="headerlink" title="此时我安装的位置是默认磁盘C盘，你也可以选择你要安装的盘符路径"></a>此时我安装的位置是默认磁盘C盘，你也可以选择你要安装的盘符路径</h4><p><img src="https://i.loli.net/2021/03/17/gY8vIib6pohUPRB.png" alt="MongoDB安装4.png"></p></li><li><h4 id="下图一定要取消安装"><a href="#下图一定要取消安装" class="headerlink" title="下图一定要取消安装"></a>下图一定要取消安装</h4><p><img src="https://i.loli.net/2021/03/17/OpjMstBou9Zy4aQ.png" alt="MongoDB安装6.png"></p></li><li><h4 id="点击next，安装完成，会得到一个安装目录文件夹"><a href="#点击next，安装完成，会得到一个安装目录文件夹" class="headerlink" title="点击next，安装完成，会得到一个安装目录文件夹"></a>点击next，安装完成，会得到一个安装目录文件夹</h4><p><img src="https://i.loli.net/2021/03/17/JBphbwWZ6P8xkuD.png" alt="MongoDB安装5.png"></p></li><li><h4 id="此时我们需要在安装目录的data目录下创建一个db文件夹，然后使用命令行进入bin目录下，执行mongod-–dbpath-db文件夹位置（例-mongod-–dbpath-C-MongoDB-data-db"><a href="#此时我们需要在安装目录的data目录下创建一个db文件夹，然后使用命令行进入bin目录下，执行mongod-–dbpath-db文件夹位置（例-mongod-–dbpath-C-MongoDB-data-db" class="headerlink" title="此时我们需要在安装目录的data目录下创建一个db文件夹，然后使用命令行进入bin目录下，执行mongod –dbpath db文件夹位置（例: mongod –dbpath C:\MongoDB\data\db)"></a>此时我们需要在安装目录的data目录下创建一个db文件夹，然后使用命令行进入bin目录下，执行mongod –dbpath db文件夹位置（例: mongod –dbpath C:\MongoDB\data\db)</h4><p><img src="https://i.loli.net/2021/03/17/dLJwXAp31Temo7b.png" alt="MongoDB安装7.png"></p></li><li><h4 id="在bin目录下打开另一个命令行，执行mongo"><a href="#在bin目录下打开另一个命令行，执行mongo" class="headerlink" title="在bin目录下打开另一个命令行，执行mongo"></a>在bin目录下打开另一个命令行，执行mongo</h4><p><img src="https://i.loli.net/2021/03/17/GFSCHnDx9NRiAMg.png" alt="MongoDB安装8.png"></p></li><li><h4 id="上图所示，安装MongoDB服务已经成功，还可以直接打开bin目录下的mongo-exe程序，如显示下图，则为成功"><a href="#上图所示，安装MongoDB服务已经成功，还可以直接打开bin目录下的mongo-exe程序，如显示下图，则为成功" class="headerlink" title="上图所示，安装MongoDB服务已经成功，还可以直接打开bin目录下的mongo.exe程序，如显示下图，则为成功"></a>上图所示，安装MongoDB服务已经成功，还可以直接打开bin目录下的mongo.exe程序，如显示下图，则为成功</h4><p><img src="https://i.loli.net/2021/03/17/qSB4RmraD6scyjZ.png" alt="MongoDB安装9.png"></p><p><code>如上所示，MongoDB服务已经成功下载并安装</code></p></li></ul></li></ul><h3 id="MongoDB-Compass（可视化工具）安装"><a href="#MongoDB-Compass（可视化工具）安装" class="headerlink" title="MongoDB Compass（可视化工具）安装"></a>MongoDB Compass（可视化工具）安装</h3><ul><li><p>进入 <a href="https://www.mongodb.com/try/download/compass">https://www.mongodb.com/try/download/compass</a> 这个链接之下，会看到如下界面，进行下载即可<br><img src="https://i.loli.net/2021/03/17/swB2vmuCDMrJTLU.png" alt="MongoDB Compass安装1.png"></p></li><li><p>下载完成后，会得到一个压缩文件，解压到任意文件夹里即可（我是在D盘创建了一个MongoDB-compass文件夹，进行解压）<br><img src="https://i.loli.net/2021/03/17/R6aVmKYBUpActqu.png" alt="MongoDB Compass安装2.png"></p></li><li><h4 id="如上图所示，压缩包解压之后，上方有一个MongoDBCompass-exe文件，打开即可"><a href="#如上图所示，压缩包解压之后，上方有一个MongoDBCompass-exe文件，打开即可" class="headerlink" title="如上图所示，压缩包解压之后，上方有一个MongoDBCompass.exe文件，打开即可"></a>如上图所示，压缩包解压之后，上方有一个MongoDBCompass.exe文件，打开即可</h4><p><img src="https://i.loli.net/2021/03/17/XEOK4pVlhJWkIe6.png" alt="MongoDB Compass安装3.png"></p></li><li><h4 id="点击Connect进行连接"><a href="#点击Connect进行连接" class="headerlink" title="点击Connect进行连接"></a>点击Connect进行连接</h4><p><img src="https://i.loli.net/2021/03/17/3S8GZMJuQUqEslz.png" alt="MongoDB Compass安装4.png"></p></li></ul><p><code>如上所示，MongoDB-Compass 可视化工具安装成功</code></p><h2 id="MongoDB使用"><a href="#MongoDB使用" class="headerlink" title="MongoDB使用"></a>MongoDB使用</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><table>    <tr>        <th>命令</th>        <th>语法</th>    </tr>    <tr>        <td>展示所有数据库</td>        <td>show dbs</td>    </tr>    <tr>        <td>创建数据库</td>        <td>use 数据库名</td>    </tr>    <tr>        <td>查看当前所在数据库</td>        <td>db</td>    </tr>    <tr>        <td>创建集合</td>        <td>db.createCollection('名称')</td>    </tr>    <tr>        <td>展示集合</td>        <td>show 集合名</td>    </tr>    <tr>        <td>插入数据</td>        <td>db.集合.insert({...})</td>    </tr>    <tr>        <td>读取数据</td>        <td>db.集合.find()</td>    </tr>    <tr>        <td>读取指定数据</td>        <td>db.集合.find({id:1})</td>    </tr></table><h3 id="python操作MongoDB"><a href="#python操作MongoDB" class="headerlink" title="python操作MongoDB"></a>python操作MongoDB</h3><ul><li><h4 id="下载python中的MongoDB"><a href="#下载python中的MongoDB" class="headerlink" title="下载python中的MongoDB"></a>下载python中的MongoDB</h4><blockquote><p>pip install pymongo</p></blockquote></li><li><h4 id="下载完成之后，进行连接（此处要导包）"><a href="#下载完成之后，进行连接（此处要导包）" class="headerlink" title="下载完成之后，进行连接（此处要导包）"></a>下载完成之后，进行连接（此处要导包）</h4><blockquote><p>from pymongo import MongoClient<br>client = MongoClient(host=’127.0.0.1’, port=27017)</p></blockquote></li><li><h4 id="接下来需要进入我们在MongoDB创建的数据库（我创建的是z-Cate）"><a href="#接下来需要进入我们在MongoDB创建的数据库（我创建的是z-Cate）" class="headerlink" title="接下来需要进入我们在MongoDB创建的数据库（我创建的是z_Cate）"></a>接下来需要进入我们在MongoDB创建的数据库（我创建的是z_Cate）</h4><code>此处没有创建数据库的，需要手动创建MongoDB数据库（看上方的基本语法）</code><blockquote><p>db = client.z_Cate</p></blockquote></li><li><h4 id="指定集合"><a href="#指定集合" class="headerlink" title="指定集合"></a>指定集合</h4><blockquote><p>table = db.CateTemplate</p></blockquote></li><li><h4 id="建立好之后，就可以进行查询了"><a href="#建立好之后，就可以进行查询了" class="headerlink" title="建立好之后，就可以进行查询了"></a>建立好之后，就可以进行查询了</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">    <span class="comment"># 进入数据库</span></span><br><span class="line">    db = client.z_Cate</span><br><span class="line">    <span class="comment"># 集合</span></span><br><span class="line">    zst = db.CateTemplate</span><br><span class="line">    <span class="built_in">id</span> = request.GET.get(<span class="string">&#x27;id&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    wid = WorkOrderModel.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="built_in">id</span>).first()</span><br><span class="line">    data = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> zst.find(&#123;<span class="string">&#x27;wid&#x27;</span>: <span class="built_in">str</span>(wid.pid)&#125;):</span><br><span class="line">        data = <span class="built_in">eval</span>(i[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> Response(data)</span><br></pre></td></tr></table></figure></li></ul><hr><p><code>想要查看更多知识，请看以下链接</code><br>Python操作MongoDB：<a href="https://www.runoob.com/python3/python-mongodb.html">https://www.runoob.com/python3/python-mongodb.html</a><br>MongoDB介绍：<a href="https://www.runoob.com/mongodb/mongodb-tutorial.html">https://www.runoob.com/mongodb/mongodb-tutorial.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;MongoDB安装&quot;&gt;&lt;a href=&quot;#MongoDB安装&quot; class=&quot;headerlink&quot; title=&quot;MongoDB安装&quot;&gt;&lt;/a&gt;MongoDB安装&lt;/h2&gt;&lt;h3 id=&quot;MongoDB安装-1&quot;&gt;&lt;a href=&quot;#MongoDB安装-1&quot; c</summary>
      
    
    
    
    <category term="数据库" scheme="https://zhang-sitong.gitee.io/blogs/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="数据库" scheme="https://zhang-sitong.gitee.io/blogs/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>上下文管理</title>
    <link href="https://zhang-sitong.gitee.io/blogs/lz_16/"/>
    <id>https://zhang-sitong.gitee.io/blogs/lz_16/</id>
    <published>2018-11-01T11:54:13.000Z</published>
    <updated>2021-04-20T23:51:34.546Z</updated>
    
    <content type="html"><![CDATA[<h2 id="上下文管理"><a href="#上下文管理" class="headerlink" title="上下文管理"></a>上下文管理</h2><h4 id="with语句是什么"><a href="#with语句是什么" class="headerlink" title="with语句是什么"></a>with语句是什么</h4><ul><li>with是一种上下文管理协议，目的在于从流程图中把 try,except 和finally 关键字和资源分配释放相关代码统统去掉，简化try….except….finlally的处理流程</li><li>所以使用with处理的对象必须有enter()和exit()这两个方法<ul><li>with通过enter方法初始化（enter方法在语句体执行之前进入运行）</li><li>然后在exit中做善后以及处理异常（exit()方法在语句体执行完毕退出后运行）</li></ul></li></ul><h4 id="with语句使用场景"><a href="#with语句使用场景" class="headerlink" title="with语句使用场景"></a>with语句使用场景</h4><ul><li>with 语句适用于对资源进行访问的场合，确保不管使用过程中是否发生异常都会执行必要的“清理”操作，释放资源</li><li>比如文件使用后自动关闭、线程中锁的自动获取和释放等</li></ul><h4 id="with处理文件操作的实例"><a href="#with处理文件操作的实例" class="headerlink" title="with处理文件操作的实例"></a>with处理文件操作的实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/etc/passwd&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">  <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">    print(line)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这段代码的作用：打开一个文件，如果一切正常，把文件对象赋值给f，然后用迭代器遍历文件中每一行，当完成时，关闭文件；</span></span><br><span class="line"><span class="comment"># 而无论在这段代码的任何地方，如果发生异常，此时文件仍会被关闭。</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a2.py&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print( f.readlines())</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;a.py&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    f.read()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(print(e))</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;上下文管理&quot;&gt;&lt;a href=&quot;#上下文管理&quot; class=&quot;headerlink&quot; title=&quot;上下文管理&quot;&gt;&lt;/a&gt;上下文管理&lt;/h2&gt;&lt;h4 id=&quot;with语句是什么&quot;&gt;&lt;a href=&quot;#with语句是什么&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="Python基础" scheme="https://zhang-sitong.gitee.io/blogs/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Python" scheme="https://zhang-sitong.gitee.io/blogs/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python基础</title>
    <link href="https://zhang-sitong.gitee.io/blogs/lz_15/"/>
    <id>https://zhang-sitong.gitee.io/blogs/lz_15/</id>
    <published>2018-10-25T12:54:13.000Z</published>
    <updated>2021-04-20T23:51:34.637Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python基础"><a href="#Python基础" class="headerlink" title="Python基础"></a>Python基础</h2><ul><li><p><strong>列表常用方法</strong></p><table>  <tr>      <th>方法</th>      <th>作用</th>  </tr>  <tr>      <td>append</td>      <td>在列表末尾追加新的对象</td>  </tr>  <tr>      <td>count</td>      <td>统计某个元素在列表中出现的次数</td>  </tr>  <tr>      <td>extend</td>      <td>在列表末尾一次性追加多个值</td>  </tr>  <tr>      <td>index</td>      <td>找出某个值第一个匹配项的索引位置</td>  </tr>  <tr>      <td>insert</td>      <td>将对象插入到列表中</td>  </tr>  <tr>      <td>pop</td>      <td>移除列表中的一个元素（默认最后一个）</td>  </tr>  <tr>      <td>remove</td>      <td>移除列表中某个值的第一个匹配项</td>  </tr>  <tr>      <td>reverse</td>      <td>将元素反向存放</td>  </tr>  <tr>      <td>sort</td>      <td>在原位置对列表进行排序</td>  </tr></table></li><li><p><strong>字符串常用方法</strong></p><table>  <tr>      <th>方法</th>      <th>作用</th>  </tr>  <tr>      <td>find</td>      <td>在字符串中查找子串，返回子串所在位置的最左端索引，没有找到则返回-1</td>  </tr>  <tr>      <td>join</td>      <td>[是split方法的逆方法]连接序列中的元素（必须是字符串）</td>  </tr>  <tr>      <td>split</td>      <td>[是join方法的逆方法]用来将字符串分割成序列</td>  </tr>  <tr>      <td>strip</td>      <td>返回去除首位空格的字符串</td>  </tr>  <tr>      <td>replace</td>      <td>返回某字符串所有匹配项均被替换之后得到字符串</td>  </tr></table></li><li><p><strong>字典常用方法</strong></p><table>  <tr>      <th>方法</th>      <th>作用</th>  </tr>  <tr>      <td>clear</td>      <td>清除字典中所有的项</td>  </tr>  <tr>      <td>fromkeys</td>      <td>使用给定的键建立新的字典，每个键都对应一个默认的值None</td>  </tr>  <tr>      <td>get</td>      <td>访问字典项，如果访问字典中不存在的项时不会报错，金会返回None</td>  </tr>  <tr>      <td>pop</td>      <td>获得对应与给定键的值，然后将这个”键-值”对从字典中移除</td>  </tr>  <tr>      <td>update</td>      <td>利用一个字典项更新另一个字典，提供的字典中的项会被添加到旧的字典中，如有相同的键则会被覆盖</td>  </tr></table></li><li><p><strong>集合常用方法</strong></p><table>  <tr>      <th>方法</th>      <th>作用</th>  </tr>  <tr>      <td>set</td>      <td>去重</td>  </tr>  <tr>      <td>intersection</td>      <td>交集</td>  </tr>  <tr>      <td>union</td>      <td>并集</td>  </tr>  <tr>      <td>difference</td>      <td>差集</td>  </tr></table></li></ul><h2 id="eval函数"><a href="#eval函数" class="headerlink" title="eval函数"></a>eval函数</h2><blockquote><p>原样输出字符串，将字符串强转成它包含的数据类型</p></blockquote><h4 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h4><blockquote><p>a = “[1,2,3]” 字符串<br>eval(a)<br>a=[1,2,3] {返回的是一个列表}</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Python基础&quot;&gt;&lt;a href=&quot;#Python基础&quot; class=&quot;headerlink&quot; title=&quot;Python基础&quot;&gt;&lt;/a&gt;Python基础&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;列表常用方法&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
 </summary>
      
    
    
    
    <category term="Python基础" scheme="https://zhang-sitong.gitee.io/blogs/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Python" scheme="https://zhang-sitong.gitee.io/blogs/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>线程进程</title>
    <link href="https://zhang-sitong.gitee.io/blogs/lz_14/"/>
    <id>https://zhang-sitong.gitee.io/blogs/lz_14/</id>
    <published>2018-10-22T06:41:21.000Z</published>
    <updated>2021-04-20T23:51:34.469Z</updated>
    
    <content type="html"><![CDATA[<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><h4 id="什么是进程"><a href="#什么是进程" class="headerlink" title="什么是进程"></a>什么是进程</h4><ul><li>进程是资源分配的最小单位 [进程==火车]</li><li>正在进行的一个过程或者说一个任务。而负责执行任务则是cpu</li><li>进程适用于CPU密集型任务</li></ul><h4 id="什么是多进程"><a href="#什么是多进程" class="headerlink" title="什么是多进程"></a>什么是多进程</h4><blockquote><p>同时执行多个进程，一般是同时运行多个软件</p></blockquote><hr><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><h4 id="什么是线程"><a href="#什么是线程" class="headerlink" title="什么是线程"></a>什么是线程</h4><ul><li>操作系统调度的最小单位，是进程的实际运作单位，进程本身是无法执行的，必须依靠线程 [线程==车厢]</li><li>线程适用于IO密集型任务</li></ul><h4 id="什么是多线程"><a href="#什么是多线程" class="headerlink" title="什么是多线程"></a>什么是多线程</h4><blockquote><p>一个进程中同时有多个线程正在执行 如:去网吧上网，网吧能够让多个人同时上网</p></blockquote><h4 id="什么情况下使用多线程"><a href="#什么情况下使用多线程" class="headerlink" title="什么情况下使用多线程"></a>什么情况下使用多线程</h4><blockquote><p>程序包含复杂的计算任务时<br>处理速度较慢的外围设备（打印）<br>程序设计自身的需要</p></blockquote><h4 id="为什么需要多线程"><a href="#为什么需要多线程" class="headerlink" title="为什么需要多线程"></a>为什么需要多线程</h4><ul><li><p>对用户而言</p><ul><li>为了得到更好的系统服务</li></ul></li><li><p>对程序自身而言</p><ul><li>使任务可以尽快的完成，不用等待太久的时间，更有效的利用系统资源</li></ul></li></ul><blockquote><p>在一些等待的任务上，如用户输入，文件读取等，多线程就非常有用了</p></blockquote><h4 id="多线程的缺点"><a href="#多线程的缺点" class="headerlink" title="多线程的缺点"></a>多线程的缺点</h4><ul><li>使用太多的线程的话，会很耗费系统资源</li><li>影响系统性能</li><li>线程使用不当会发生很多问题的</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote><p>多线程是异步的，其实多线程不是几个线程在同时进行，而是系统不断地在各个线程之间来回的切换，给我们造成一种同时运行的错觉</p></blockquote><hr><ul><li>单进程单线程：一个人在一个桌子上吃菜</li><li>单进程多线程：多个人在同一个桌子上一起吃菜</li><li>多进程单线程：每个人在自己的桌子上吃菜</li></ul><hr><h2 id="CPU密集型"><a href="#CPU密集型" class="headerlink" title="CPU密集型"></a>CPU密集型</h2><blockquote><p>一个计算为主的程序称为CPU密集型程序，多线程跑的时候，可以充分利用起所有的cpu核心，<br>比如说4个核心的cpu,开4个线程的时候，可以同时跑4个线程的运算任务，此时是最大效率<br>但是如果线程远远超出cpu核心数量 反而会使得任务效率下降，因为频繁的切换线程也是要消耗时间的<br>对于cpu密集型的任务来说，线程数等于cpu数是最好的了。</p></blockquote><h2 id="IO密集型"><a href="#IO密集型" class="headerlink" title="IO密集型"></a>IO密集型</h2><blockquote><p>如果是一个磁盘或网络为主的程序，一个线程处在IO等待的时候，另一个线程还可以在CPU里面跑，<br>有时候CPU闲着没事干，所有的线程都在等着IO，这时候他们就是同时的了<br>IO的速度比CPU慢太多了。所以开多线程，比方说多线程网络传输，多线程往不同的目录写文件，等等<br>此时 线程数等于IO任务数是最好的</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;进程&quot;&gt;&lt;a href=&quot;#进程&quot; class=&quot;headerlink&quot; title=&quot;进程&quot;&gt;&lt;/a&gt;进程&lt;/h2&gt;&lt;h4 id=&quot;什么是进程&quot;&gt;&lt;a href=&quot;#什么是进程&quot; class=&quot;headerlink&quot; title=&quot;什么是进程&quot;&gt;&lt;/a&gt;什么是进</summary>
      
    
    
    
    <category term="Python基础" scheme="https://zhang-sitong.gitee.io/blogs/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Python" scheme="https://zhang-sitong.gitee.io/blogs/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>docker操作容器、镜像 / dockerfile</title>
    <link href="https://zhang-sitong.gitee.io/blogs/lz_13/"/>
    <id>https://zhang-sitong.gitee.io/blogs/lz_13/</id>
    <published>2018-10-18T04:38:51.000Z</published>
    <updated>2021-04-20T23:51:34.887Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是docker"><a href="#什么是docker" class="headerlink" title="什么是docker"></a>什么是docker</h2><blockquote><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口</p></blockquote><h2 id="docker-优点"><a href="#docker-优点" class="headerlink" title="docker-优点"></a>docker-优点</h2><ul><li>快速部署：短时间内可以部署成百上千个应⽤，更快速交付到线上</li><li>⾼效虚拟化：不需要额外hypervisor⽀持，基于linux内核实现应⽤虚拟化，相⽐虚拟机⼤幅提⾼<br>性能和效率</li><li>节省开⽀：提⾼服务器利⽤率，降低IT⽀出</li><li>简化配置：将运⾏环境打包保存⾄容器，使⽤时直接启动即可</li><li>环境统⼀：将开发，测试，⽣产的应⽤运⾏环境进⾏标准化和统⼀，减少环境不⼀样带来的各种问<br>题</li><li>快速迁移和扩展：可实现跨平台运⾏在物理机、虚拟机、公有云等环境，良好的兼容性可以⽅便将<br>应⽤从A宿主机迁移到B宿主机，甚⾄是A平台迁移到B平台</li></ul><h2 id="docker-三个基本概念"><a href="#docker-三个基本概念" class="headerlink" title="docker-三个基本概念"></a>docker-三个基本概念</h2><ul><li><h4 id="Image-镜像"><a href="#Image-镜像" class="headerlink" title="Image(镜像)"></a>Image(镜像)</h4><blockquote><p>Docker 镜像就是一个只读的模板，镜像可以用来创建 Docker 容器。Docker 提供了一个很简单的机制来创建镜像或者更新现有的镜像，用户甚至可以直接从其他人那里下载一个已经做好的镜像来直接使用。镜像是一种文件结构。Dockerfile中的每条命令都会在文件系统中创建一个新的层次结构，文件系统在这些层次上构建起来，镜像就构建于这些联合的文件系统之上。Docker官方网站专门有一个页面来存储所有可用的镜像，网址是：index.docker.io</p></blockquote></li><li><h4 id="Container-容器"><a href="#Container-容器" class="headerlink" title="Container(容器)"></a>Container(容器)</h4><blockquote><p>容器是从镜像创建的运行实例。它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。可以把容器看做是一个简易版的 Linux 环境，Docker 利用容器来运行应用</p></blockquote></li><li><h4 id="Repository-仓库"><a href="#Repository-仓库" class="headerlink" title="Repository(仓库)"></a>Repository(仓库)</h4>  <code>public(公有仓库)    private(私有仓库)</code><blockquote><p>仓库是集中存放镜像文件的场所，仓库注册服务器（Registry）上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）。目前，最大的公开仓库是 Docker Hub，存放了数量庞大的镜像供用户下载</p></blockquote></li></ul><hr><h2 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker-安装"></a>docker-安装</h2><p><code>在安装之前可以参考官方文档获取最新的docker支持情况：</code><br><a href="https://docs.docker.com/install/">https://docs.docker.com/install/</a></p><ul><li><h3 id="docker版本（CE-和-EE-两大版本）"><a href="#docker版本（CE-和-EE-两大版本）" class="headerlink" title="docker版本（CE 和 EE 两大版本）"></a>docker版本（CE 和 EE 两大版本）</h3><ul><li>CE 即社区版（免费，支持周期 7 个月）</li><li>EE 即企业版，强调安全，付费使用，支持周期 24 个月</li></ul></li><li><h3 id="docker安装-CentOS7"><a href="#docker安装-CentOS7" class="headerlink" title="docker安装-CentOS7"></a>docker安装-CentOS7</h3><ul><li><p>安装必要的⼀些系统⼯具</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure></li><li><p>添加软件源信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo https:<span class="comment">//mirrors.aliyun.com/dockerce/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure></li><li><p>更新并安装Docker-CE</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache fast yum -y install docker-ce</span><br></pre></td></tr></table></figure></li><li><p>开启Docker服务</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker start</span><br></pre></td></tr></table></figure><blockquote><p>在docker安装启动之后，默认会⽣成⼀个名称为docker0的⽹卡并且默认IP地址为172.17.0.1的⽹卡</p></blockquote></li><li><p>查看docker帮助⽂档</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker</span><br><span class="line">man docker</span><br><span class="line">docker --help</span><br><span class="line">man docker-COMMAND</span><br><span class="line">docker COMMAND --help</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="docker-镜像"><a href="#docker-镜像" class="headerlink" title="docker-镜像"></a>docker-镜像</h2><ul><li><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><table>  <tr>      <th>操作</th>      <th>命令</th>  </tr>  <tr>      <td>搜索镜像</td>      <td>docker search  [OPTIONS]  镜像名称</td>  </tr>  <tr>      <td>上传镜像</td>      <td>docker push  [OPTIONS]  NAME[:TAG]</td>  </tr>  <tr>      <td>下载镜像</td>      <td>docker pull  [OPTIONS]  NAME[:TAG]</td>  </tr>  <tr>      <td>提交镜像</td>      <td>docker commit [OPTIONS]  CONTAINER NAME[:TAG]</td>  </tr>  <tr>      <td>构建镜像</td>      <td>docker build  [OPTIONS]  PATH</td>  </tr>  <tr>      <td>增加镜像标签</td>      <td>docker tag SOURCE_IMAGE[:TAG]  TARGET_IMAGE[:TAG]</td>  </tr>  <tr>      <td>查看本地所有镜像</td>      <td>docker images  [OPTIONS]  [REPOSITORY[:TAG]]</td>  </tr>  <tr>      <td>删除指定的本地镜像</td>      <td>docker rmi [OPTIONS]  IMAGE  [IMAGE...]</td>  </tr></table></li><li><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><ul><li><p>检测云端镜像</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search 关键字</span><br></pre></td></tr></table></figure><p><code>如检索 &quot; mysql &quot;：[root@localhost ~]# docker search mysql</code></p></li><li><p>下载镜像</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 镜像名称:tag</span><br></pre></td></tr></table></figure><p><code>“ :tag ” 不写时默认下载最新版本的镜像，也可以自己指定 tag 从而下载指定版本的镜像，tag 名称可以从 Docker Hub 上自己查看</code></p></li><li><p>查看本地镜像</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure></li><li><p>删除镜像</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi image-id</span><br></pre></td></tr></table></figure></li></ul></li><li><h3 id="镜像下载加速"><a href="#镜像下载加速" class="headerlink" title="镜像下载加速"></a>镜像下载加速</h3><p>  <code>ustc：https://docker.mirrors.ustc.edu.cn</code></p><ul><li><p>使用 Maven 时会从 Maven 中央仓库下载依赖，默认从官方中央仓库下载时会很慢，于是大家就会修改配置文件，设置为国内的中央仓库下载地址，此时速度就没问题了</p></li><li><p>修改 /etc/docker/daemon.json 文件，没有时可以新建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>:[</span><br><span class="line">        <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span></span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重启docker服务</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">service docker restart</span><br></pre></td></tr></table></figure></li><li><p>启动完之后查看配置是否成功</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="docker-容器"><a href="#docker-容器" class="headerlink" title="docker-容器"></a>docker-容器</h2><p><code>软件镜像(Images)启动之后就会有一个对应的容器(Container)，镜像位于自己的容器中，容器之间相互隔离</code></p><ul><li><h3 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h3><table>  <tr>      <th>操作</th>      <th>命令</th>  </tr>  <tr>      <td>运行容器</td>      <td>docker run --name container-name -d image-name:tag</td>  </tr>  <tr>      <td>启动容器</td>      <td>docker start container-name/container-id</td>  </tr>  <tr>      <td>重启容器</td>      <td>docker restart container-name/container-id</td>  </tr>  <tr>      <td>查看容器列表</td>      <td>docker ps [option]</td>  </tr>  <tr>      <td>停止容器</td>      <td>docker stop container-name/container-id</td>  </tr>  <tr>      <td>删除容器</td>      <td>docker rm container-id</td>  </tr>  <tr>      <td>重命名容器</td>      <td>docker rename CONTAINER CONTAINER_NEW</td>  </tr>  <tr>      <td>进入容器</td>      <td>docker attach CONTAINER</td>  </tr>  <tr>      <td>执行容器命令</td>      <td>docker exec CONTAINER COMMAND</td>  </tr>  <tr>      <td>端口映射</td>      <td>docker run  --name myredis  -d -p 6379:6379 docker.io/redis</td>  </tr>  <tr>      <td>查看容器日志</td>      <td>docker logs container-name/container-id</td>  </tr></table></li><li><h3 id="常用操作-1"><a href="#常用操作-1" class="headerlink" title="常用操作"></a>常用操作</h3><ul><li><p>查看容器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p><code>加上 -a 参数可以查看所有容器</code></p></li><li><p>运行容器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name container-name:tag -d image-name</span><br></pre></td></tr></table></figure><p><code>--name：自定义容器名，不指定时，docker 会自动生成一个名称</code><br><code>-d：表示后台运行容器</code><br><code>image-name：指定运行的镜像名称以及 Tag</code></p></li><li><p>停止容器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop container-name|container-id</span><br></pre></td></tr></table></figure><p><code>指定容器名或者容器 id 即可</code></p></li><li><p>启动容器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start container-name|container-id</span><br></pre></td></tr></table></figure><p><code>指定容器名或者容器 id 即可</code></p></li><li><p>删除容器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm container-id</span><br></pre></td></tr></table></figure><p><code>根据 容器 id 进行删除容器，删除前必须先停止容器</code></p></li><li><p>查看容器日志</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs container-name|container-id</span><br></pre></td></tr></table></figure><p><code>指定容器名或者容器 id 即可</code></p></li></ul></li></ul><hr><h2 id="什么是dockerfile"><a href="#什么是dockerfile" class="headerlink" title="什么是dockerfile"></a>什么是dockerfile</h2><blockquote><p>Dockerfile 是自动构建 docker 镜像的配置文件， 用户可以使用 Dockerfile 快速创建自定义的镜像。Dockerfile 中的命令非常类似于 linux 下的 shell 命令<br>Dockerfile 可以自定义镜像，通过 Docker 命令去运行镜像，从而达到启动容器的目的<br><img src="https://i.loli.net/2021/02/07/Z1uWkhw6fCMDEtj.png" alt="dockerfile.png"></p></blockquote><h2 id="dockerfile基本结构"><a href="#dockerfile基本结构" class="headerlink" title="dockerfile基本结构"></a>dockerfile基本结构</h2><ul><li>基础镜像(父镜像)信息指令 FROM</li><li>维护者信息指令 MAINTAINER</li><li>镜像操作指令 RUN 、 EVN 、 ADD 和 WORKDIR 等</li><li>容器启动指令 CMD 、 ENTRYPOINT 和 USER 等</li></ul><h2 id="dockerfile常用指令"><a href="#dockerfile常用指令" class="headerlink" title="dockerfile常用指令"></a>dockerfile常用指令</h2><p><code>Dockerfile 的指令每执⾏⼀次都会在 docker 上新建⼀层。所以过多⽆意义的层，会造成镜像膨胀 过⼤</code></p><ul><li><h2 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h2><blockquote><p>定制镜像，需要先有⼀个基础镜像，在这个基础镜像上进⾏定制。FROM 就是指定基础镜像，此<br>指令必需放在有效指令的第⼀⾏</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM [--platform=&lt;platform&gt;] &lt;image&gt; [AS name]</span><br><span class="line">FROM [--platform=&lt;platform&gt;] &lt;image&gt; [:&lt;tag&gt;] [AS name]</span><br><span class="line">FROM [--platform=&lt;platform&gt;] &lt;image&gt; [@&lt;digest&gt;] [AS name]</span><br><span class="line"># --platform 指定镜像的平台</span><br><span class="line"># tag/digest默认为latest</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line">RUN echo <span class="string">&#x27;这是⼀个本地构建的nginx镜像&#x27;</span> &gt; <span class="regexp">/usr/</span>share/nginx/html/index.html</span><br></pre></td></tr></table></figure></li><li><h2 id="LABEL"><a href="#LABEL" class="headerlink" title="LABEL"></a>LABEL</h2><blockquote><p>可以指定镜像元数据，如：镜像作者等</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LABEL version=<span class="string">&quot;1.0&quot;</span></span><br><span class="line">LABEL description=<span class="string">&#x27;this is a content&#x27;</span></span><br></pre></td></tr></table></figure></li><li><h2 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h2><blockquote><p>⽤来执⾏命令、RUN 指令经常⽤来调⽤shell指令<br><code>注意：run可以写多个，每⼀个run指令都会建⽴⼀层，所以尽可能合并成⼀条指令</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RUN &lt;命令&gt;</span><br><span class="line">RUN [<span class="string">&quot;可执⾏⽂件&quot;</span>,<span class="string">&quot;参数1&quot;</span>,<span class="string">&quot;参数2&quot;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RUN echo <span class="string">&quot;hello world&quot;</span> &gt; <span class="regexp">/usr/</span>share/nginx/html/index.html</span><br><span class="line">RUN yum install epel-release \</span><br><span class="line"> &amp;&amp; yum install nginx \</span><br><span class="line"> &amp;&amp; yum install mysql</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN [<span class="string">&quot;/usr/bin/python3&quot;</span>,<span class="string">&quot;1.py&quot;</span>]</span><br></pre></td></tr></table></figure></li><li><h2 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h2><blockquote><p>复制本机的⽂件（以Dockfile所在⽬录相对路径）到容器中<br>1、可以是多个、以及使⽤通配符，通配符规则满⾜Go的filepath.Match 规则<br>2、使⽤ COPY 指令，源⽂件的各种元数据都会保留。⽐如读、写、执⾏权限、⽂件变更时间等<br>3、如果是⽬录，只复制⽬录内容，⽽⾮⽬录本身</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">COPY &lt;src&gt; &lt;dest&gt;</span><br><span class="line">COPY [<span class="string">&quot;src&quot;</span>,...<span class="string">&quot;dest&quot;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COPY /home/<span class="number">1.</span>py</span><br></pre></td></tr></table></figure></li><li><h2 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h2><blockquote><p>该命令可认为是增强版的COPY，不仅⽀持COPY，还⽀持解缩<br>可以将复制指定⽂件到容器中的，可以是Dockerfile所在⽬录的⼀个相对路径<br>也可是⼀个 URL；还可是⼀个 tar ⽂件（⾃动解压）<br>1、如果src是⽬录，只复制⽬录中的内容，⽽⾮⽬录本身<br>2、如果src是本地打包或压缩⽂件，如gzip, bzip2 ，xz ，将解包<br>3、如果src是⼀个 URL ，下载后的⽂件权限⾃动设置为 600</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ADD [--chown=&lt;user&gt;:&lt;group&gt;] &lt;src&gt;...&lt;dest&gt;</span><br><span class="line">ADD [--chown=&lt;user&gt;:&lt;group&gt;] [<span class="string">&quot;src&quot;</span>,...&lt;<span class="string">&quot;dest&quot;</span>&gt;]</span><br></pre></td></tr></table></figure></li><li><h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><blockquote><p>指定启动容器时默认执⾏的命令，也就是在run时执⾏<br>即：如果docker run没有指定任何的执⾏命令或者dockerfile⾥⾯也没有ENTRYPOINT，那么就会<br>使⽤执⾏CMD指定的默认的命令<br>每个 Dockerfile 只能有⼀条 CMD 命令。如指定了多条，只有最后⼀条被执⾏</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CMD [<span class="string">&quot;executable&quot;</span>, <span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span>]</span><br><span class="line">CMD &lt;shell&gt;</span><br><span class="line">CMD [<span class="string">&quot;shell&quot;</span>,<span class="string">&quot;args&quot;</span>...]</span><br></pre></td></tr></table></figure></li><li><h2 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h2><blockquote><p>功能类似于CMD，配置容器启动后执⾏的命令及参数，并且不可被 docker run 提供的参数覆<br>盖，⽽是追加<br>每个 Dockerfile 中只能有⼀个 ENTRYPOINT，当指定多个时，只有最后⼀个⽣效</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXTRYPOINT [<span class="string">&quot;executable&quot;</span>, <span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXTRYPOINT <span class="string">&quot;shutdown now&quot;</span></span><br></pre></td></tr></table></figure></li><li><h2 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h2><blockquote><p>指定⼀个环境变量，会被后续 RUN 指令使⽤，并在容器运⾏时保持</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENV &lt;key&gt; &lt;value&gt;</span><br><span class="line">ENV &lt;key1&gt;=&lt;value1&gt;</span><br></pre></td></tr></table></figure><ul><li>使用方式<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ENV VERSION <span class="number">1.0</span></span><br><span class="line"># 后续使⽤可以通过 $VERSION</span><br><span class="line">CMD <span class="string">&quot;echo $VERSION&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><h2 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h2><blockquote><p>声明端⼝<br>帮助镜像使⽤者理解这个镜像服务的守护端⼝，以⽅便配置映射<br>EXPOSE 仅仅是声明容器打算使⽤什么端⼝⽽已，并不会⾃动在宿主进⾏端⼝映射</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE &lt;端⼝<span class="number">1</span>&gt; [&lt;端⼝<span class="number">2</span>&gt;...]</span><br></pre></td></tr></table></figure></li><li><h2 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h2><blockquote><p>为后续的 RUN、CMD、ENTRYPOINT 指令配置⼯作⽬录，当容器运⾏后，进⼊容器内的默认⽬<br>录</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR /path</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="本篇博客就到这里"><a href="#本篇博客就到这里" class="headerlink" title="本篇博客就到这里~"></a>本篇博客就到这里~</h3><h3 id="如对docker感兴趣-可以查看docker官方文档哟：https-www-docker-com"><a href="#如对docker感兴趣-可以查看docker官方文档哟：https-www-docker-com" class="headerlink" title="如对docker感兴趣 可以查看docker官方文档哟：https://www.docker.com/"></a>如对docker感兴趣 可以查看docker官方文档哟：<a href="https://www.docker.com/">https://www.docker.com/</a></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是docker&quot;&gt;&lt;a href=&quot;#什么是docker&quot; class=&quot;headerlink&quot; title=&quot;什么是docker&quot;&gt;&lt;/a&gt;什么是docker&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Docker 是一个开源的应用容器引擎，让开发者可以打包他</summary>
      
    
    
    
    <category term="容器" scheme="https://zhang-sitong.gitee.io/blogs/categories/%E5%AE%B9%E5%99%A8/"/>
    
    
    <category term="容器" scheme="https://zhang-sitong.gitee.io/blogs/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>视频直播</title>
    <link href="https://zhang-sitong.gitee.io/blogs/lz_12/"/>
    <id>https://zhang-sitong.gitee.io/blogs/lz_12/</id>
    <published>2018-10-15T12:19:00.000Z</published>
    <updated>2021-04-20T23:51:34.381Z</updated>
    
    <content type="html"><![CDATA[<h2 id="直播"><a href="#直播" class="headerlink" title="直播"></a>直播</h2><ul><li><h3 id="直播：流式传输协议，传输非常短的一小截视频"><a href="#直播：流式传输协议，传输非常短的一小截视频" class="headerlink" title="直播：流式传输协议，传输非常短的一小截视频"></a>直播：流式传输协议，传输非常短的一小截视频</h3></li><li><h3 id="观看直播"><a href="#观看直播" class="headerlink" title="观看直播"></a>观看直播</h3><ul><li>浏览器：video标签</li><li>客户端工具：vlc播放器</li></ul></li><li><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><ul><li>rtmp协议</li></ul></li><li><h3 id="推流（使用OBS）"><a href="#推流（使用OBS）" class="headerlink" title="推流（使用OBS）"></a>推流（使用OBS）</h3><ul><li>将现场的视频信号传到网络的过程，对网络要求比较高</li><li><strong>OBS下载地址</strong>：<a href="https://obsproject.com/zh-cn">https://obsproject.com/zh-cn</a></li></ul></li><li><h3 id="拉流（使用浏览器或Vlc）"><a href="#拉流（使用浏览器或Vlc）" class="headerlink" title="拉流（使用浏览器或Vlc）"></a>拉流（使用浏览器或Vlc）</h3><ul><li>服务器已有直播内容，根据协议类型（如RTMP、RTP、RTSP、HTTP等），与服务器建立连接并接收数据，进行拉取的过程</li><li><strong>Vlc下载地址</strong>：<a href="https://www.videolan.org/vlc/">https://www.videolan.org/vlc/</a></li></ul></li></ul><h2 id="直播基本流程图"><a href="#直播基本流程图" class="headerlink" title="直播基本流程图"></a>直播基本流程图</h2><p><img src="https://i.loli.net/2021/02/05/Cfz3g426MyBaFJO.png" alt="视频直播流程.png"></p><h2 id="常见的直播协议"><a href="#常见的直播协议" class="headerlink" title="常见的直播协议"></a>常见的直播协议</h2><ul><li><h3 id="RTMP直播协议"><a href="#RTMP直播协议" class="headerlink" title="RTMP直播协议"></a>RTMP直播协议</h3><p>  <code>RTMP 是专为流媒体开发的协议，对底层的优化比其它协议更加优秀</code></p><ul><li><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><blockquote><p>它对 Adobe Flash 支持好<br>基本上所有的编码器（摄像头之类）都支持 RTMP 输出<br>另外RTMP适合长时间播放，即 10 天多连续播放没有出现问题，稳定<br>最后 RTMP 的延迟<strong>相对较低</strong>，一般延时在 1-3s 之间，一般的视频会议，互动式直播，完全是够用的</p></blockquote></li><li><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><blockquote><p>它是基于 TCP 传输，非公共端口，可能会被防火墙阻拦<br>RTMP 为 Adobe 私有协议，很多设备无法播放，兼容性不高<br>Html基础支持不好，无法直接使用HTML标签完成拉流</p></blockquote></li></ul></li><li><h3 id="HTTP-FLV直播协议"><a href="#HTTP-FLV直播协议" class="headerlink" title="HTTP-FLV直播协议"></a>HTTP-FLV直播协议</h3><p>  <code>FLV: 简单轻量、加载速度极快、播放快</code></p><ul><li><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><blockquote><p>可以直接通过http协议进行传输，http属于公共协议，公共端口：80<br>支持加密，使用https<br>兼容移动端设备，比如：安卓、ios</p></blockquote></li><li><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><blockquote><p>会缓存直播数据，保存直播传输过来的一段段flv文件，隐私保密不好<br>不能在大并发情况下使用</p></blockquote></li></ul></li><li><h3 id="HLS直播协议"><a href="#HLS直播协议" class="headerlink" title="HLS直播协议"></a>HLS直播协议</h3><p>  <code>苹果公司实现的基于 HTTP 的流媒体传输协议</code></p><ul><li><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><blockquote><p>数据通过 HTTP 协议传输，所以采用 HLS 时不用考虑防火墙或者代理的问题。<br>使用短时长的分片文件来播放，客户端可以平滑的切换码率，以适应不同带宽条件下的播放。<br>HLS 是苹果推出的流媒体协议，在 iOS 平台上可以获得天然的支持，采用系统提供的 AVPlayer 就能直接播放，不用自己开发播放器</p></blockquote></li><li><h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><blockquote><p>通常 HLS 直播延时会达到 20-30s，而高延时对于需要实时互动体验的直播来说是不可接受的。<br>HLS 基于短连接 HTTP，HTTP 是基于 TCP 的，这就意味着 HLS 需要不断地与服务器建立连接，TCP 每次建立连接时的三次握手、慢启动过程、断开连接时的四次挥手都会产生消耗</p></blockquote></li></ul></li></ul><hr><h2 id="云主机搭建直播"><a href="#云主机搭建直播" class="headerlink" title="云主机搭建直播"></a>云主机搭建直播</h2><h3 id="环境部署相关"><a href="#环境部署相关" class="headerlink" title="环境部署相关"></a>环境部署相关</h3><ul><li><h3 id="创建软件的存储位置"><a href="#创建软件的存储位置" class="headerlink" title="创建软件的存储位置"></a>创建软件的存储位置</h3>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/nginx-flv</span><br><span class="line"><span class="comment">// 创建了一个安装目录</span></span><br><span class="line">mkdir /home/flv-tools</span><br><span class="line"><span class="comment">// 存储所需软件</span></span><br></pre></td></tr></table></figure></li><li><h3 id="下载nginx"><a href="#下载nginx" class="headerlink" title="下载nginx"></a>下载nginx</h3><pre><code>  高性能多路复用服务器，让你支持同时响应多个客户连接  多线程、多进程开发模式</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="comment">//nginx.org/download/nginx-1.18.0.tar.gz</span></span><br></pre></td></tr></table></figure></li><li><h3 id="下载直播模块"><a href="#下载直播模块" class="headerlink" title="下载直播模块"></a>下载直播模块</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/winshining/nginx-http-flv-module</span></span><br></pre></td></tr></table></figure></li><li><h3 id="解压下载好的nginx"><a href="#解压下载好的nginx" class="headerlink" title="解压下载好的nginx"></a>解压下载好的nginx</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-<span class="number">1.18</span><span class="number">.0</span>.tar.gz nginx-<span class="number">1.18</span><span class="number">.0</span>/</span><br></pre></td></tr></table></figure></li><li><h3 id="解压下载好的rtmp直播模块"><a href="#解压下载好的rtmp直播模块" class="headerlink" title="解压下载好的rtmp直播模块"></a>解压下载好的rtmp直播模块</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip nginx-http-flv-<span class="built_in">module</span>.zip</span><br></pre></td></tr></table></figure></li><li><h3 id="进入解压好的nginx下目录，并进行安装前的配置"><a href="#进入解压好的nginx下目录，并进行安装前的配置" class="headerlink" title="进入解压好的nginx下目录，并进行安装前的配置"></a>进入解压好的nginx下目录，并进行安装前的配置</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd nginx-<span class="number">1.18</span><span class="number">.0</span></span><br><span class="line">./configure --prefix=<span class="regexp">/usr/</span>local/nginx-flv --add-<span class="built_in">module</span>=<span class="regexp">/home/</span>flv-tools/nginx-http-flv-<span class="built_in">module</span>-master</span><br><span class="line"># --prefix: 配置安装路径</span><br><span class="line">#--add-module: 添加安装插件</span><br></pre></td></tr></table></figure></li><li><h3 id="编译及安装"><a href="#编译及安装" class="headerlink" title="编译及安装"></a>编译及安装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">make </span><br><span class="line">make install </span><br><span class="line">------------</span><br><span class="line">make &amp;&amp; make install </span><br></pre></td></tr></table></figure></li></ul><h3 id="配置文件相关"><a href="#配置文件相关" class="headerlink" title="配置文件相关"></a>配置文件相关</h3><ul><li><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">rtmp_auto_push on;</span><br><span class="line">rtmp_auto_push_reconnect 1s;</span><br><span class="line">rtmp_socket_dir /tmp;</span><br><span class="line"></span><br><span class="line">rtmp&#123;</span><br><span class="line">out_queue <span class="number">4096</span>;</span><br><span class="line">out_cork <span class="number">8</span>;</span><br><span class="line">max_streams <span class="number">128</span>;</span><br><span class="line">timeout 15s;</span><br><span class="line">drop_idle_publisher 15s;</span><br><span class="line">log_interval 5s;</span><br><span class="line">log_size 1m;</span><br><span class="line">server &#123;</span><br><span class="line">listen 1935; # 推流端口</span><br><span class="line">server_name zege;</span><br><span class="line"></span><br><span class="line">application live &#123;# 配置推流地址</span><br><span class="line">live on; # 打开推流</span><br><span class="line"># gop_cache on;</span><br><span class="line"># rtmp://123.123.123.123:1935/live/test</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h3 id="配置文件http拉流部分"><a href="#配置文件http拉流部分" class="headerlink" title="配置文件http拉流部分"></a>配置文件http拉流部分</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">include       mime.types;</span><br><span class="line">default_type  application/octet-stream;</span><br><span class="line">sendfile        on;</span><br><span class="line">keepalive_timeout  <span class="number">65</span>;</span><br><span class="line">server &#123;</span><br><span class="line">listen       8080; # 拉流通过8080去拉流</span><br><span class="line"># http://123.123.123.123:8080/live/?port=1935&amp;stream=test</span><br><span class="line">server_name  localhost;</span><br><span class="line">location /live &#123;</span><br><span class="line">flv_live on;</span><br><span class="line">chunked_transfer_encoding  on;</span><br><span class="line">add_header <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">add_header <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="服务相关"><a href="#服务相关" class="headerlink" title="服务相关"></a>服务相关</h3><ul><li><h3 id="关闭旧有服务"><a href="#关闭旧有服务" class="headerlink" title="关闭旧有服务"></a>关闭旧有服务</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx-rtmp/sbin/nginx -s stop</span><br><span class="line">/usr/local/nginx-rtmp/sbin/nginx -s reload</span><br><span class="line"># 重启</span><br></pre></td></tr></table></figure></li><li><h3 id="开启新服务"><a href="#开启新服务" class="headerlink" title="开启新服务"></a>开启新服务</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx-flv/sbin/nginx -c /usr/local/nginx-flv/conf/nginx.conf</span><br></pre></td></tr></table></figure><code>记得打开阿里云的防火墙哦</code></li></ul><h3 id="推拉流地址"><a href="#推拉流地址" class="headerlink" title="推拉流地址"></a>推拉流地址</h3><ul><li><h3 id="推流地址"><a href="#推流地址" class="headerlink" title="推流地址"></a>推流地址</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rtmp:<span class="comment">//云主机的ip:端口/live/密钥</span></span><br></pre></td></tr></table></figure></li><li><h3 id="拉流地址"><a href="#拉流地址" class="headerlink" title="拉流地址"></a>拉流地址</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//云主机的ip:8080/live?port=端口&amp;app=live&amp;stream=密钥</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="Vue实现拉流"><a href="#Vue实现拉流" class="headerlink" title="Vue实现拉流"></a>Vue实现拉流</h2><ul><li><h3 id="安装flv-js开源工具，进行拉流，哔哩哔哩开源的拉流js"><a href="#安装flv-js开源工具，进行拉流，哔哩哔哩开源的拉流js" class="headerlink" title="安装flv.js开源工具，进行拉流，哔哩哔哩开源的拉流js"></a>安装flv.js开源工具，进行拉流，哔哩哔哩开源的拉流js</h3><code>video.js 对rtmp拉流</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install flv.js --save</span><br></pre></td></tr></table></figure></li><li><h3 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> flv <span class="keyword">from</span> <span class="string">&#x27;flv.js&#x27;</span></span><br></pre></td></tr></table></figure></li><li><h3 id="构建页面标签，播放标签"><a href="#构建页面标签，播放标签" class="headerlink" title="构建页面标签，播放标签"></a>构建页面标签，播放标签</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;video id=<span class="string">&quot;videoElement&quot;</span> controls muted&gt;</span><br><span class="line">  Your browser is too old which doesn<span class="string">&#x27;t support HTML5 video.</span></span><br><span class="line"><span class="string">&lt;/video&gt;</span></span><br></pre></td></tr></table></figure></li><li><h3 id="进行初始化"><a href="#进行初始化" class="headerlink" title="进行初始化"></a>进行初始化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> videoElement = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;videoElement&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> flvPlayer = flv.createPlayer(&#123;</span><br><span class="line">      type: <span class="string">&#x27;flv&#x27;</span>,</span><br><span class="line">      enableWorker: <span class="literal">true</span>,     <span class="comment">//浏览器端开启flv.js的worker,多进程运行flv.js</span></span><br><span class="line">      isLive: <span class="literal">true</span>,           <span class="comment">//直播模式</span></span><br><span class="line">      hasAudio: <span class="literal">false</span>,        <span class="comment">//关闭音频</span></span><br><span class="line">      hasVideo: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// cors: true,</span></span><br><span class="line">      stashInitialSize: <span class="number">128</span>,</span><br><span class="line">      enableStashBuffer: <span class="literal">false</span>, <span class="comment">//播放flv时，设置是否启用播放缓存，只在直播起作用。</span></span><br><span class="line">      <span class="comment">// url: &#x27;http://192.168.2.234/flv/323223618780001&#x27;</span></span><br><span class="line">      <span class="comment">// url: &#x27;http://39.105.79.238:8080/live?port=1935&amp;app=live&amp;stream=test&#x27;</span></span><br><span class="line">      url: <span class="string">&#x27;http://47.93.48.154:8080/live?port=1935&amp;app=live&amp;stream=test&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    flvPlayer.attachMediaElement(videoElement);</span><br><span class="line">    flvPlayer.load();</span><br><span class="line">    flvPlayer.play();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="这样一个简易视频直播就轻松实现啦"><a href="#这样一个简易视频直播就轻松实现啦" class="headerlink" title="这样一个简易视频直播就轻松实现啦"></a>这样一个简易视频直播就轻松实现啦</h3><h3 id="欢迎广大网友们前来留言哦"><a href="#欢迎广大网友们前来留言哦" class="headerlink" title="欢迎广大网友们前来留言哦"></a>欢迎广大网友们前来留言哦</h3><h3 id="我撤啦-拜拜喽小可爱们"><a href="#我撤啦-拜拜喽小可爱们" class="headerlink" title="我撤啦 拜拜喽小可爱们~"></a>我撤啦 拜拜喽小可爱们~</h3><p><img src="https://i.loli.net/2021/02/05/wB5ZX7QqmldRsFG.png" alt="拜拜.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;直播&quot;&gt;&lt;a href=&quot;#直播&quot; class=&quot;headerlink&quot; title=&quot;直播&quot;&gt;&lt;/a&gt;直播&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;直播：流式传输协议，传输非常短的一小截视频&quot;&gt;&lt;a href=&quot;#直播：流式传输协议，传输非常短的一小截视频&quot; </summary>
      
    
    
    
    <category term="Vue" scheme="https://zhang-sitong.gitee.io/blogs/categories/Vue/"/>
    
    
    <category term="vue" scheme="https://zhang-sitong.gitee.io/blogs/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>无限极分类 (自关联+递归)</title>
    <link href="https://zhang-sitong.gitee.io/blogs/lz_11/"/>
    <id>https://zhang-sitong.gitee.io/blogs/lz_11/</id>
    <published>2018-10-10T11:54:35.000Z</published>
    <updated>2021-04-20T23:51:34.285Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是无限极分类"><a href="#什么是无限极分类" class="headerlink" title="什么是无限极分类"></a>什么是无限极分类</h2><blockquote><p>一个类可以分成多个子类，然后一个子类又可以分另外多个子类这样无限分下去<br>就好像windows可以新建一个文件夹，然后在这个文件夹里又可以建一些文件夹，在文件夹底下还可以建一些文件夹一样</p></blockquote><ul><li><h3 id="画图来理解无限极分类"><a href="#画图来理解无限极分类" class="headerlink" title="画图来理解无限极分类"></a>画图来理解无限极分类</h3>  <img src="https://i.loli.net/2021/02/04/xmlV9grKeEu5dbn.png" alt="人物关系图.png"></li></ul><p><code>理解之后咱来用代码实现 请把目光转移致下方</code></p><hr><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul><li><h2 id="Django端"><a href="#Django端" class="headerlink" title="Django端"></a>Django端</h2><ul><li><h3 id="创建应用APP"><a href="#创建应用APP" class="headerlink" title="创建应用APP"></a>创建应用APP</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">py manage.py startapp InfinitusCate</span><br></pre></td></tr></table></figure></li><li><h3 id="在settings注册声明"><a href="#在settings注册声明" class="headerlink" title="在settings注册声明"></a>在settings注册声明</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;corsheaders&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;InfinitusCate&#x27;</span>,  <span class="comment">// 应用</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><h3 id="打开model-py-创建自关联模型类，并进行迁移"><a href="#打开model-py-创建自关联模型类，并进行迁移" class="headerlink" title="打开model.py 创建自关联模型类，并进行迁移"></a>打开model.py 创建自关联模型类，并进行迁移</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkOrderModel</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(primary_key=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;主键id&#x27;</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">&#x27;工单分类名&#x27;</span>)</span><br><span class="line">    pid = models.IntegerField(verbose_name=<span class="string">&#x27;父级id&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;workorder&#x27;</span></span><br><span class="line">        verbose_name = <span class="string">&#x27;工单分类&#x27;</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure><p><code>py manage.py makemigrations</code><br><code>py manage.py migrate</code></p></li><li><h3 id="创建序列化器"><a href="#创建序列化器" class="headerlink" title="创建序列化器"></a>创建序列化器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class WorkOrderSer(ModelSerializer):</span><br><span class="line">    class Meta:</span><br><span class="line">        model = WorkOrderModel</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br></pre></td></tr></table></figure></li><li><h3 id="在视图函数views-py里面写"><a href="#在视图函数views-py里面写" class="headerlink" title="在视图函数views.py里面写"></a>在视图函数views.py里面写</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">def xTree(datas):</span><br><span class="line">    lists = []</span><br><span class="line">    tree = &#123;&#125;</span><br><span class="line">    parent_id = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> datas:</span><br><span class="line">        item = i</span><br><span class="line">        tree[item[<span class="string">&#x27;id&#x27;</span>]] = item</span><br><span class="line">    root = None</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> datas:</span><br><span class="line">        obj = i</span><br><span class="line">        <span class="keyword">if</span> not obj[<span class="string">&#x27;pid&#x27;</span>]:</span><br><span class="line">            root = tree[obj[<span class="string">&#x27;id&#x27;</span>]]</span><br><span class="line">            lists.append(root)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            parent_id = obj[<span class="string">&#x27;pid&#x27;</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;childlist&#x27;</span> not <span class="keyword">in</span> tree[parent_id]:</span><br><span class="line">                tree[parent_id][<span class="string">&#x27;childlist&#x27;</span>] = []</span><br><span class="line">            tree[parent_id][<span class="string">&#x27;childlist&#x27;</span>].append(tree[obj[<span class="string">&#x27;id&#x27;</span>]])</span><br><span class="line">    <span class="keyword">return</span> lists</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class WorkOrderView(APIView):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        # 获取工单列表</span><br><span class="line">        workorder_list = WorkOrderModel.objects.all()</span><br><span class="line">        # 序列化</span><br><span class="line">        workorder_ser = WorkOrderSer(workorder_list, many=True)</span><br><span class="line">        z_list = xTree(workorder_ser.data)</span><br><span class="line">        <span class="keyword">return</span> Response(z_list)</span><br></pre></td></tr></table></figure></li><li><h3 id="最后记得配置路由哦"><a href="#最后记得配置路由哦" class="headerlink" title="最后记得配置路由哦"></a>最后记得配置路由哦</h3></li></ul></li></ul><hr><p><code>这样简易的一个无限极分类就实现啦~</code><br><code>拜拜喽 小伙伴们</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是无限极分类&quot;&gt;&lt;a href=&quot;#什么是无限极分类&quot; class=&quot;headerlink&quot; title=&quot;什么是无限极分类&quot;&gt;&lt;/a&gt;什么是无限极分类&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;一个类可以分成多个子类，然后一个子类又可以分另外多个子类这样无限分</summary>
      
    
    
    
    <category term="Django" scheme="https://zhang-sitong.gitee.io/blogs/categories/Django/"/>
    
    
    <category term="Django" scheme="https://zhang-sitong.gitee.io/blogs/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>webshell</title>
    <link href="https://zhang-sitong.gitee.io/blogs/lz_10/"/>
    <id>https://zhang-sitong.gitee.io/blogs/lz_10/</id>
    <published>2018-10-05T08:04:37.000Z</published>
    <updated>2021-04-20T23:51:34.850Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h2><ul><li><h4 id="什么是webshell"><a href="#什么是webshell" class="headerlink" title="什么是webshell"></a>什么是webshell</h4><blockquote><p>顾名思义，”web” - 显然需要服务器开放web服务,”shell” - 取得对服务器某种程度上操作权限<br>webshell常常被称为匿名用户(入侵者)通过web服务端口对web服务器有某种程度上操作的权限,由于其大多是以网页脚本的形式出现，也有人称之为网站后门工具</p></blockquote></li></ul><p><code>浏览器实现xshell的功能，实现黑窗口</code></p><ul><li><h4 id="什么是shell？"><a href="#什么是shell？" class="headerlink" title="什么是shell？"></a>什么是shell？</h4><ul><li>shell是一个集成了一堆linux命令的控制台界面</li></ul></li><li><h4 id="shell只有这一种吗？"><a href="#shell只有这一种吗？" class="headerlink" title="shell只有这一种吗？"></a>shell只有这一种吗？</h4><ol><li>SH：编程方面相当优秀，输入命令优秀</li><li>BASH：Linux系统中一个默认的Shell，命令特别多</li></ol></li></ul><h2 id="webshell的优点"><a href="#webshell的优点" class="headerlink" title="webshell的优点"></a>webshell的优点</h2><blockquote><p>webshell 最大的优点就是可以穿越防火墙，由于与被控制的服务器或远程主机交换的数据都是通过80端口传递的，因此不会被防火墙拦截。并且使用webshell一般不会在系统日志中留下记录，只会在网站的web日志中留下一些数据提交记录，没有经验的管理员是很难看出入侵痕迹的</p></blockquote><h2 id="webshell的分类"><a href="#webshell的分类" class="headerlink" title="webshell的分类"></a>webshell的分类</h2><ul><li><h4 id="根据文件大小分类"><a href="#根据文件大小分类" class="headerlink" title="根据文件大小分类"></a>根据文件大小分类</h4><ul><li>大马<br><code>体积大，包含很多功能</code><br><code>通常会调用系统的关键函数</code><br><code>通常以代码加密隐藏</code></li><li>小马<br><code>一句话木马也称为小马，即整个shell代码量只有一行，一般时系统执行函数</code></li></ul></li><li><h4 id="根据脚本名称分类"><a href="#根据脚本名称分类" class="headerlink" title="根据脚本名称分类"></a>根据脚本名称分类</h4><ul><li>jsp、asp、aspx、php</li></ul></li></ul><h2 id="webshell的功能"><a href="#webshell的功能" class="headerlink" title="webshell的功能"></a>webshell的功能</h2><ul><li><h4 id="站长工具"><a href="#站长工具" class="headerlink" title="站长工具"></a>站长工具</h4><blockquote><p>Webshell被站长常常用于网站管理、服务器管理等，根据FSO权限的不同，作用有在线编辑网页脚本、上传下载文件、查看数据库、执行任意程序命令等</p></blockquote></li><li><h4 id="持续远程访问"><a href="#持续远程访问" class="headerlink" title="持续远程访问"></a>持续远程访问</h4><blockquote><p>入侵者可以利用从而达到长期控制网站服务器的目的，若攻击者自行修复了漏洞，以确保没有其他人会利用该漏洞，攻击者可以低调的随时控制服务器。一些流行的webshell使用密码验证和其他技术来确保只有上传webshell的攻击者才能访问它</p></blockquote></li><li><h4 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h4><blockquote><p>在服务器没有配置错误的情况下，webshell将在web服务器的用户权限下运行，该用户权限是有限的。通过使用webshell，攻击者可以尝试通过利用系统上的本地漏洞来执行权限提升</p></blockquote></li><li><h4 id="极强的隐蔽性"><a href="#极强的隐蔽性" class="headerlink" title="极强的隐蔽性"></a>极强的隐蔽性</h4><blockquote><p>有些恶意网页脚本可以嵌套在正常网页中运行，且不容易被查杀。webshell还可以穿越服务器防火墙，由于与被控制的服务器或远程主机交互的数据都是通过80端口传递，因此不会被防火墙拦截，在没有记录流量的情况下，webshell使用post包发送，也不会被记录在系统日志中，只会在web日志中记录一些数据提交的记录</p></blockquote></li></ul><hr><h2 id="Vue端"><a href="#Vue端" class="headerlink" title="Vue端"></a>Vue端</h2><ul><li><h4 id="安装xterm"><a href="#安装xterm" class="headerlink" title="安装xterm"></a>安装xterm</h4><blockquote><p>cnpm install <a href="mailto:&#x78;&#116;&#x65;&#x72;&#109;&#x40;&#51;&#46;&#x31;&#x2e;&#x30;">&#x78;&#116;&#x65;&#x72;&#109;&#x40;&#51;&#46;&#x31;&#x2e;&#x30;</a> –save</p></blockquote></li><li><h4 id="导入css样式，main-js"><a href="#导入css样式，main-js" class="headerlink" title="导入css样式，main.js"></a>导入css样式，main.js</h4><blockquote><p>import ‘xterm/dist/xterm.css’ // 看这里，添加xterm css文件样式</p></blockquote></li><li><h4 id="在页面里放入一个id对的上的div"><a href="#在页面里放入一个id对的上的div" class="headerlink" title="在页面里放入一个id对的上的div"></a>在页面里放入一个id对的上的div</h4>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;terminal&quot;</span>&gt;</span><br><span class="line">&lt;!--            黑窗口--&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><h4 id="添加插件"><a href="#添加插件" class="headerlink" title="添加插件"></a>添加插件</h4>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Terminal &#125; <span class="keyword">from</span> <span class="string">&#x27;xterm&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> attach <span class="keyword">from</span> <span class="string">&#x27;xterm/lib/addons/attach/attach&#x27;</span> <span class="comment">// 安装插件适，可以使用attach去添加</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> fit <span class="keyword">from</span> <span class="string">&#x27;xterm/lib/addons/fit/fit&#x27;</span> <span class="comment">// fit进行自适应大小的</span></span><br><span class="line"></span><br><span class="line">Terminal.applyAddon(attach) <span class="comment">// 添加插件</span></span><br><span class="line">Terminal.applyAddon(fit) <span class="comment">// 添加插件</span></span><br></pre></td></tr></table></figure></li><li><h4 id="mounted初始化div标签id为terminal对象，成为一个真正的黑窗口"><a href="#mounted初始化div标签id为terminal对象，成为一个真正的黑窗口" class="headerlink" title="mounted初始化div标签id为terminal对象，成为一个真正的黑窗口"></a>mounted初始化div标签id为terminal对象，成为一个真正的黑窗口</h4>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取到了div标签</span></span><br><span class="line">        <span class="keyword">let</span> terminalContainer = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;terminal&#x27;</span>)</span><br><span class="line">        <span class="comment">// 初始化黑窗口对象</span></span><br><span class="line">        <span class="built_in">this</span>.term = <span class="keyword">new</span> Terminal(<span class="built_in">this</span>.terminal)</span><br><span class="line">        <span class="comment">// 打开这个对象</span></span><br><span class="line">        <span class="built_in">this</span>.term.open(terminalContainer)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> WebSocket(<span class="string">&#x27;ws://127.0.0.1:8000/webssh/&#x27;</span>)</span><br><span class="line">        <span class="built_in">this</span>.terminalSocket = <span class="keyword">new</span> WebSocket(<span class="string">&#x27;ws://127.0.0.1:8000/webssh/&#x27;</span>)</span><br><span class="line">        <span class="built_in">this</span>.terminalSocket.onopen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 连接成功触发该方法</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;websocket is Connected...&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.terminalSocket.onclose = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 连接关闭适触发的方法</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;websocket is Closed...&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.terminalSocket.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 连接出错触发的方法</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;damn Websocket is broken!&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.term.attach(<span class="built_in">this</span>.terminalSocket)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Django端"><a href="#Django端" class="headerlink" title="Django端"></a>Django端</h2><ul><li><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><blockquote><p>pip install dwebsocket <code>让django支持ws连接</code><br>pip install paramiko <code>连接远程服务器</code></p></blockquote></li><li><h4 id="paramiko连接linux"><a href="#paramiko连接linux" class="headerlink" title="paramiko连接linux"></a>paramiko连接linux</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> dwebsocket <span class="keyword">import</span> accept_websocket</span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line">def make_ssh(host, username, password, port=<span class="number">22</span>):</span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    :host 主机地址</span></span><br><span class="line"><span class="string">    :username 用户名，一般是root</span></span><br><span class="line"><span class="string">    :password 密码</span></span><br><span class="line"><span class="string">    :port ssh协议的端口,22</span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">    # 初始化一个ssh对象</span><br><span class="line">    sh = paramiko.SSHClient()</span><br><span class="line">    # 设置对象连接密钥规则</span><br><span class="line">    sh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">    # 连接</span><br><span class="line">    sh.connect(host, username=username, password=password)</span><br><span class="line">    # 生成shell对象，把命令执行结果，模拟成一个终端的返回，带上花里胡哨的颜色</span><br><span class="line">    channle = sh.invoke_shell(term=<span class="string">&#x27;xterm&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> channle</span><br></pre></td></tr></table></figure></li><li><h4 id="创建子线程-接收远程服务器"><a href="#创建子线程-接收远程服务器" class="headerlink" title="创建子线程 接收远程服务器"></a>创建子线程 接收远程服务器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">def recv_ssh_msg(channle, ws):</span><br><span class="line">    <span class="string">&#x27;&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">        channle: 建立好的SSH连接通道</span></span><br><span class="line"><span class="string">        这个函数会不停的接收ssh通道返回的命令</span></span><br><span class="line"><span class="string">        返回到前端的ws套接字里</span></span><br><span class="line"><span class="string">    &#x27;</span><span class="string">&#x27;&#x27;</span></span><br><span class="line">    # 判断shell连接对象是否没有退出</span><br><span class="line">    <span class="keyword">while</span> not channle.exit_status_ready():</span><br><span class="line">      # 接收过程可能会因为没有任何返回而报错</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            buf = channle.recv(1024) # 接收命令的执行结果</span><br><span class="line">            ws.send(buf) # 向Websocket通道返回</span><br><span class="line">        # 接收不到会报错，但是报错没关系，继续重新尝试接受</span><br><span class="line">        except:</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></li><li><h4 id="创建视图函数进行连接"><a href="#创建视图函数进行连接" class="headerlink" title="创建视图函数进行连接"></a>创建视图函数进行连接</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line">@accept_websocket</span><br><span class="line">def webssh(request):</span><br><span class="line">    <span class="keyword">if</span> request.is_websocket:</span><br><span class="line">        # 1. 获取到连接对象</span><br><span class="line">        ws = request.websocket</span><br><span class="line">        # 2. 初始化linux连接</span><br><span class="line">        channel = make_ssh()</span><br><span class="line">        # 3. 初始化linux数据接收线程，并开启</span><br><span class="line">        recv_thread = Thread(target=recv_ssh_msg, args=(channel, ws))</span><br><span class="line">        recv_thread.start()</span><br><span class="line">        while 1:  # 主线程: 只管发送</span><br><span class="line">            # 2. 阻塞ws接收发来的数据</span><br><span class="line">            cmd = ws.wait()</span><br><span class="line">            # cmd = ws.recv()</span><br><span class="line">            <span class="keyword">if</span> cmd:</span><br><span class="line">                channel.send(cmd)  # 发送到linux 去执行</span><br><span class="line">            else:  # 如果连接断开，那么cmd将会发一个空包</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        recv_thread.join()  # 回收子线程</span><br><span class="line">        ws.close()  # 关闭ws连接</span><br></pre></td></tr></table></figure></li></ul><hr><p>将会得到这个效果：<br><img src="https://i.loli.net/2021/02/03/je5wQRCZbX8WsrT.png" alt="webshell.png"></p><blockquote><p>本篇博客就写到这里啦 欢迎广大网友们进行留言或者补充哦</p></blockquote><p><code>下面提供前后端链接地址</code></p><h4 id="Django-git地址：https-gitee-com-zhang-sitong-blog-django-demo"><a href="#Django-git地址：https-gitee-com-zhang-sitong-blog-django-demo" class="headerlink" title="Django-git地址：https://gitee.com/zhang-sitong/blog-django-demo"></a>Django-git地址：<a href="https://gitee.com/zhang-sitong/blog-django-demo">https://gitee.com/zhang-sitong/blog-django-demo</a></h4><h4 id="Vue-git地址：https-gitee-com-zhang-sitong-blog-vue-demo"><a href="#Vue-git地址：https-gitee-com-zhang-sitong-blog-vue-demo" class="headerlink" title="Vue-git地址：https://gitee.com/zhang-sitong/blog-vue-demo"></a>Vue-git地址：<a href="https://gitee.com/zhang-sitong/blog-vue-demo">https://gitee.com/zhang-sitong/blog-vue-demo</a></h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;webshell&quot;&gt;&lt;a href=&quot;#webshell&quot; class=&quot;headerlink&quot; title=&quot;webshell&quot;&gt;&lt;/a&gt;webshell&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;什么是webshell&quot;&gt;&lt;a href=&quot;#什么是webshe</summary>
      
    
    
    
    <category term="工具 网页脚本" scheme="https://zhang-sitong.gitee.io/blogs/categories/%E5%B7%A5%E5%85%B7-%E7%BD%91%E9%A1%B5%E8%84%9A%E6%9C%AC/"/>
    
    
    <category term="工具 网页脚本" scheme="https://zhang-sitong.gitee.io/blogs/tags/%E5%B7%A5%E5%85%B7-%E7%BD%91%E9%A1%B5%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>redis键空间事件</title>
    <link href="https://zhang-sitong.gitee.io/blogs/lz_9/"/>
    <id>https://zhang-sitong.gitee.io/blogs/lz_9/</id>
    <published>2018-10-02T13:18:49.000Z</published>
    <updated>2021-04-20T23:51:34.754Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Redis"><a href="#什么是Redis" class="headerlink" title="什么是Redis"></a>什么是Redis</h2><p><code>上篇博客 “redis发布者订阅者” 已经介绍过啦，有兴趣的小伙伴可以翻翻看看哦</code></p><h2 id="什么是键空间"><a href="#什么是键空间" class="headerlink" title="什么是键空间"></a>什么是键空间</h2><blockquote><p>Redis是一个键值对(key-value pair)数据库服务器，服务器中的每个数据库都由一个redis.h/redisDb结构表示，redisDb结构都dict字典保存了数据库中的所有键值对，我们将这个字典称为键空间(key space)</p></blockquote><h2 id="什么是键空间通知"><a href="#什么是键空间通知" class="headerlink" title="什么是键空间通知"></a>什么是键空间通知</h2><blockquote><p>键空间通知使得客户端可以通过订阅频道或模式， 来接收那些以某种方式改动了 Redis 数据集的事件</p></blockquote><h2 id="键空间原理"><a href="#键空间原理" class="headerlink" title="键空间原理"></a>键空间原理</h2><h4 id="键空间和用户所见对数据库是直接对应的："><a href="#键空间和用户所见对数据库是直接对应的：" class="headerlink" title="键空间和用户所见对数据库是直接对应的："></a>键空间和用户所见对数据库是直接对应的：</h4><blockquote><p>键空间的键也就是数据库的键，每个键都是一个字符串对象<br>键空间的值也就是数据库的值，每个值可以是字符串对象，列表对象，哈希表对象，集合对象和有序集合对象在内的任意一种Redis对象 </p></blockquote><hr><h2 id="启用键空间通知"><a href="#启用键空间通知" class="headerlink" title="启用键空间通知"></a>启用键空间通知</h2><ul><li><h4 id="默认情况下，禁用键空间事件通知，可以在redis-conf或redis-cli中启用"><a href="#默认情况下，禁用键空间事件通知，可以在redis-conf或redis-cli中启用" class="headerlink" title="默认情况下，禁用键空间事件通知，可以在redis.conf或redis-cli中启用"></a>默认情况下，禁用键空间事件通知，可以在redis.conf或redis-cli中启用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Lenovo&gt; redis-cli config set notify-keyspace-events KEA</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p><code>该KEA字符串意味着每一个可能的事件被启用</code></p></li><li><h4 id="检查事件是否正常"><a href="#检查事件是否正常" class="headerlink" title="检查事件是否正常"></a>检查事件是否正常</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Lenovo&gt;redis-cli --csv psubscribe <span class="string">&#x27;*&#x27;</span></span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line"><span class="string">&quot;psubscribe&quot;</span>,<span class="string">&quot;&#x27;*&#x27;&quot;</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><p><code>psubscribe &#39;*&#39;意味着我们想要使用模式订阅所有事件*</code></p></li><li><h4 id="打开终端2输入-set-key1-value1"><a href="#打开终端2输入-set-key1-value1" class="headerlink" title="打开终端2输入 set key1 value1"></a>打开终端2输入 set key1 value1</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Lenovo&gt;redis-cli</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; set key1 value1</span><br><span class="line">OK</span><br></pre></td></tr></table></figure></li><li><h4 id="再打开终端1会看到："><a href="#再打开终端1会看到：" class="headerlink" title="再打开终端1会看到："></a>再打开终端1会看到：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Lenovo&gt;redis-cli --csv psubscribe <span class="string">&#x27;*&#x27;</span>     </span><br><span class="line">Reading messages... (press Ctrl-C to quit)  </span><br><span class="line"><span class="string">&quot;psubscribe&quot;</span>,<span class="string">&quot;*&quot;</span>,<span class="number">1</span></span><br><span class="line"><span class="string">&quot;pmessage&quot;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;__keyspace@0__:key1&quot;</span>,<span class="string">&quot;set&quot;</span></span><br><span class="line"><span class="string">&quot;pmessage&quot;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;__keyevent@0__:set&quot;</span>,<span class="string">&quot;key1</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="事件的类型"><a href="#事件的类型" class="headerlink" title="事件的类型"></a>事件的类型</h2><p>对于每个修改数据库的操作，键空间通知都会发送<strong>两种不同类型的事件</strong><br>比如说，对0号数据库的键 mykey 执行 DEL key [key …] 命令时，系统将分发两条消息，相当于执行以下两个 PUBLISH channel message 命令：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PUBLISH __keyspace@0__:mykey del</span><br><span class="line">PUBLISH __keyevent@0__:mykey zst</span><br></pre></td></tr></table></figure><blockquote><p><strong>keyspace@0</strong>:mykey 可以接收 0 号数据库中所有修改键 mykey 的事件<br><strong>keyevent@0</strong>:del 则可以接收 0 号数据库中所有执行 del 命令的键<br>以 keyspace 为前缀的频道被称为键空间通知<br>以 keyevent 为前缀的频道则被称为键事件通知</p></blockquote><h2 id="键空间配置"><a href="#键空间配置" class="headerlink" title="键空间配置"></a>键空间配置</h2><blockquote><p>因为开启键空间通知功能需要消耗一些CPU，所以在默认配置下，该功能处于关闭状态<br>可以通过修改 redis.conf 文件，或者直接使用 CONFIG SET 命令来开启或关闭键空间通知功能:</p></blockquote><ul><li>当 notify-keyspace-events 选项的参数为空字符串时，功能关闭</li><li>当参数不是空字符串时，功能开启</li></ul><h4 id="notify-keyspace-events-的参数可以是以下字符的任意组合，-它指定了服务器该发送哪些类型的通知："><a href="#notify-keyspace-events-的参数可以是以下字符的任意组合，-它指定了服务器该发送哪些类型的通知：" class="headerlink" title="notify-keyspace-events 的参数可以是以下字符的任意组合， 它指定了服务器该发送哪些类型的通知："></a>notify-keyspace-events 的参数可以是以下字符的任意组合， 它指定了服务器该发送哪些类型的通知：</h4><table>    <tr>        <th>字符</th>        <th>通知</th>    </tr>    <tr>        <td>K</td>        <td>键空间通知，所有通知以 __keyspace@<db>__ 为前缀</td>    </tr>    <tr>        <td>E</td>        <td>键事件通知，所有通知以 __keyevent@<db>__ 为前缀</td>    </tr>    <tr>        <td>g</td>        <td>DEL 、 EXPIRE 、 RENAME 等类型无关的通用命令的通知</td>    </tr>    <tr>        <td>$</td>        <td>字符串命令的通知</td>    </tr>    <tr>        <td>l</td>        <td>列表命令的通知</td>    </tr>    <tr>        <td>s</td>        <td>集合命令的通知</td>    </tr>    <tr>        <td>h</td>        <td>哈希命令的通知</td>    </tr>    <tr>        <td>z</td>        <td>有序集合命令的通知</td>    </tr>    <tr>        <td>x</td>        <td>过期事件：每当有过期键被删除时发送</td>    </tr>    <tr>        <td>e</td>        <td>驱逐(evict)事件：每当有键因为 maxmemory 政策而被删除时发送</td>    </tr>    <tr>        <td>A</td>        <td>参数 g$lshzxe 的别名，即all</td>    </tr></table><hr><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul><li><h2 id="One"><a href="#One" class="headerlink" title="One"></a>One</h2><ul><li><h4 id="redis发布所有通知，客户端1001订阅所有消息"><a href="#redis发布所有通知，客户端1001订阅所有消息" class="headerlink" title="redis发布所有通知，客户端1001订阅所有消息"></a>redis发布所有通知，客户端1001订阅所有消息</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; config set notify-keyspace-events KEA</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; psubscribe __key*@0__:*</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;psubscribe&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;__key*@0__:*&quot;</span></span><br><span class="line"><span class="number">3</span>) (integer) <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><h4 id="在客户端1002上执行set和del命令"><a href="#在客户端1002上执行set和del命令" class="headerlink" title="在客户端1002上执行set和del命令"></a>在客户端1002上执行set和del命令</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; set msg <span class="string">&quot;hi sister&quot;</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; del msg</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; del msg</span><br><span class="line">(integer) <span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><h4 id="客户端1001的内容如下"><a href="#客户端1001的内容如下" class="headerlink" title="客户端1001的内容如下"></a>客户端1001的内容如下</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) <span class="string">&quot;pmessage&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;__key*@0__:*&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;__keyspace@0__:msg&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;set&quot;</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;pmessage&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;__key*@0__:*&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;__keyevent@0__:set&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;msg&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;pmessage&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;__key*@0__:*&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;__keyspace@0__:msg&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;del&quot;</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;pmessage&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;__key*@0__:*&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;__keyevent@0__:del&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;msg&quot;</span></span><br></pre></td></tr></table></figure><code>客户端1001收到了keyspace和keyevent消息</code></li></ul></li><li><h2 id="Two"><a href="#Two" class="headerlink" title="Two"></a>Two</h2><ul><li><h4 id="redis仅发布keyspace通知，而客户端1001订阅所有消息类型"><a href="#redis仅发布keyspace通知，而客户端1001订阅所有消息类型" class="headerlink" title="redis仅发布keyspace通知，而客户端1001订阅所有消息类型"></a>redis仅发布keyspace通知，而客户端1001订阅所有消息类型</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; config set notify-keyspace-events KA</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; psubscribe __key*@0__:*</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;psubscribe&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;__key*@0__:*&quot;</span></span><br><span class="line"><span class="number">3</span>) (integer) <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><h4 id="在客户端1002也执行以上操作，再来看客户端1001的内容"><a href="#在客户端1002也执行以上操作，再来看客户端1001的内容" class="headerlink" title="在客户端1002也执行以上操作，再来看客户端1001的内容"></a>在客户端1002也执行以上操作，再来看客户端1001的内容</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) <span class="string">&quot;pmessage&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;__key*@0__:*&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;__keyspace@0__:msg&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;set&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;pmessage&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;__key*@0__:*&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;__keyspace@0__:msg&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;del&quot;</span></span><br></pre></td></tr></table></figure><code>客户端1001订阅了所有消息，但是Redis仅发布了keyspace事件 在客户端1002上执行了两次del操作，只有第一个del成功执行了，从而产生了一个事件</code></li></ul></li><li><h2 id="Three"><a href="#Three" class="headerlink" title="Three"></a>Three</h2><ul><li><h4 id="redis发布所有通知，客户端1001仅订阅keyspace消息"><a href="#redis发布所有通知，客户端1001仅订阅keyspace消息" class="headerlink" title="redis发布所有通知，客户端1001仅订阅keyspace消息"></a>redis发布所有通知，客户端1001仅订阅keyspace消息</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; config set notify-keyspace-events KEA</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; psubscribe __keyspace@0__:*</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;psubscribe&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;__keyspace@0__:*&quot;</span></span><br><span class="line"><span class="number">3</span>) (integer) <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><h4 id="在客户端1002也执行以上操作，再来看客户端1001的内容-1"><a href="#在客户端1002也执行以上操作，再来看客户端1001的内容-1" class="headerlink" title="在客户端1002也执行以上操作，再来看客户端1001的内容"></a>在客户端1002也执行以上操作，再来看客户端1001的内容</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) <span class="string">&quot;pmessage&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;__keyspace@0__:*&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;__keyspace@0__:msg&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;set&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;pmessage&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;__keyspace@0__:*&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;__keyspace@0__:msg&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;del&quot;</span></span><br></pre></td></tr></table></figure><code>客户端1001收到了keyspace消息</code></li></ul></li><li><h2 id="Four"><a href="#Four" class="headerlink" title="Four"></a>Four</h2><ul><li><h4 id="redis仅发布字符串特定类型的通知，客户端1001订阅所有类型的消息"><a href="#redis仅发布字符串特定类型的通知，客户端1001订阅所有类型的消息" class="headerlink" title="redis仅发布字符串特定类型的通知，客户端1001订阅所有类型的消息"></a>redis仅发布字符串特定类型的通知，客户端1001订阅所有类型的消息</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; config set notify-keyspace-events KE$</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;  psubscribe __key*@0__:*</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;psubscribe&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;__key*@0__:*&quot;</span></span><br><span class="line"><span class="number">3</span>) (integer) <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><h4 id="在客户端1002上执行lpush、set和del命令"><a href="#在客户端1002上执行lpush、set和del命令" class="headerlink" title="在客户端1002上执行lpush、set和del命令"></a>在客户端1002上执行lpush、set和del命令</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lpush alist <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; set msg <span class="string">&quot;hello brother&quot;</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; del msg</span><br><span class="line">(integer) <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><h4 id="客户端1001的内容如下-1"><a href="#客户端1001的内容如下-1" class="headerlink" title="客户端1001的内容如下"></a>客户端1001的内容如下</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) <span class="string">&quot;pmessage&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;__key*@0__:*&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;__keyspace@0__:msg&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;set&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;pmessage&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;__key*@0__:*&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;__keyevent@0__:set&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;msg&quot;</span></span><br></pre></td></tr></table></figure><code>针对字符串，产生了keyspace和keyevent类型的消息 针对列表的lpush命令并没有产生消息 del命令是非特定类型的命令，也没有产生消息</code></li></ul></li></ul><hr><blockquote><p>PS：今天的博客就到这里啦，如有疑问请留言哦！</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是Redis&quot;&gt;&lt;a href=&quot;#什么是Redis&quot; class=&quot;headerlink&quot; title=&quot;什么是Redis&quot;&gt;&lt;/a&gt;什么是Redis&lt;/h2&gt;&lt;p&gt;&lt;code&gt;上篇博客 “redis发布者订阅者” 已经介绍过啦，有兴趣的小伙伴可以翻翻看看哦</summary>
      
    
    
    
    <category term="数据库" scheme="https://zhang-sitong.gitee.io/blogs/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="数据库" scheme="https://zhang-sitong.gitee.io/blogs/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
</feed>
