<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欢迎来到小张的博客</title>
  
  
  <link href="https://zhang-sitong.gitee.io/blogs/atom.xml" rel="self"/>
  
  <link href="https://zhang-sitong.gitee.io/blogs/"/>
  <updated>2021-01-26T08:03:56.666Z</updated>
  <id>https://zhang-sitong.gitee.io/blogs/</id>
  
  <author>
    <name>Z_SiTong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue路由钩子</title>
    <link href="https://zhang-sitong.gitee.io/blogs/2021/01/26/2%E3%80%81vue%E8%B7%AF%E7%94%B1%E9%92%A9%E5%AD%90/"/>
    <id>https://zhang-sitong.gitee.io/blogs/2021/01/26/2%E3%80%81vue%E8%B7%AF%E7%94%B1%E9%92%A9%E5%AD%90/</id>
    <published>2021-01-26T06:19:18.000Z</published>
    <updated>2021-01-26T08:03:56.666Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、路由钩子函数相关概念"><a href="#一、路由钩子函数相关概念" class="headerlink" title="一、路由钩子函数相关概念"></a>一、路由钩子函数相关概念</h2><ul><li>什么情况下要使用路由的钩子函数？<ul><li>在路由跳转的时候，我们需要一些权限判断或者其他操作，这个时候就需要使用路由的钩子函数</li></ul></li><li>路由钩子函数的定义:<ul><li>路由钩子主要是给使用者在路由发生变化时进行一些特殊的处理而定义的函数</li></ul></li></ul><h2 id="二、路由钩子的分类"><a href="#二、路由钩子的分类" class="headerlink" title="二、路由钩子的分类"></a>二、路由钩子的分类</h2><h4 id="1、全局路由钩子"><a href="#1、全局路由钩子" class="headerlink" title="1、全局路由钩子"></a>1、全局路由钩子</h4><blockquote><p>在初始化VueRouter以后，直接使用router实例进行注册<br>  包括两个钩子：beforeEach、afterEach（每个路由切换前或者切换后调用）</p></blockquote><h4 id="2、单个路由钩子"><a href="#2、单个路由钩子" class="headerlink" title="2、单个路由钩子"></a>2、单个路由钩子</h4><blockquote><p>写在路由配置中，只有访问到这个路径，才能触发钩子函数<br> 包括两个钩子：beforeEnter、beforeLeave</p></blockquote><h4 id="3、组件内路由钩子"><a href="#3、组件内路由钩子" class="headerlink" title="3、组件内路由钩子"></a>3、组件内路由钩子</h4><blockquote><p>这个钩子要在组件内定义<br> 包括三个钩子：beforeRouteEnter、beforeRouteUpdate、beforeRouteLeave</p></blockquote><hr><p>（1） 路由对象是在使用vue-route启动应用时，每个匹配的组件实例都会被注入router的对象，称之为路由对象。<br>在组件内部可以通过this.$route 的方式调用<br>（2）路由对象有： $route.path , $route.params, $route.query, $route.router等属性</p><h2 id="三、代码演示"><a href="#三、代码演示" class="headerlink" title="三、代码演示"></a>三、代码演示</h2><ul><li><h3 id="全局路由钩子"><a href="#全局路由钩子" class="headerlink" title="全局路由钩子"></a>全局路由钩子</h3><ul><li><h4 id="router-beforeEach（（to-from-next）-gt-）：全局前置守卫"><a href="#router-beforeEach（（to-from-next）-gt-）：全局前置守卫" class="headerlink" title="router.beforeEach（（to,from,next）=&gt;{ }）：全局前置守卫"></a>router.beforeEach（（to,from,next）=&gt;{ }）：全局前置守卫</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="function"><span class="keyword">function</span> (<span class="params">to,<span class="keyword">from</span>,next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(to);  <span class="comment">//到达的路由</span></span><br><span class="line">  <span class="built_in">console</span>.log(next);<span class="comment">//跳转到其他路由</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">from</span>);<span class="comment">//离开的路由</span></span><br><span class="line">  next();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><h4 id="router-afterEach（（to-from）-gt-）：全局后置钩子"><a href="#router-afterEach（（to-from）-gt-）：全局后置钩子" class="headerlink" title="router.afterEach（（to,from）=&gt;{ }）：全局后置钩子"></a>router.afterEach（（to,from）=&gt;{ }）：全局后置钩子</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">router.afterEach(<span class="function"><span class="keyword">function</span> (<span class="params">to,<span class="keyword">from</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(to);  <span class="comment">//到达的路由</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">from</span>);<span class="comment">//离开的路由</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><h3 id="单个路由钩子"><a href="#单个路由钩子" class="headerlink" title="单个路由钩子"></a>单个路由钩子</h3><ul><li><h4 id="beforeEnter"><a href="#beforeEnter" class="headerlink" title="beforeEnter"></a>beforeEnter</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router (&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">&#x27;/index&#x27;</span>,</span><br><span class="line">            component: Index,</span><br><span class="line">            beforeEnter: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">            </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><h4 id="beforeLeave"><a href="#beforeLeave" class="headerlink" title="beforeLeave"></a>beforeLeave</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router (&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">&#x27;/index&#x27;</span>,</span><br><span class="line">            component: Index,</span><br><span class="line">            beforeLeave: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">            </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><h3 id="组件内路由钩子"><a href="#组件内路由钩子" class="headerlink" title="组件内路由钩子"></a>组件内路由钩子</h3><ul><li><h4 id="beforeRouteEnter-进入这个组件路由之前"><a href="#beforeRouteEnter-进入这个组件路由之前" class="headerlink" title="beforeRouteEnter: 进入这个组件路由之前"></a>beforeRouteEnter: 进入这个组件路由之前</h4><h4 id="beforeRouteLeave：离开这个组件路由"><a href="#beforeRouteLeave：离开这个组件路由" class="headerlink" title="beforeRouteLeave：离开这个组件路由"></a>beforeRouteLeave：离开这个组件路由</h4><h4 id="beforeRouteUpdate：在本路由的下级路由切换才会触发beforeRouteUpdate"><a href="#beforeRouteUpdate：在本路由的下级路由切换才会触发beforeRouteUpdate" class="headerlink" title="beforeRouteUpdate：在本路由的下级路由切换才会触发beforeRouteUpdate"></a>beforeRouteUpdate：在本路由的下级路由切换才会触发beforeRouteUpdate</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        测验：&#123;&#123;zst&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                zst:<span class="string">&#x27;廾匸改变之前&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span>&#123; <span class="comment">//组件生命周期函数</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;创建之前&#x27;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//进入组件之前，执行 beforRouteEnter </span></span><br><span class="line">        <span class="function"><span class="title">beforeRouteEnter</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">// 结果为undefined，因为在执行beforRouteEnter时候，组件还没有被创建出来，得先执行beforRouteEnter，再执行beforeCreate</span></span><br><span class="line">            next(<span class="function">(<span class="params">gx</span>)=&gt;</span>&#123; <span class="comment">//参数gx就是当前组件的实例</span></span><br><span class="line">                gx.zst = <span class="string">&#x27;被改变了&#x27;</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">beforeRouteUpdate</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line">            next()</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">beforeRouteLeave</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)</span>&#123;<span class="comment">//离开组件的时候触发</span></span><br><span class="line">            <span class="comment">//什么都不写的时候，走下一步</span></span><br><span class="line">            next()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、路由钩子函数相关概念&quot;&gt;&lt;a href=&quot;#一、路由钩子函数相关概念&quot; class=&quot;headerlink&quot; title=&quot;一、路由钩子函数相关概念&quot;&gt;&lt;/a&gt;一、路由钩子函数相关概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;什么情况下要使用路由的钩子函数？&lt;ul&gt;
&lt;li</summary>
      
    
    
    
    <category term="day2" scheme="https://zhang-sitong.gitee.io/blogs/categories/day2/"/>
    
    
    <category term="vue" scheme="https://zhang-sitong.gitee.io/blogs/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue拦截器</title>
    <link href="https://zhang-sitong.gitee.io/blogs/2021/01/25/1%E3%80%81vue%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>https://zhang-sitong.gitee.io/blogs/2021/01/25/1%E3%80%81vue%E6%8B%A6%E6%88%AA%E5%99%A8/</id>
    <published>2021-01-25T06:49:21.000Z</published>
    <updated>2021-01-26T07:16:52.931Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、拦截器的基本介绍"><a href="#一、拦截器的基本介绍" class="headerlink" title="一、拦截器的基本介绍"></a>一、拦截器的基本介绍</h2><ul><li>什么是拦截器:<ul><li>想拦截住我们的请求过程<br> 比如你想在请求前做一些事情，拦截请求，等这件事做完之后再去请求<br> 或者是要等请求结束之后做一些事情，再返回数据，可以拦截处理之后再返回</li></ul></li><li>拦截器的作用:<ul><li>一般来说，像数据交互之类的都要用到不同的身份验证，比如登录 token验证，验证用户<br> 是否登录，如果没有登录，该用户就不能操作登录之后的内容，这就是拦截器的作用</li></ul></li></ul><h2 id="二、拦截器的分类"><a href="#二、拦截器的分类" class="headerlink" title="二、拦截器的分类"></a>二、拦截器的分类</h2><p>请求拦截器和响应拦截器/路由拦截器<br><code>PS:一般在请求拦截器中增加标识token或其他请求配置，在响应拦截器中对统一错误或状态码进行处理</code><br>① axios提供了拦截请求的功能，可以在发出请求前进行操作，例如统一为所有的请求添加token头信息。<br>② axios提供了拦截响应的功能，可以在处理响应前进行操作，例如统一处理401身份认证错误。</p><h2 id="三、代码演示"><a href="#三、代码演示" class="headerlink" title="三、代码演示"></a>三、代码演示</h2><h4 id="路由拦截器-通过路由进行判断"><a href="#路由拦截器-通过路由进行判断" class="headerlink" title="路由拦截器 : 通过路由进行判断"></a>路由拦截器 : 通过路由进行判断</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//to表示要去的路由指向，from是指从哪个路由跳转过来的，next是判断操作</span></span><br><span class="line"><span class="comment">// 配置全局的vue路由拦截器  导航守卫(路由守卫)</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(to)</span><br><span class="line">        <span class="comment">// 判断 是否是跳转到 admin页 如果是则必须登录才能跳转</span></span><br><span class="line">    <span class="keyword">if</span> (to.path <span class="keyword">in</span> [<span class="string">&quot;/路由地址&quot;</span>,<span class="string">&quot;/...&quot;</span>,<span class="string">&quot;/...&quot;</span>])&#123;</span><br><span class="line">        <span class="comment">//判断 是否登录</span></span><br><span class="line">        <span class="keyword">const</span> token = sessionStorage.getItem(<span class="string">&quot;token&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> (!token) &#123;</span><br><span class="line">            alert(<span class="string">&quot;没有登录，不能操作&quot;</span>)</span><br><span class="line">                <span class="comment">//跳转到登录页</span></span><br><span class="line">            next(<span class="string">&quot;/login?back=&quot;</span> + to.fullPath)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//放行</span></span><br><span class="line">    next()</span><br><span class="line">&#125;)  </span><br></pre></td></tr></table></figure><h4 id="request请求拦截器-在请求发送前进行一些操作"><a href="#request请求拦截器-在请求发送前进行一些操作" class="headerlink" title="request请求拦截器 : 在请求发送前进行一些操作"></a>request请求拦截器 : 在请求发送前进行一些操作</h4><p>在main.js中<br>import axios from ‘axios’ //引入axios<br>Vue.prototype.$http = axios //配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> token = <span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;token&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (token) &#123;</span><br><span class="line">     config.headers.token = token <span class="comment">//把token放在请求头中（headers是对象类型）</span></span><br><span class="line">     <span class="comment">// 如果后端使用了rest framework jwt，如下：</span></span><br><span class="line">   <span class="comment">//config.headers.common[&#x27;Authorization&#x27;] = &#x27;jwt &#x27; + token // 头部设置</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error) <span class="comment">//打印错误信息</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="response响应拦截器-在接收到响应后进行一些操作"><a href="#response响应拦截器-在接收到响应后进行一些操作" class="headerlink" title="response响应拦截器 : 在接收到响应后进行一些操作"></a>response响应拦截器 : 在接收到响应后进行一些操作</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 响应拦截器（在响应时自动会做的操作）</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">　　<span class="keyword">return</span> response <span class="comment">// 成功直接返回</span></span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error.request) <span class="comment">// 打印错误信息</span></span><br><span class="line"><span class="comment">//处理错误信息</span></span><br><span class="line">  <span class="keyword">if</span> (error.request.status === <span class="number">400</span>)&#123;  <span class="comment">// 400错误的状态码</span></span><br><span class="line">    <span class="built_in">window</span>.location.href = <span class="string">&quot;/&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> error </span><br><span class="line"><span class="comment">//返回错误信息</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、拦截器的基本介绍&quot;&gt;&lt;a href=&quot;#一、拦截器的基本介绍&quot; class=&quot;headerlink&quot; title=&quot;一、拦截器的基本介绍&quot;&gt;&lt;/a&gt;一、拦截器的基本介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;什么是拦截器:&lt;ul&gt;
&lt;li&gt;想拦截住我们的请求过程&lt;br&gt; </summary>
      
    
    
    
    <category term="day1" scheme="https://zhang-sitong.gitee.io/blogs/categories/day1/"/>
    
    
    <category term="vue" scheme="https://zhang-sitong.gitee.io/blogs/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zhang-sitong.gitee.io/blogs/2021/01/25/hello-world/"/>
    <id>https://zhang-sitong.gitee.io/blogs/2021/01/25/hello-world/</id>
    <published>2021-01-25T06:47:07.295Z</published>
    <updated>2021-01-25T06:47:07.295Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
